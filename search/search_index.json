{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Chaos Engineering Experiments Automation","text":"<p>The Chaos Toolkit aims to be the simplest and easiest way to explore building  your own Chaos Engineering Experiments. It  also aims to define a vendor and technology independent way of specifying  Chaos Engineering experiments by providing an  Open API.</p> <p></p> <p>We suggest you start with the tutorials to get a feel for how the Chaos Toolkit can help you automate your Chaos Engineering effort. Once you are ready for your own experiments, have a look at the various driver extensions we support, which ranges from platforms to cloud providers while giving you tools to observe your system as you run your experiments.</p> <p>Finally, if you came to contribute, you are more than welcome. Start with joining the community and read our references like the Open API which specifies the Chaos Toolkit experiment format.</p> <p>Above all, have fun!</p>"},{"location":"deployment/k8s/operator/","title":"Deploy Chaos Toolkit as a Kubernetes Operator","text":"<p>Kubernetes operators are a popular approach to create bespoke controllers of any application on top of the Kubernetes API.</p> <p>The Chaos Toolkit operator listens for experiment declarations and triggers a new Kubernetes pod, running the Chaos Toolkit with the specified experiment.</p>"},{"location":"deployment/k8s/operator/#deploy-the-operator","title":"Deploy the operator","text":"<p>The operator can be found on the Chaos Toolkit incubator.</p> <p>It is deployed via typical Kubernetes manifests which need to be applied via Kustomize, the native configuration manager.</p> <p>First, download the Kustomize binary:</p> <pre><code>curl -s \"https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh\" | bash\n</code></pre> <p>For macOS, you can also install it via the Homebrew package manager: </p> <pre><code>brew install kustomize\n</code></pre> <p>Next, simply run the following:</p> <pre><code>kustomize build manifests/overlays/generic-rbac | kubectl apply -f -\n</code></pre> <p>This will build the manifests and apply them on your current default cluster. Notice how we use the RBAC variant of the deployment. If you have other requirements (no-RBAC, pod security or network policies), then check the operator\u2019s documentation to deploy the appropriate variant.</p> <p>You can install another variant as follows:</p> <pre><code>kustomize build manifests/overlays/generic[-rbac[-podsec[-netsec]]] | kubectl apply -f -\n</code></pre> <p>By now, you should have the operator running in the <code>chaostoolkit-crd</code>.</p> <pre><code>kubectl -n chaostoolkit-crd get pods\nNAME                                READY   STATUS    RESTARTS   AGE\nchaostoolkit-crd-7ddb9b78d9-dgxx7   1/1     Running   0          35s\n</code></pre>"},{"location":"deployment/k8s/operator/#what-the-operator-creates-deletes","title":"What the operator creates &amp; deletes","text":"<p>The operator deployment creates two namespaces, by default: - the <code>chaostoolkit-crd</code> namespace contains the operator pod and Chaos Toolkit  experiment definitions  - the <code>chaostoolkit-run</code> namespace contains pods running the Chaos Toolkit  experiments</p> <p>When you apply an experiment object, the following other objects are created in the <code>chaostoolkit-run</code> namespace:</p> <ul> <li>a Service Account specific to the pod</li> <li>a Pod running the Chaos Toolkit based of the image you indicated</li> <li>a role and a binding with enough permissions to handle pods inside the    <code>chaostoolkit-run</code> namespace itself</li> <li>a config map specific to that experiment with the experiment payload you gave</li> <li>a config mapo with environment variables specific to that experiment</li> </ul> <p>On top of that, if you setup a schedule, a cron job object is created too.</p> <p>In all cases, when you delete the experiment, all these objects are also deleted.</p>"},{"location":"deployment/k8s/operator/#options","title":"Options","text":"<p>All the options are hanging under the <code>spec</code> element of the <code>ChaosToolkitExperiment</code> kind object.</p> <pre><code>apiVersion: chaostoolkit.org/v1\nkind: ChaosToolkitExperiment\nmetadata:\nname: my-chaos-exp\nnamespace: chaostoolkit-crd\nspec:\n...\n</code></pre> <p>None of these options are required.</p> Option Path Description Value Type Default Value <code>namespace:</code> Namespace where to create the experiment objects string <code>chaostoolkit-run</code> <code>serviceaccount:\u00a0\u00a0name:</code> Name of the service account to attach to the experiment pod string <code>chaostoolkit</code> <code>role:\u00a0\u00a0name:</code> Name of the role to attach to the experiment pod string <code>chaostoolkit-experiment</code> <code>role:\u00a0\u00a0bind:</code> Name of the rolebinding to attach to the experiment pod string <code>chaostoolkit-experiment</code> <code>role:\u00a0\u00a0binds_to_namespaces:</code> List of namespaces to add the role and its binding to list[string] <code>[]</code> <code>pod:\u00a0\u00a0configMapName:</code> Name of the config map to attach to the experiment pod string <code>chaostoolkit-env</code> <code>pod:\u00a0\u00a0image:</code> Name of if the image to use for the pod string <code>chaostoolkit/chaostoolkit:latest</code> <code>pod:\u00a0\u00a0env:\u00a0\u00a0\u00a0\u00a0enabled:</code> Do we mount environment variables from the config map into the pod? boolean <code>true</code> <code>pod:\u00a0\u00a0env:\u00a0\u00a0\u00a0\u00a0secretName:</code> Mount the secrets values from this secret as environment variables string <code>\"\"</code> <code>pod:\u00a0\u00a0settings:\u00a0\u00a0\u00a0\u00a0enabled:</code> Should we mount settings as a file to the pod boolean <code>false</code> <code>pod:\u00a0\u00a0settings:\u00a0\u00a0\u00a0\u00a0secretName:</code> Mount the given secret holding Chaos Toolkit settings as a file to the pod string <code>chaostoolkit-settings</code> <code>pod:\u00a0\u00a0experiment:\u00a0\u00a0\u00a0\u00a0asFile:</code> Mount the experiment\u2019s payload as file (if <code>true</code>) or from a URL boolean <code>true</code> <code>pod:\u00a0\u00a0experiment:\u00a0\u00a0\u00a0\u00a0configMapName:</code> Name of the config map holding the experiment\u2019s payload string <code>chaostoolkit-experiment</code> <code>pod:\u00a0\u00a0experiment:\u00a0\u00a0\u00a0\u00a0configMapExperimentFileName:</code> Name of experiment file mounted into the container string <code>experiment.json</code> <code>pod:\u00a0\u00a0chaosArgs:</code> Replace the default pod\u2019s arguments with these ones list[string] <code>[]</code> <code>schedule:\u00a0\u00a0kind:</code> Cron kind (only CronJob supported) string <code>cronjob</code> <code>schedule:\u00a0\u00a0value:</code> Cron-like schedule syntax string <code>\"\"</code>"},{"location":"deployment/k8s/operator/#run-an-experiment","title":"Run an experiment","text":"<p>Now that your controller is listening, you can ask it to schedule a Chaos Toolkit experiment by applying a resource with the following API:</p> <pre><code>apiVersion: chaostoolkit.org/v1\nkind: ChaosToolkitExperiment\n</code></pre> <p>Below is a basic example, assuming a file named <code>basic.yaml</code>:</p> <pre><code>---\napiVersion: v1\nkind: ConfigMap\nmetadata:\nname: chaostoolkit-experiment\nnamespace: chaostoolkit-run\ndata:\nexperiment.json: |\n{\n\"title\": \"Hello world!\",\n\"description\": \"Say hello world.\",\n\"method\": [\n{\n\"type\": \"action\",\n\"name\": \"say-hello\",\n\"provider\": {\n\"type\": \"process\",\n\"path\": \"echo\",\n\"arguments\": \"hello\"\n}\n}\n]\n}\n---\napiVersion: chaostoolkit.org/v1\nkind: ChaosToolkitExperiment\nmetadata:\nname: my-chaos-exp\nnamespace: chaostoolkit-crd\n</code></pre> <p>First, we will use the default namespace in which the Chaos Toolkit will run.</p> <p>Then, we need a config map to pass the experiment to execute.</p> <p>Finally, we simply create a <code>ChaosToolkitExperiment</code> object that the controller picks up and understand as a new experiment to run in its own pod.</p> <p>Apply it as follows:</p> <pre><code>kubectl apply -f basic.yaml\n</code></pre> <p>Then, you can check the Chaos Toolkit experiment has been registered, and will be scheduled to run as soon as possible:</p> <pre><code>kubectl -n chaostoolkit-crd get ctks\n</code></pre> <p>Look at the Chaos Toolkit running:</p> <pre><code>kubectl -n chaostoolkit-run get pods\n</code></pre> <p>The status of the experiment\u2019s run, if it deviated, defines the status if the pod. So, when the experiment does deviate, the pod should have a status set to <code>Error</code>. Otherwise, the status will be <code>Completed</code>.</p>"},{"location":"deployment/k8s/operator/#manage-the-chaos-toolkit-experiments","title":"Manage the Chaos Toolkit Experiments","text":""},{"location":"deployment/k8s/operator/#list-and-inspect-experiments","title":"List and inspect experiments","text":"<p>You can list your experiments as follows:</p> <pre><code>kubectl -n chaostoolkit-crd get chaosexperiments \n</code></pre> <p>You can describe one experiment as follows:</p> <pre><code>kubectl -n chaostoolkit-crd describe chaosexperiment my-chaos-exp \n</code></pre> <p>You can also use the short names for the custom resource <code>ctks</code> and <code>ctk</code>.</p>"},{"location":"deployment/k8s/operator/#delete-the-experiment-runs-resources","title":"Delete the experiment run\u2019s resources","text":"<p>You can delete an experiment and its related resources as follows:</p> <pre><code>kubectl -n chaostoolkit-crd delete ctk my-chaos-exp \n</code></pre> <p>However, the custom resources (ConfigMap, Secrets, etc.) won\u2019t be deleted.  This command only deletes the resources that the operator creates for the  experiment to be able to run.</p> <p>To delete all the run\u2019s resources, simply delete the objects as follows:</p> <pre><code>kubectl delete -f basic.yaml\n</code></pre>"},{"location":"deployment/k8s/operator/#various-configurations","title":"Various configurations","text":"<p>You may decide to change various aspects of the final pod (such as passing settings as secrets, changing the roles allowed to the pod, even override the entire pod template).</p>"},{"location":"deployment/k8s/operator/#make-the-operator-more-verbose","title":"Make the operator more verbose","text":"<p>By default, the operator logs at INFO level. To enable the DEBUG level,  you need to change the operator\u2019s deployment command:</p> <p>In the file <code>manifests/base/common/deployment.yaml</code>:</p> <p>Change:</p> <pre><code>  - name: crd\nimage: chaostoolkit/k8scrd:latest\nimagePullPolicy: Always\n</code></pre> <p>to:</p> <pre><code>  - name: crd\nimage: chaostoolkit/k8scrd:latest\nimagePullPolicy: Always\ncommand:\n- kopf\nargs:\n- run\n- --verbose\n- --namespace\n- chaostoolkit-crd\n- controller.py\n</code></pre> <p>Then re-deploy using Kustomize.</p>"},{"location":"deployment/k8s/operator/#configure-the-toolkit-with-environment-variables","title":"Configure the toolkit with environment variables","text":"<p>Chaos Toolkit experiments often expect data to be passed as environment variables of the <code>chaos</code>\u2018s command shell.</p> <p>The operator allows you to specify those values through the config map:</p> <pre><code>---\napiVersion: v1\nkind: ConfigMap\nmetadata:\nname: chaostoolkit-env\nnamespace: chaostoolkit-run\ndata:\nNAME: \"Jane Doe\"\n</code></pre> <p>They will be injected into the Chaos Toolkit\u2019s pod as environment variables.</p> <p>You might need several environment config maps for various experiments. You can tell the operator where to find the config map to be loaded as environment variables.</p> <p>We\u2019ll assume you defined another config map named <code>my-chaos-env-vars</code>. You can use it by setting the <code>configMapName</code> in the <code>env</code> block of the pod spec: </p> <pre><code>---\napiVersion: chaostoolkit.org/v1\nkind: ChaosToolkitExperiment\nmetadata:\nname: my-chaos-exp\nnamespace: chaostoolkit-crd\nspec:\npod:\nenv:\nconfigMapName: my-chaos-env-vars\n</code></pre> <p>You can disable loading environment variables into the pod by using the <code>enabled</code> property:</p> <pre><code>---\napiVersion: chaostoolkit.org/v1\nkind: ChaosToolkitExperiment\nmetadata:\nname: my-chaos-exp\nnamespace: chaostoolkit-crd\nspec:\npod:\nenv:\nenabled: false\n</code></pre> <p>Plain text environment variables might not be secure enough in some use cases,  such as database user name &amp; passord, API keys, tokens, etc. You can define multiple encrypted key-value pairs in a Kubernetes secret and load them as environment variables. To to so, you shall indicate the name of the secret with the <code>secretName</code> property.</p> <p>Assuming you created a generic secret named <code>chaostoolkit-secrets</code>, you can load the values as shown below:</p> <pre><code>---\napiVersion: chaostoolkit.org/v1\nkind: ChaosToolkitExperiment\nmetadata:\nname: my-chaos-exp\nnamespace: chaostoolkit-crd\nspec:\npod:\nenv:\nsecretName: chaostoolkit-secrets\n</code></pre> <p>All the key-value pairs from the secret will be injected into the  Chaos Toolkit\u2019s pod as environment variables.</p>"},{"location":"deployment/k8s/operator/#handle-multiple-experiment-files","title":"Handle multiple experiment files","text":"<p>In the basic example, the name of the config map holding the experiment  is the default value <code>chaostoolkit-experiment</code>. Usually, you\u2019ll want a more unique name since you\u2019ll probably run multiple experiments from the <code>chaostoolkit-run</code> namespace.</p> <p>In that case, do it as follows:</p> <pre><code>---\napiVersion: v1\nkind: ConfigMap\nmetadata:\nname: chaostoolkit-experiment-1234\nnamespace: chaostoolkit-run\ndata:\nexperiment.json: |\n{\n\"title\": \"...\",\n}\n---\napiVersion: chaostoolkit.org/v1\nkind: ChaosToolkitExperiment\nmetadata:\nname: my-chaos-exp\nnamespace: chaostoolkit-crd\nspec:\npod:\nexperiment:\nconfigMapName: chaostoolkit-experiment-1234\n</code></pre> <p>You need to define the <code>configMapName</code> in the <code>experiment</code> block of  the pod spec. </p>"},{"location":"deployment/k8s/operator/#use-the-experiment-in-yaml-format","title":"Use the experiment in YAML format","text":"<p>If your experiments are encoded using YAML, you can set it as follows:</p> <pre><code>---\napiVersion: v1\nkind: ConfigMap\nmetadata:\nname: chaostoolkit-experiment-1234\nnamespace: chaostoolkit-run\ndata:\nexperiment.yaml: |\n---\ntitle: \"...\"\n---\napiVersion: chaostoolkit.org/v1\nkind: ChaosToolkitExperiment\nmetadata:\nname: my-chaos-exp\nnamespace: chaostoolkit-crd\nspec:\npod:\nexperiment:\nconfigMapName: chaostoolkit-experiment-1234\nconfigMapExperimentFileName: experiment.yaml\n</code></pre>"},{"location":"deployment/k8s/operator/#load-the-experiment-from-a-url","title":"Load the experiment from a URL","text":"<p>By default, the experiment is read from a file. But you may store it remotely e.g. GitHub and have it available over HTTP. You might want to load it from its remote URL instead.</p> <p>You can tell the Chaos Toolkit to load it from a remote URL rather than from a local file, as follows:</p> <pre><code>---\napiVersion: v1\nkind: ConfigMap\nmetadata:\nname: chaostoolkit-env\nnamespace: chaostoolkit-run\ndata:\nEXPERIMENT_URL: \"https://example.com/experiment.json\"\n---\napiVersion: chaostoolkit.org/v1\nkind: ChaosToolkitExperiment\nmetadata:\nname: my-chaos-exp\nnamespace: chaostoolkit-crd\nspec:\npod:\nexperiment:\nasFile: false\n</code></pre> <p>First, you need to pass the <code>EXPERIMENT_URL</code> environment variable.</p> <p>Then, tell the operator not to mount the default experiment volume. To do so, you need to set <code>asFile</code> to <code>false</code> in the <code>experiment</code> block of the pod spec.</p>"},{"location":"deployment/k8s/operator/#run-experiments-in-another-namespace","title":"Run experiments in another namespace","text":"<p>You may create the namespace in which the resources will be deployed:</p> <pre><code>---\napiVersion: chaostoolkit.org/v1\nkind: ChaosToolkitExperiment\nmetadata:\nname: my-chaos-exp\nnamespace: chaostoolkit-crd\nspec:\nnamespace: my-other-namespace\n</code></pre> <p>You need to defined the <code>namespace</code> value at the spec level.</p> <p>If the namespace already exists, a message will be logged but this will not abort the operation.</p> <p>However, this namespace will be entirely under your responsibility. No network nor pod securities will be managed in your namespace, if the operator was  installed with those variants. You\u2019ll need to manage them yourself.  </p>"},{"location":"deployment/k8s/operator/#pass-chaos-toolkit-settings-as-a-kubernetes-secret","title":"Pass Chaos Toolkit settings as a Kubernetes secret","text":"<p>Chaos Toolkit reads its settings from a file and you can pass yours by creating a Kubernetes secret named, by default, <code>chaostoolkit-settings</code>.</p> <p>For instance, assuming you have a Chaos Toolkit settings file, you can create a secret from it as follows:</p> <pre><code>kubectl -n chaostoolkit-run \\\n    create secret generic chaostoolkit-settings \\\n    --from-file=settings.yaml=./settings.yaml\n</code></pre> <p>Note, the settings file must be named as <code>settings.yaml</code> within the secret.</p> <p>Reading settings is disabled by default, so you need to let the operator know it should allow it for that run:</p> <pre><code>---\napiVersion: chaostoolkit.org/v1\nkind: ChaosToolkitExperiment\nmetadata:\nname: my-chaos-exp\nnamespace: chaostoolkit-crd\nspec:\nnamespace: chaostoolkit-run\npod:\nsettings:\nenabled: true\n</code></pre> <p>You need to set the variable <code>enabled</code> to <code>true</code>in the <code>settings</code> block of the  pod spec.</p> <p>The default name for that secret is <code>chaostoolkit-settings</code> but you can change it with the <code>secretName</code> variable, as follows:</p> <pre><code>---\napiVersion: chaostoolkit.org/v1\nkind: ChaosToolkitExperiment\nmetadata:\nname: my-chaos-exp\nnamespace: chaostoolkit-crd\nspec:\nnamespace: chaostoolkit-run\npod:\nsettings:\nenabled: true\nsecretName: my-super-secret\n</code></pre>"},{"location":"deployment/k8s/operator/#keep-generated-resources-even-when-the-cro-is-deleted","title":"Keep generated resources even when the CRO is deleted","text":"<p>When you delete the <code>ChaosToolkitExperiment</code> resource, all the allocated resources are deleted too (pod, service account, \u2026). To prevent this, you may set the <code>keep_resources_on_delete</code> property to <code>true</code> at the spec level. </p> <pre><code>---\napiVersion: chaostoolkit.org/v1\nkind: ChaosToolkitExperiment\nmetadata:\nname: my-chaos-exp\nnamespace: chaostoolkit-crd\nspec:\nnamespace: chaostoolkit-run\nkeep_resources_on_delete: true\n</code></pre> <p>In that case, you are responsible to cleanup all resources.</p>"},{"location":"deployment/k8s/operator/#pass-your-own-role-to-bind-to-the-service-account","title":"Pass your own role to bind to the service account","text":"<p>If your cluster has enabled RBAC, then the operator automatically binds a basic role to the service account associated with the chaostoolkit pod. That role allows your experiment to create/get/list/delete other pods in the same namespace.</p> <p>You probably have more specific requirements, here is how to do it:</p> <pre><code>---\napiVersion: chaostoolkit.org/v1\nkind: ChaosToolkitExperiment\nmetadata:\nname: my-chaos-exp\nnamespace: chaostoolkit-crd\nspec:\nnamespace: chaostoolkit-run\nrole:\nname: my-role\n</code></pre> <p>The property <code>name</code> should be set to the name of the role you have created in the namespace which the experiment is executed in. The service account associated with the pod will be bound to that role.</p>"},{"location":"deployment/k8s/operator/#override-the-default-chaos-command-arguments","title":"Override the default chaos command arguments","text":"<p>The pod template executes the <code>chaos run</code> command by default. You may want to extends or change the sub-command to execute when running the pod. You can define the <code>chaos</code> arguments as follow:</p> <pre><code>---\napiVersion: chaostoolkit.org/v1\nkind: ChaosToolkitExperiment\nmetadata:\nname: my-chaos-exp\nnamespace: chaostoolkit-crd\nspec:\nnamespace: chaostoolkit-run\npod:\nchaosArgs:\n- --verbose\n- run\n- --dry\n- $(EXPERIMENT_PATH)\n</code></pre> <p>You need to set the list of arguments in the <code>chaosArgs</code> variable at pod  spec level.</p>"},{"location":"deployment/k8s/operator/#label-your-chaos-toolkit-experiment","title":"Label your Chaos Toolkit experiment","text":"<p>Experiment labels can be defined in the <code>ChaosToolkitExperiment</code>\u2018s metadata. All labels will be forwarded, if not already defined, in the pod running the experiment.</p> <p>You can define labels as follow:</p> <pre><code>---\napiVersion: chaostoolkit.org/v1\nkind: ChaosToolkitExperiment\nmetadata:\nname: my-chaos-exp\nnamespace: chaostoolkit-crd\nlabels:\nenvironment: staging\ntier: backend\ntarget: database\n</code></pre> <p>These labels can then be used as selectors.</p>"},{"location":"deployment/k8s/operator/#allow-network-traffic-for-chaos-toolkit-experiments","title":"Allow network traffic for Chaos Toolkit experiments","text":"<p>When the operator is installed with the network security variant, the <code>chaostoolkit</code> pod has limited network access. The pod is, by default, isolated for ingress connectivity and is limited to only DNS lookup &amp; HTTPS for external traffic.</p> <p>To allow the pod for other access, you may create another network policy within the <code>chaostoolkit-run</code> namespace for pods matching the  <code>app: chaostoolkit</code> label:</p> <pre><code>---\nkind: NetworkPolicy\napiVersion: networking.k8s.io/v1\nmetadata:\nname: my-custom-network-policy\nnamespace: chaostoolkit-run\nspec:\npodSelector:\nmatchLabels:\napp: chaostoolkit\n</code></pre>"},{"location":"deployment/k8s/operator/#run-periodic-and-recurring-experiments","title":"Run periodic and recurring experiments","text":"<p>The operator supports <code>crontab</code> schedule for running Chaos Toolkit experiments periodically on a given schedule.</p> <p>To do so, you can define a <code>.spec.schedule</code> section, as follow:</p> <pre><code>---\napiVersion: chaostoolkit.org/v1\nkind: ChaosToolkitExperiment\nmetadata:\nname: my-chaos-exp\nnamespace: chaostoolkit-crd\nspec:\nnamespace: chaostoolkit-run\nschedule:\nkind: cronJob\nvalue: \"*/1 * * * *\"\n</code></pre> <p>This example runs a Chaos Toolkit experiment every minute.</p> <p>You can list your scheduled experiments with the kubernetes\u2019 <code>cronjob</code> resource:</p> <pre><code>kubectl -n chaostoolkit-run get cronjobs\n</code></pre>"},{"location":"deployment/k8s/operator/#run-an-experiment-with-specific-extensions","title":"Run an experiment with specific extensions","text":"<p>The default container image used by the operator is the official  Chaos Toolkit image which embeds no Chaos Toolkit extensions.</p> <p>This means that you will likely need to create your bespoke container image. For instance, to install the Chaos Toolkit Kubernetes extension, create a Dockerfile like this:</p> <pre><code>FROM chaostoolkit/chaostoolkit\n\nUSER root\nRUN apk update &amp;&amp; \\\napk add --virtual build-deps libffi-dev openssl-dev gcc python3-dev \\\nmusl-dev &amp;&amp; \\\npip install --no-cache-dir chaostoolkit-addons chaostoolkit-reliably &amp;&amp; \\\napk del build-deps\nUSER 1001\n</code></pre> <p>Then create the image with docker:</p> <pre><code>docker build --tag my/chaostoolkit -f ./Dockerfile .\n</code></pre> <p>or, something such as Podman:</p> <pre><code>podman build --tag my/chaostoolkit -f ./Dockerfile\n</code></pre> <p>You can check your image contains the installed extensions as follows:</p> <pre><code>docker run --rm -it my/chaostoolkit info extensions\n</code></pre> <p>Once this image is pushed to any registry you can access, you need to let the operator know it must use it.</p> <pre><code>---\napiVersion: chaostoolkit.org/v1\nkind: ChaosToolkitExperiment\nmetadata:\nname: my-chaos-exp\nnamespace: chaostoolkit-crd\nspec:\nnamespace: chaostoolkit-run\npod:\nimage: my/chaostoolkit\n</code></pre> <p>Tip</p> <p>Note that the first time the job will create a pod will be at the end of the first period.</p>"},{"location":"deployment/k8s/operator/#uninstall-the-operator","title":"Uninstall the operator","text":"<p>To uninstall the operator and its own resources, simply run the following command for the overlay that is deployed.</p> <pre><code>kustomize build manifests/overlays/generic[-rbac[-podsec[-netsec]]] | kubectl delete -f -\n</code></pre>"},{"location":"drivers/addons/","title":"Extension <code>chaosaddons</code>","text":"Version 0.8.6 Repository https://github.com/chaostoolkit/chaostoolkit-addons <p>This project provides a set of commnly requested actions, probes, tolerances or controls that can benefit the community.</p>"},{"location":"drivers/addons/#install","title":"Install","text":"<p>This package requires Python 3.7+</p> <p>To be used from your experiment, this package must be installed in the Python environment where chaostoolkit already lives.</p> <pre><code>$ pip install chaostoolkit-addons\n</code></pre>"},{"location":"drivers/addons/#develop","title":"Develop","text":""},{"location":"drivers/addons/#test","title":"Test","text":"<p>To run the tests for the project execute the following:</p> <pre><code>$ pytest\n</code></pre>"},{"location":"drivers/addons/#contribute","title":"Contribute","text":"<p>If you wish to contribute more functions to this package, you are more than welcome to do so. Please, fork this project, make your changes following the usual PEP 8 code style, sprinkling with tests and submit a PR for review.</p>"},{"location":"drivers/addons/#exported-controls","title":"Exported Controls","text":""},{"location":"drivers/addons/#bypass","title":"bypass","text":"<p>Sets the <code>dry</code> property on activities that match either by type or by names.</p> <p>This allows to bypass some activities in certain contexts. For instance, you want to run on development but not in production certain actions.</p> <p>For instance, to bypass the execution of the <code>say-hello</code> activity:</p> <pre><code>\"controls\": [\n{\n\"name\": \"bypass-actions\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaddons.controls.bypass\",\n\"arguments\": {\n\"target_names\": [\n\"say-hello\"\n]\n}\n}\n}\n],\n</code></pre> <p>For instance, to bypass the execution of all actions in the experiment:</p> <pre><code>\"controls\": [\n{\n\"name\": \"bypass-actions\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaddons.controls.bypass\",\n\"arguments\": {\n\"target_type\": \"action\"\n}\n}\n}\n],\n</code></pre> <p>This module exports controls covering the following phases of the execution of an experiment:</p> Level Before After Experiment Loading False False Experiment True False Steady-state Hypothesis False False Method False False Rollback False False Activities True True <p>In addition, the controls may define the followings:</p> Level Enabled Validate Control False Configure Control False Cleanup Control False <p>To use this control module, please add the following section to your experiment:</p> JSONYAML <pre><code>{\n\"controls\": [\n{\n\"name\": \"chaosaddons\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaddons.controls.bypass\"\n}\n}\n]\n}\n</code></pre> <pre><code>controls:\n- name: chaosaddons\nprovider:\nmodule: chaosaddons.controls.bypass\ntype: python\n</code></pre> <p>This block may also be enabled at any other level (steady-state hypothesis or activity) to focus only on that level.</p> <p>When enabled at the experiment level, by default, all sub-levels are also applied unless you set the <code>automatic</code> properties to <code>false</code>.</p>"},{"location":"drivers/addons/#repeat","title":"repeat","text":"<p>This module exports controls covering the following phases of the execution of an experiment:</p> Level Before After Experiment Loading False False Experiment False False Steady-state Hypothesis False False Method False False Rollback False False Activities False True <p>In addition, the controls may define the followings:</p> Level Enabled Validate Control False Configure Control False Cleanup Control False <p>To use this control module, please add the following section to your experiment:</p> JSONYAML <pre><code>{\n\"controls\": [\n{\n\"name\": \"chaosaddons\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaddons.controls.repeat\"\n}\n}\n]\n}\n</code></pre> <pre><code>controls:\n- name: chaosaddons\nprovider:\nmodule: chaosaddons.controls.repeat\ntype: python\n</code></pre> <p>This block may also be enabled at any other level (steady-state hypothesis or activity) to focus only on that level.</p> <p>When enabled at the experiment level, by default, all sub-levels are also applied unless you set the <code>automatic</code> properties to <code>false</code>.</p>"},{"location":"drivers/addons/#safeguards","title":"safeguards","text":"<p>The safeguard control provides a mechanism to keep an eye on the system while running an experiment to decide if the experiment ought to stop as soon as possible or not.</p> <p>For instance, let\u2019s say your system detects a dire condition that has nothing to do with this experiment. It may decide it\u2019s time for the experiment to terminate as it could create even more noise or problems.</p> <p>To use this control, simply add the following to your global (or per experiment) controls block:</p> <pre><code>\"controls\": [\n{\n\"name\": \"safeguard\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaddons.controls.safeguards\",\n\"arguments\": {\n\"probes\": [\n{\n\"name\": \"safeguard_1\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"mymodule\",\n\"func\": \"checkstuff\"\n},\n\"background\": true,\n\"tolerance\": true\n},\n{\n\"name\": \"safeguard_2\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"mymodule\",\n\"func\": \"checkstuff\"\n},\n\"tolerance\": true\n},\n{\n\"name\": \"safeguard_3\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"mymodule\",\n\"func\": \"checkstuff\"\n},\n\"frequency\": 2,\n\"tolerance\": true\n}\n]\n}\n}\n}\n],\n</code></pre> <p>In this example, we declare three safeguard probes. The first one will run once in the background as soon as possible. The second one will run once before the experiment starts. The third one will run repeatedly every 2 seconds.</p> <p>If either of them doesn\u2019t meet its tolerance, the entire execution will terminate as soon as possible and leave the status of the experiment to <code>interrupted</code>.</p> <p>Probes that do not declare the <code>background</code> or <code>frequency</code> properties are meant to run before the experiment really starts and will block until they are all finished. This offers a mechanism for pre-checking the system\u2019s health.</p> <p>When the properties are set, the probes run as soon as possible but do not block the experiment from carrying on.</p> <p>Bear in mind that your probes can also block the process from exiting. This means that while the experiment has ended, your probe could be not returning and therefore blocking the process. Make sure your probe do not make blocking calls for too long.</p> <p>This module exports controls covering the following phases of the execution of an experiment:</p> Level Before After Experiment Loading False False Experiment True True Steady-state Hypothesis False False Method False False Rollback False False Activities False False <p>In addition, the controls may define the followings:</p> Level Enabled Validate Control True Configure Control True Cleanup Control False <p>To use this control module, please add the following section to your experiment:</p> JSONYAML <pre><code>{\n\"controls\": [\n{\n\"name\": \"chaosaddons\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaddons.controls.safeguards\"\n}\n}\n]\n}\n</code></pre> <pre><code>controls:\n- name: chaosaddons\nprovider:\nmodule: chaosaddons.controls.safeguards\ntype: python\n</code></pre> <p>This block may also be enabled at any other level (steady-state hypothesis or activity) to focus only on that level.</p> <p>When enabled at the experiment level, by default, all sub-levels are also applied unless you set the <code>automatic</code> properties to <code>false</code>.</p>"},{"location":"drivers/addons/#synchronization","title":"synchronization","text":"<p>This module exports controls covering the following phases of the execution of an experiment:</p> Level Before After Experiment Loading False False Experiment False True Steady-state Hypothesis False False Method False False Rollback False False Activities False False <p>In addition, the controls may define the followings:</p> Level Enabled Validate Control False Configure Control False Cleanup Control False <p>To use this control module, please add the following section to your experiment:</p> JSONYAML <pre><code>{\n\"controls\": [\n{\n\"name\": \"chaosaddons\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaddons.controls.synchronization\"\n}\n}\n]\n}\n</code></pre> <pre><code>controls:\n- name: chaosaddons\nprovider:\nmodule: chaosaddons.controls.synchronization\ntype: python\n</code></pre> <p>This block may also be enabled at any other level (steady-state hypothesis or activity) to focus only on that level.</p> <p>When enabled at the experiment level, by default, all sub-levels are also applied unless you set the <code>automatic</code> properties to <code>false</code>.</p>"},{"location":"drivers/addons/#exported-activities","title":"Exported Activities","text":""},{"location":"drivers/addons/#controls","title":"controls","text":""},{"location":"drivers/addons/#utils","title":"utils","text":""},{"location":"drivers/addons/#idle_for","title":"<code>idle_for</code>","text":"Type Module chaosaddons.utils.idle Name idle_for Return null <p>Pauses the experiment without blocking the process completely.</p> <p>Signature:</p> <pre><code>def idle_for(duration: float) -&gt; None:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required duration number Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"idle-for\",\n\"type\": \"\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaddons.utils.idle\",\n\"func\": \"idle_for\",\n\"arguments\": {\n\"duration\": null\n}\n}\n}\n</code></pre> <pre><code>name: idle-for\nprovider:\narguments:\nduration: null\nfunc: idle_for\nmodule: chaosaddons.utils.idle\ntype: python\ntype: ''\n</code></pre>"},{"location":"drivers/ansible/","title":"Extension <code>chaosansible</code>","text":"Version IN_PROGESS Repository https://github.com/Mickael-Roger/chaostoolkit-ansible <p>This project is a collection of actions and probes, gathered as an extension to the Chaos Toolkit.</p> <p>Please NOTE This extension is in the early stages of development. Please feel free to create an issue in case of needed enhancement or misfunctioning.</p>"},{"location":"drivers/ansible/#install","title":"Install","text":"<p>This package requires Python 3.5+</p> <p>To be used from your experiment, this package must be installed in the Python environment where chaostoolkit already lives.</p> <pre><code>pip install -U chaostoolkit-ansible\n</code></pre>"},{"location":"drivers/ansible/#principles","title":"Principles","text":"<p>This chaos toolkit driver provides you an easy way to execute probe and/or actions using ansible modules. By using it, you can execute tasks, gather facts, \u2026 on remote systems</p>"},{"location":"drivers/ansible/#usage","title":"Usage","text":""},{"location":"drivers/ansible/#basic","title":"Basic","text":""},{"location":"drivers/ansible/#probes","title":"Probes","text":"<p>To use the probes from this package, add the following to your experiment file:</p> <p>In JSON: <pre><code>\"steady-state-hypothesis\": {\n\"title\": \"Tests\",\n\"probes\": [\n{\n\"type\": \"probe\",\n\"name\": \"test-current-directory\",\n\"tolerance\": {\n\"type\": \"jsonpath\",\n\"path\": \"$.*.task\",\n\"expect\": \"/home/me\"\n},\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosansible.probes\",\n\"func\": \"chaosansible_probe\",\n\"arguments\": {\n\"host_list\": [\"myserver1\", \"myserver2\"],\n\"facts\": \"yes\",\n\"ansible\": {\n\"module\": \"shell\",\n\"args\": \"pwd\"\n}\n}\n}\n}\n]\n}\n</code></pre></p> <p>In YAML: <pre><code>---\nsteady-state-hypothesis:\ntitle: The current working directory must be /home/me\nprobes:\n- type: probe\nname: test-current-directory\ntolerance:\ntype: jsonpath\ntarget: \"$.*.task\"\npattern: /home/me\nprovider:\ntype: python\nmodule: chaosansible.probes\nfunc: chaosansible_probe\narguments:\nhost_list: [\"myserver1\", \"myserver2\"]\nfacts: True\nansible:\nmodule: shell\nargs: pwd\n</code></pre></p> <p>That\u2019s it!</p> <p>Probes can be gathered by using the stdout of an ansible task or through the ansible gather_facts module. Each time chaostoolkit-ansible runs, it returns a json that can be used in tolerance (using jsonpath, regex, \u2026)</p> <p>This json is always formatted the same way (Example for a two targets host_list):</p> <pre><code>{\n\"target1\": {\n\"fact\": \" -&gt; JSON result of the ansible gather_facts\",\n\"task\": \" -&gt; String result containing the stdout value of the task result - Empty when ansible task do not return stdout\"\n},\n\"target2\": {\n\"fact\": \"...\",\n\"task\": \"...\"\n}\n}\n</code></pre>"},{"location":"drivers/ansible/#actions","title":"Actions","text":"<p>To use the actions from this package, add the following to your experiment file:</p> <p>In JSON:</p> <pre><code>\"method\": [\n{\n\"type\": \"action\",\n\"name\": \"delete-etc-hosts-file\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosansible.actions\",\n\"func\": \"chaosansible_run\",\n\"arguments\": {\n\"host_list\": [\"server1\", \"server2\"],\n\"become\": true,\n\"ansible\": {\n\"module\": \"file\",\n\"args\": {\n\"path\": \"/etc/hosts\",\n\"state\": \"absent\"\n}\n}\n}\n}\n}\n]\n</code></pre> <p>In YAML: <pre><code>---\nmethod:\n- type: action\nname: delete-etc-hosts-file\nprovider:\ntype: python\nmodule: chaosansible.actions\nfunc: chaosansible_run\narguments:\nhost_list: [\"server1\", \"server2\"]\nbecome: True\nansible:\nmodule: file\nargs: path: /etc/hosts\nstate: absent\n</code></pre></p>"},{"location":"drivers/ansible/#detailled-usage","title":"Detailled usage","text":""},{"location":"drivers/ansible/#configuration-block","title":"Configuration block","text":"<p>The configuration block can be used to specify specific parameters to use. This block can be omit unless you really need to change default ansible parameters to run your experiment</p> <p>Configuration variables that can be used by this driver are:</p> <ul> <li>ansible_module_path: Path of your ansible library</li> <li>ansible_become_user: Privileged user used when you call privilege escalation (root by default)</li> <li>ansible_ssh_private_key: Your ssh private key used to connect to targets (~/.ssh/id_rsa by default)</li> <li>ansible_user: User on target host used by ansible (current username by default)</li> <li>become_ask_pass: Password to escalate privileged when sudo needs one</li> </ul> <p>In case you need to change one/or many default configuration(s), you can specify your value using the configuration block</p> <p>Please feel free to ask, if you need access to other ansible configuration parameters</p> <p>In JSON:</p> <pre><code>\"configuration\": {\n\"ansible_ssh_private_key\": \"/home/me/.ssh/mykey\"\n}\n</code></pre> <p>In YAML: <pre><code>configuration:\nansible_ssh_private_key: \"/home/me/.ssh/mykey\"\n</code></pre></p>"},{"location":"drivers/ansible/#arguments","title":"Arguments","text":"<p>chaosansible_run and chaosansible_probes use arguments (Most argument are classical ansible parameters):</p> Argument Type Required Default value Description host_list Array localhost List of host to use facts bool false Gather_facts become bool false Escalate privilege to run task run_once bool false Run the task only once on one target num_target str all \u201call\u201d or \u201cx\u201d where x is an integer. Run the task to only x target among the host_list. Ideal to create random event ansible dict {} Execute ansible task. Cf ansible dict format. If ansible is not set, no task except ansible gather_facts (if facts set to True) <p>Ansible dict format:</p> <p>Classic ansible task are in the form: <pre><code>name: task name\nansible-module-name:\nmodule-parameter1: value1\nmodule-parameter2: value2\n</code></pre></p> <p>This is translate into chaos experiment file like this: In JSON <pre><code>  \"ansible\": {\n\"module\": \"ansible-module-name\",\n\"args\": {\n\"module-parameter1\": \"value1\",\n\"module-parameter2\": \"value2\"\n}\n}\n</code></pre></p> <p>In YAML <pre><code>  ansible:\nmodule: ansible-module-name\nargs:\nmodule-parameter1: value1\nmodule-parameter2: value2\n</code></pre></p> <p>Example with the ansible mount module (Umount a filesystem): </p> <p>In JSON <pre><code>  \"ansible\": {\n\"module\": \"mount\",\n\"args\": {\n\"path\": \"/data\",\n\"state\": \"unmounted\"\n}\n}\n</code></pre></p> <p>In YAML <pre><code>  ansible:\nmodule: mount\nargs:\npath: /data\nstate: unmounted\n</code></pre></p>"},{"location":"drivers/ansible/#example-of-usage","title":"Example of usage","text":""},{"location":"drivers/ansible/#delete-etchosts-file-on-2-random-servers-out-of-5","title":"Delete /etc/hosts file on 2 random servers out of 5","text":"<p>In JSON <pre><code>\"method\": [\n{\n\"type\": \"action\",\n\"name\": \"delete-etc-hosts-file\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosansible.actions\",\n\"func\": \"chaosansible_run\",\n\"arguments\": {\n\"host_list\": [\"server1\",\"server2\",\"server3\",\"server4\",\"server5\"],\n\"num_target\": \"2\",\n\"become\": true,\n\"ansible\": {\n\"module\": \"file\",\n\"args\": {\n\"path\": \"/etc/hosts\",\n\"state\": \"absent\"\n}\n}\n}\n}\n}\n]\n</code></pre></p> <p>In YAML <pre><code>method:\n- type: action\nname: delete-etc-hosts-file\nprovider:\ntype: python\nmodule: chaosansible.actions\nfunc: chaosansible_run\narguments:\nhost_list: [\"server1\",\"server2\",\"server3\",\"server4\",\"server5\"]\nbecome: True\nnum_target: \"2\"\nansible:\nmodule: file\nargs: path: /etc/hosts\nstate: absent\n</code></pre></p>"},{"location":"drivers/ansible/#run-100-cpu-load-on-3-server-out-of-5","title":"Run 100% cpu load on 3 server out of 5","text":"<p>In JSON <pre><code>\"method\": [\n{\n\"type\": \"action\",\n\"name\": \"delete-etc-hosts-file\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosansible.actions\",\n\"func\": \"chaosansible_run\",\n\"arguments\": {\n\"host_list\": [\"server1\",\"server2\",\"server3\",\"server4\",\"server5\"],\n\"num_target\": \"3\",\n\"ansible\": {\n\"module\": \"shell\",\n\"args\": {\n\"cmd\": \"stress-ng --cpu 0 --cpu-method matrixprod -t 60s\",\n}\n}\n}\n}\n}\n]\n</code></pre></p> <p>In YAML <pre><code>method:\n- type: action\nname: delete-etc-hosts-file\nprovider:\ntype: python\nmodule: chaosansible.actions\nfunc: chaosansible_run\narguments:\nhost_list: [\"server1\",\"server2\",\"server3\",\"server4\",\"server5\"]\nbecome: True\nnum_target: \"3\"\nansible:\nmodule: shell\nargs: cmd: stress-ng --cpu 0 --cpu-method matrixprod -t 60s\n</code></pre></p>"},{"location":"drivers/ansible/#contribute","title":"Contribute","text":"<p>If you wish to contribute more functions to this package, you are more than welcome to do so. Please, fork this project, make your changes following the usual PEP 8 code style, sprinkling with tests and submit a PR for review.</p> <p>The Chaos Toolkit projects require all contributors must sign a Developer Certificate of Origin on each commit they would like to merge into the master branch of the repository. Please, make sure you can abide by the rules of the DCO before submitting a PR.</p>"},{"location":"drivers/ansible/#develop","title":"Develop","text":"<p>If you wish to develop on this project, make sure to install the development dependencies. But first, create a virtual environment and then install those dependencies.</p> <pre><code>pip install -r requirements-dev.txt -r requirements.txt\n</code></pre> <p>Then, point your environment to this directory:</p> <pre><code>pip install -e .\n</code></pre> <p>Now, you can edit the files and they will be automatically be seen by your environment, even when running from the <code>chaos</code> command locally.</p>"},{"location":"drivers/ansible/#test","title":"Test","text":"<p>To run the tests for the project execute the following:</p> <pre><code>pytest\n</code></pre>"},{"location":"drivers/ansible/#exported-activities","title":"Exported Activities","text":""},{"location":"drivers/ansible/#actions_1","title":"actions","text":""},{"location":"drivers/ansible/#chaosansible_run","title":"<code>chaosansible_run</code>","text":"Type action Module chaosansible.actions Name chaosansible_run Return None <p>Run a task through ansible and eventually gather facts from host</p> <p>Signature:</p> <pre><code>def chaosansible_run(host_list: list = 'localhost',\n                     configuration: Dict[str, Dict[str, str]] = None,\n                     facts: bool = False,\n                     become: bool = False,\n                     run_once: bool = False,\n                     ansible: dict = {},\n                     num_target: str = 'all',\n                     secrets: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required host_list list \u201clocalhost\u201d No facts boolean false No become boolean false No run_once boolean false No ansible mapping {} No num_target string \u201call\u201d No <p>Usage:</p> <pre><code>{\n\"name\": \"chaosansible-run\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosansible.actions\",\n\"func\": \"chaosansible_run\"\n}\n}\n</code></pre> <pre><code>name: chaosansible-run\nprovider:\nfunc: chaosansible_run\nmodule: chaosansible.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/ansible/#probes_1","title":"probes","text":""},{"location":"drivers/ansible/#chaosansible_probe","title":"<code>chaosansible_probe</code>","text":"Type probe Module chaosansible.probes Name chaosansible_probe Return None <p>Run a task through ansible and eventually gather facts from host</p> <p>Signature:</p> <pre><code>def chaosansible_probe(host_list: list = 'localhost',\n                       configuration: Dict[str, Dict[str, str]] = None,\n                       facts: bool = False,\n                       become: bool = False,\n                       run_once: bool = False,\n                       ansible: dict = {},\n                       num_target: str = 'all',\n                       secrets: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required host_list list \u201clocalhost\u201d No facts boolean false No become boolean false No run_once boolean false No ansible mapping {} No num_target string \u201call\u201d No <p>Usage:</p> <pre><code>{\n\"name\": \"chaosansible-probe\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosansible.probes\",\n\"func\": \"chaosansible_probe\"\n}\n}\n</code></pre> <pre><code>name: chaosansible-probe\nprovider:\nfunc: chaosansible_probe\nmodule: chaosansible.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/aws/","title":"Extension <code>chaosaws</code>","text":"Version 0.23.4 Repository https://github.com/chaostoolkit-incubator/chaostoolkit-aws <p>This project is a collection of actions and probes, gathered as an extension to the Chaos Toolkit.</p>"},{"location":"drivers/aws/#install","title":"Install","text":"<p>This package requires Python 3.6+</p> <p>To be used from your experiment, this package must be installed in the Python environment where chaostoolkit already lives.</p> <pre><code>$ pip install -U chaostoolkit-aws\n</code></pre>"},{"location":"drivers/aws/#usage","title":"Usage","text":"<p>To use the probes and actions from this package, add the following to your experiment file:</p> <pre><code>{\n\"name\": \"stop-an-ec2-instance\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.ec2.actions\",\n\"func\": \"stop_instance\",\n\"arguments\": {\n\"instance_id\": \"i-123456\"\n}\n}\n},\n{\n\"name\": \"create-a-new-policy\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.iam.actions\",\n\"func\": \"create_policy\",\n\"arguments\": {\n\"name\": \"mypolicy\",\n\"path\": \"user/Jane\",\n\"policy\": {\n\"Version\": \"2012-10-17\",\n\"Statement\": [\n{\n\"Effect\": \"Allow\",\n\"Action\": [\n\"s3:ListAllMyBuckets\",\n\"s3:GetBucketLocation\"\n],\n\"Resource\": \"arn:aws:s3:::*\"\n}\n]\n}\n}\n}\n}\n</code></pre> <p>Or select one at random from an AZ:</p> <pre><code>{\n\"name\": \"stop-an-ec2-instance-in-az-at-random\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.ec2.actions\",\n\"func\": \"stop_instance\",\n\"arguments\": {\n\"az\": \"us-west-1\"\n}\n}\n}\n</code></pre> <p>That\u2019s it!</p> <p>Please explore the code to see existing probes and actions.</p>"},{"location":"drivers/aws/#configuration","title":"Configuration","text":""},{"location":"drivers/aws/#credentials","title":"Credentials","text":"<p>This extension uses the boto3 library under the hood. This library expects that you have properly configured your environment to connect and authenticate with the AWS services.</p>"},{"location":"drivers/aws/#use-default-profile-from-awscredentials-or-awsconfig","title":"Use default profile from <code>~/.aws/credentials</code> or <code>~/.aws/config</code>","text":"<p>This is the most basic case, assuming your <code>default</code> profile is properly configured in <code>~/.aws/credentials</code> (or <code>~/.aws/config</code>), then you do not need to pass any specific credentials to the experiment.</p>"},{"location":"drivers/aws/#use-a-non-default-profile-from-awscredentials-or-awsconfig","title":"Use a non-default profile from <code>~/.aws/credentials</code> or <code>~/.aws/config</code>","text":"<p>Assuming you have configure a profile in your <code>~/.aws/credentials</code> (or <code>~/.aws/config</code>) file, you may declare it in your experiment as follows:</p> <pre><code>{\n\"configuration\": {\n\"aws_profile_name\": \"dev\"\n}\n}\n</code></pre> <p>Your <code>~/.aws/credentials</code> should look like this:</p> <pre><code>[dev]\naws_access_key_id = XYZ\naws_secret_access_key = UIOPIY\n</code></pre> <p>Or, your <code>~/.aws/config</code> should look like this:</p> <pre><code>[profile dev]\noutput = json\naws_access_key_id = XYZ\naws_secret_access_key = UIOPIY\n</code></pre>"},{"location":"drivers/aws/#assume-an-arn-role-from-a-non-default-profile","title":"Assume an ARN role from a non-default profile","text":"<p>Assuming you have configure a profile in your <code>~/.aws/config</code> file with a specific ARN role you want to assume during the run:</p> <pre><code>{\n\"configuration\": {\n\"aws_profile_name\": \"dev\"\n}\n}\n</code></pre> <p>Your <code>~/.aws/config</code> should look like this:</p> <pre><code>[default]\noutput = json\n\n[profile dev]\nrole_arn = arn:aws:iam::XXXXXXX:role/role-name\nsource_profile = default\n</code></pre>"},{"location":"drivers/aws/#assume-an-arn-role-from-within-the-experiment","title":"Assume an ARN role from within the experiment","text":"<p>You mays also assume a role by declaring the role ARN in the experiment directly. In that case, the profile has no impact if you also set it.</p> <pre><code>    \"configuration\": {\n\"aws_assume_role_arn\": \"arn:aws:iam::XXXXXXX:role/role-name\",\n\"aws_assume_role_session_name\": \"my-chaos\"\n}\n</code></pre> <p>The <code>aws_assume_role_session_name</code> key is optional and will be set to <code>\"ChaosToolkit\"</code> when not provided.</p> <p>When this approach is used, the extension performs a assume role call against the AWS STS service to fetch credentials dynamically.</p>"},{"location":"drivers/aws/#pass-credentials-explicitely","title":"Pass credentials explicitely","text":"<p>You can pass the credentials as a secret to the experiment definition as follows:</p> <p><pre><code>{\n\"secrets\": {\n\"aws\": {\n\"aws_access_key_id\": \"your key\",\n\"aws_secret_access_key\": \"access key\",\n\"aws_session_token\": \"token\",\n}\n}\n}\n</code></pre> Note that the token is optional.</p> <p>Then, use it as follows:</p> <pre><code>{\n\"name\": \"stop-an-ec2-instance\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.ec2.actions\",\n\"func\": \"stop_instance\",\n\"secrets\": [\"aws\"],\n\"arguments\": {\n\"instance_id\": \"i-123456\"\n}\n}\n}\n</code></pre>"},{"location":"drivers/aws/#setting-the-region","title":"Setting the region","text":"<p>In additon to the authentication credentials, you must configure the region against which you want to use.</p> <p>You can either declare it at the top level of the experiment, add:</p> <pre><code>{\n\"configuration\": {\n\"aws_region\": \"us-east-1\"\n}\n}\n</code></pre> <p>or</p> <pre><code>{\n\"configuration\": {\n\"aws_region\": {\n\"type\": \"env\",\n\"key\": \"AWS_REGION\"\n}\n}\n}\n</code></pre> <p>But you can also simply set either <code>AWS_REGION</code> or <code>AWS_DEFAULT_REGION</code> in your terminal session without declaring anything in the experiment.</p> <p>If none of these are set, your experiment will likely fail.</p>"},{"location":"drivers/aws/#contribute","title":"Contribute","text":"<p>If you wish to contribute more functions to this package, you are more than welcome to do so. Please, fork this project, write unit tests to cover the proposed changes, implement the changes, ensure they meet the formatting standards set out by <code>black</code>, <code>flake8</code>, and <code>isort</code>, and then raise a PR to the repository for review.</p> <p>Please refer to the formatting section for more information on the formatting standards.</p> <p>The Chaos Toolkit projects require all contributors must sign a Developer Certificate of Origin on each commit they would like to merge into the master branch of the repository. Please, make sure you can abide by the rules of the DCO before submitting a PR.</p>"},{"location":"drivers/aws/#develop","title":"Develop","text":"<p>If you wish to develop on this project, make sure to install the development dependencies. But first, create a virtual environment and then install those dependencies.</p> <pre><code>$ make install-dev\n</code></pre> <p>Now, you can edit the files and they will be automatically be seen by your environment, even when running from the <code>chaos</code> command locally.</p>"},{"location":"drivers/aws/#tests","title":"Tests","text":"<p>To run the tests for the project execute the following:</p> <pre><code>$ make tests\n</code></pre>"},{"location":"drivers/aws/#formatting-and-linting","title":"Formatting and Linting","text":"<p>We use a combination of <code>black</code>, <code>flake8</code>, and <code>isort</code> to both lint and format this repositories code.</p> <p>Before raising a Pull Request, we recommend you run formatting against your code with:</p> <pre><code>$ make format\n</code></pre> <p>This will automatically format any code that doesn\u2019t adhere to the formatting standards.</p> <p>As some things are not picked up by the formatting, we also recommend you run:</p> <pre><code>$ make lint\n</code></pre> <p>To ensure that any unused import statements/strings that are too long, etc. are also picked up.</p>"},{"location":"drivers/aws/#add-new-aws-api-support","title":"Add new AWS API Support","text":"<p>Once you have setup your environment, you can start adding new AWS API support by adding new actions, probes and entire sub-packages for those.</p>"},{"location":"drivers/aws/#services-supported-by-boto","title":"Services supported by boto","text":"<p>This package relies on boto3 to wrap the API calls into a fluent Python API. Some newer AWS services are not yet available in boto3, in that case, you should read the next section.</p> <p>Let\u2019s say you want to support a new action in the EC2 sub-package.</p> <p>Start by creating a new function in <code>ec2/actions.py</code>:</p> <pre><code>from chaoslib.types import Configuration, Secrets\n\nfrom chaosaws import aws_client\nfrom chaosaws.types import AWSResponse\n\ndef reboot_instance(instance_id: str, dry_run: bool=False,\n                    configuration: Configuration=None,\n                    secrets: Secrets=None) -&gt; AWSResponse:\n\"\"\"\n    Reboot a given EC2 instance.\n    \"\"\"\n    client = aws_client('ec2', configuration, secrets)\n    return client.reboot_instances(InstanceIds=[instance_id], DryRun=dry_run)\n</code></pre> <p>As you can see, the actual code is straightforward. You first create a EC2 client and simply call the appropriate method on that client with the expected arguments. We return the action as-is so that it can be logged by the chaostoolkit, or even be used as part of a steady-state hypothesis probe (if this was a probe, not action that is).</p> <p>You could decide to make more than one AWS API call but, it is better to keep it simple so that composition is easier from the experiment. Nonetheless, you may also compose those directly into a single action as well for specific use-cases.</p> <p>Please refer to the Chaos Toolkit documentation to learn more about the configuration and secrets objects.</p> <p>Once you have implemented that action, you must create at least one unit test for it in the <code>tests/ec2/test_ec2_actions.py</code> test module. For example:</p> <pre><code>from chaosaws.ec2.actions import reboot_instancex\n\n@patch('chaosaws.ec2.actions.aws_client', autospec=True)\ndef test_reboot_instance(aws_client):\n    client = MagicMock()\n    aws_client.return_value = client\n    inst_id = \"i-1234567890abcdef0\"\n    response = reboot_instance(inst_id)\n    client.reboot_instances.assert_called_with(\n        InstanceIds=[inst_id], DryRun=False)\n</code></pre> <p>By using the built-in Python module to mock objects, we can mock the EC2 client and assert that we do indeed call the appropriate method with the right arguments. You are encouraged to write more than a single test for various conditions.</p> <p>Finally, should you choose to add support for a new AWS API resource altogether, you should create the according sub-package.</p>"},{"location":"drivers/aws/#services-not-supported-by-boto-new-aws-features","title":"Services not supported by boto (new AWS features)","text":"<p>If the support you want to provide is for a new AWS service that boto does not support yet, this requires direct call to the API endpoint via the requests package. Say we have a new service, not yet supported by boto3</p> <pre><code>from chaoslib.types import Configuration, Secrets\n\nfrom chaosaws import signed_api_call\nfrom chaosaws.types import AWSResponse\n\ndef terminate_worker_node(worker_node_id: str,\n                          configuration: Configuration=None,\n                          secrets: Secrets=None) -&gt; AWSResponse:\n\"\"\"\n    Terminate a worker node.\n    \"\"\"\n    params = {\n        \"DryRun\": True,\n        \"WorkerNodeId.1\": worker_node_id\n    }\n    response = signed_api_call(\n        'some-new-service-name', path='/2018-01-01/worker/terminate',\n        method='POST', params=params,\n        configuration=configuration, secrets=secrets)\n    return response.json()\n</code></pre> <p>Here is an example on existing API call (as a more concrete snippet):</p> <pre><code>from chaoslib.types import Configuration, Secrets\n\nfrom chaosaws import signed_api_call\n\ndef stop_instance(instance_id: str, configuration: Configuration=None,\n                  secrets: Secrets=None) -&gt; str:\n    response = signed_api_call(\n        'ec2',\n        configuration=configuration,\n        secrets=secrets,\n        params={\n            \"Action\": \"StopInstances\",\n            \"InstanceId.1\": instance_id,\n            \"Version\": \"2013-06-15\"\n        }\n    )\n\n    # this API returns XML, not JSON\n    return response.text\n</code></pre> <p>When using the <code>signed_api_call</code>, you are responsible for the right way of passing the parameters. Basically, look at the AWS documentation for each API call.</p> <p>WARNING: It should be noted that, whenever boto3 implements an API, this package should be updated accordingly, as boto3 is much more versatile and solid.</p>"},{"location":"drivers/aws/#make-your-new-sub-package-discoverable","title":"Make your new sub-package discoverable","text":"<p>Finally, if you have created a new sub-package entirely, you need to make its capability discoverable by the chaos toolkit. Simply amend the <code>discover</code> function in the <code>chaosaws/__init__.py</code>. For example, assuming a new <code>eks</code> sub-package, with actions and probes:</p> <pre><code>    activities.extend(discover_actions(\"chaosaws.eks.actions\"))\n    activities.extend(discover_probes(\"chaosaws.eks.probes\"))\n</code></pre>"},{"location":"drivers/aws/#exported-controls","title":"Exported Controls","text":""},{"location":"drivers/aws/#upload","title":"upload","text":"<p>This module exports controls covering the following phases of the execution of an experiment:</p> Level Before After Experiment Loading False False Experiment False True Steady-state Hypothesis False False Method False False Rollback False False Activities False False <p>In addition, the controls may define the followings:</p> Level Enabled Validate Control False Configure Control False Cleanup Control False <p>To use this control module, please add the following section to your experiment:</p> JSONYAML <pre><code>{\n\"controls\": [\n{\n\"name\": \"chaosaws\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.s3.controls.upload\"\n}\n}\n]\n}\n</code></pre> <pre><code>controls:\n- name: chaosaws\nprovider:\nmodule: chaosaws.s3.controls.upload\ntype: python\n</code></pre> <p>This block may also be enabled at any other level (steady-state hypothesis or activity) to focus only on that level.</p> <p>When enabled at the experiment level, by default, all sub-levels are also applied unless you set the <code>automatic</code> properties to <code>false</code>.</p>"},{"location":"drivers/aws/#exported-activities","title":"Exported Activities","text":""},{"location":"drivers/aws/#asg","title":"asg","text":""},{"location":"drivers/aws/#attach_volume","title":"<code>attach_volume</code>","text":"Type action Module chaosaws.asg.actions Name attach_volume Return list <p>Attaches ebs volumes that have been previously detached by CTK</p> <p>:     One of:    asg_names: list: one or more asg names    tags: list: key/value pairs to identify asgs by</p> <p><code>tags</code> are expected as a list of dictionary objects:     [    {\u2018Key\u2019: \u2018TagKey1\u2019, \u2018Value\u2019: \u2018TagValue1\u2019},    {\u2018Key\u2019: \u2018TagKey2\u2019, \u2018Value\u2019: \u2018TagValue2\u2019},    \u2026     ]</p> <p>Signature:</p> <pre><code>def attach_volume(\n        asg_names: List[str] = None,\n        tags: List[Dict[str, str]] = None,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; List[Dict[str, Any]]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required asg_names list null No tags list null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"attach-volume\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.asg.actions\",\n\"func\": \"attach_volume\"\n}\n}\n</code></pre> <pre><code>name: attach-volume\nprovider:\nfunc: attach_volume\nmodule: chaosaws.asg.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/aws/#change_subnets","title":"<code>change_subnets</code>","text":"Type action Module chaosaws.asg.actions Name change_subnets Return None <p>Adds/removes subnets on autoscaling groups</p> <p>:     One of:    asg_names: a list of one or more asg names    tags: a list of key/value pair to identify asg(s) by</p> <pre><code>subnets: a list of subnet IDs to associate to the ASG\n</code></pre> <p><code>tags</code> are expected as a list of dictionary objects: [     {\u2018Key\u2019: \u2018TagKey1\u2019, \u2018Value\u2019: \u2018TagValue1\u2019},     {\u2018Key\u2019: \u2018TagKey2\u2019, \u2018Value\u2019: \u2018TagValue2\u2019},     \u2026 ]</p> <p>Signature:</p> <pre><code>def change_subnets(subnets: List[str],\n                   asg_names: List[str] = None,\n                   tags: List[dict] = None,\n                   configuration: Dict[str, Dict[str, str]] = None,\n                   secrets: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required subnets list Yes asg_names list null No tags list null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"change-subnets\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.asg.actions\",\n\"func\": \"change_subnets\",\n\"arguments\": {\n\"subnets\": []\n}\n}\n}\n</code></pre> <pre><code>name: change-subnets\nprovider:\narguments:\nsubnets: []\nfunc: change_subnets\nmodule: chaosaws.asg.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/aws/#describe_auto_scaling_groups","title":"<code>describe_auto_scaling_groups</code>","text":"Type probe Module chaosaws.asg.probes Name describe_auto_scaling_groups Return mapping <p>Returns AWS descriptions for provided ASG(s)</p> <p>Params:     OneOf:    - asg_names: a list of asg names to describe    - tags: a list of key/value pairs to collect ASG(s)</p> <p><code>tags</code> are expected as a list of dictionary objects: [     {\u2018Key\u2019: \u2018TagKey1\u2019, \u2018Value\u2019: \u2018TagValue1\u2019},     {\u2018Key\u2019: \u2018TagKey2\u2019, \u2018Value\u2019: \u2018TagValue2\u2019},     \u2026 ]</p> <p>Signature:</p> <pre><code>def describe_auto_scaling_groups(\n        asg_names: List[str] = None,\n        tags: List[Dict[str, Any]] = None,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required asg_names list null No tags list null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"describe-auto-scaling-groups\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.asg.probes\",\n\"func\": \"describe_auto_scaling_groups\"\n}\n}\n</code></pre> <pre><code>name: describe-auto-scaling-groups\nprovider:\nfunc: describe_auto_scaling_groups\nmodule: chaosaws.asg.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/aws/#desired_equals_healthy","title":"<code>desired_equals_healthy</code>","text":"Type probe Module chaosaws.asg.probes Name desired_equals_healthy Return boolean <p>If desired number matches the number of healthy instances for each of the auto-scaling groups</p> <p>Returns: bool</p> <p>Signature:</p> <pre><code>def desired_equals_healthy(asg_names: List[str],\n                           configuration: Dict[str, Dict[str, str]] = None,\n                           secrets: Dict[str, Dict[str, str]] = None) -&gt; bool:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required asg_names list Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"desired-equals-healthy\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.asg.probes\",\n\"func\": \"desired_equals_healthy\",\n\"arguments\": {\n\"asg_names\": []\n}\n}\n}\n</code></pre> <pre><code>name: desired-equals-healthy\nprovider:\narguments:\nasg_names: []\nfunc: desired_equals_healthy\nmodule: chaosaws.asg.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/aws/#desired_equals_healthy_tags","title":"<code>desired_equals_healthy_tags</code>","text":"Type probe Module chaosaws.asg.probes Name desired_equals_healthy_tags Return boolean <p>If desired number matches the number of healthy instances</p> <p>for each of the auto-scaling groups matching tags provided</p> <p><code>tags</code> are  expected as: [{     \u2018Key\u2019: \u2018KeyName\u2019,     \u2018Value\u2019: \u2018KeyValue\u2019 }, \u2026 ]</p> <p>Returns: bool</p> <p>Signature:</p> <pre><code>def desired_equals_healthy_tags(\n        tags: List[Dict[str, str]],\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; bool:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required tags list Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"desired-equals-healthy-tags\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.asg.probes\",\n\"func\": \"desired_equals_healthy_tags\",\n\"arguments\": {\n\"tags\": []\n}\n}\n}\n</code></pre> <pre><code>name: desired-equals-healthy-tags\nprovider:\narguments:\ntags: []\nfunc: desired_equals_healthy_tags\nmodule: chaosaws.asg.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/aws/#detach_random_instances","title":"<code>detach_random_instances</code>","text":"Type action Module chaosaws.asg.actions Name detach_random_instances Return mapping <p>Detaches one or more random instances from an autoscaling group</p> <p>:     One of:    asg_names: a list of one or more asg names    tags: a list of key/value pair to identify asg(s) by</p> <pre><code>One of:\n</code></pre> <p>instance_count: integer value of number of instances to detach    instance_percent: 1-100, percent of instances to detach</p> <pre><code>decrement_capacity: boolean value to determine if the desired capacity\nof the autoscaling group should be decreased\n</code></pre> <p><code>tags</code> are expected as a list of dictionary objects: [     {\u2018Key\u2019: \u2018TagKey1\u2019, \u2018Value\u2019: \u2018TagValue1\u2019},     {\u2018Key\u2019: \u2018TagKey2\u2019, \u2018Value\u2019: \u2018TagValue2\u2019},     \u2026 ]</p> <p>Signature:</p> <pre><code>def detach_random_instances(\n        asg_names: List[str] = None,\n        tags: List[dict] = None,\n        instance_count: int = None,\n        instance_percent: int = None,\n        decrement_capacity: bool = False,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required asg_names list null No tags list null No instance_count integer null No instance_percent integer null No decrement_capacity boolean false No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"detach-random-instances\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.asg.actions\",\n\"func\": \"detach_random_instances\"\n}\n}\n</code></pre> <pre><code>name: detach-random-instances\nprovider:\nfunc: detach_random_instances\nmodule: chaosaws.asg.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/aws/#detach_random_volume","title":"<code>detach_random_volume</code>","text":"Type action Module chaosaws.asg.actions Name detach_random_volume Return list <p>Detaches a random (non root) ebs volume from ec2 instances associated to an ASG</p> <p>:     One of:    asg_names: a list of one or more asg names    tags: a list of key/value pair to identify asg(s) by</p> <pre><code>force: force detach volume (default: true)\n</code></pre> <p><code>tags</code> are expected as a list of dictionary objects: [     {\u2018Key\u2019: \u2018TagKey1\u2019, \u2018Value\u2019: \u2018TagValue1\u2019},     {\u2018Key\u2019: \u2018TagKey2\u2019, \u2018Value\u2019: \u2018TagValue2\u2019},     \u2026 ]</p> <p>Signature:</p> <pre><code>def detach_random_volume(\n        asg_names: List[str] = None,\n        tags: List[Dict[str, str]] = None,\n        force: bool = True,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; List[Dict[str, Any]]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required asg_names list null No tags list null No force boolean true No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"detach-random-volume\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.asg.actions\",\n\"func\": \"detach_random_volume\"\n}\n}\n</code></pre> <pre><code>name: detach-random-volume\nprovider:\nfunc: detach_random_volume\nmodule: chaosaws.asg.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/aws/#has_subnets","title":"<code>has_subnets</code>","text":"Type probe Module chaosaws.asg.probes Name has_subnets Return boolean <p>Determines if the provided autoscaling groups are in the provided subnets</p> <p>:returns boolean</p> <p>Signature:</p> <pre><code>def has_subnets(subnets: List[str],\n                asg_names: List[str] = None,\n                tags: List[Dict[str, str]] = None,\n                configuration: Dict[str, Dict[str, str]] = None,\n                secrets: Dict[str, Dict[str, str]] = None) -&gt; bool:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required subnets list Yes asg_names list null No tags list null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"has-subnets\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.asg.probes\",\n\"func\": \"has_subnets\",\n\"arguments\": {\n\"subnets\": []\n}\n}\n}\n</code></pre> <pre><code>name: has-subnets\nprovider:\narguments:\nsubnets: []\nfunc: has_subnets\nmodule: chaosaws.asg.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/aws/#instance_count_by_health","title":"<code>instance_count_by_health</code>","text":"Type probe Module chaosaws.asg.probes Name instance_count_by_health Return integer <p>Reports the number of instances currently in the ASG by their health status</p> <p>Params:     OneOf:    - asg_names: a list of asg names to describe    - tags: a list of key/value pairs to collect ASG(s)</p> <pre><code>- count_healthy: boolean: true for healthy instance count,\n</code></pre> <p>false for unhealthy instance count</p> <p><code>tags</code> are expected as a list of dictionary objects: [     {\u2018Key\u2019: \u2018TagKey1\u2019, \u2018Value\u2019: \u2018TagValue1\u2019},     {\u2018Key\u2019: \u2018TagKey2\u2019, \u2018Value\u2019: \u2018TagValue2\u2019},     \u2026 ]</p> <p>Signature:</p> <pre><code>def instance_count_by_health(asg_names: List[str] = None,\n                             tags: List[Dict[str, str]] = None,\n                             count_healthy: bool = True,\n                             configuration: Dict[str, Dict[str, str]] = None,\n                             secrets: Dict[str, Dict[str, str]] = None) -&gt; int:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required asg_names list null No tags list null No count_healthy boolean true No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"instance-count-by-health\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.asg.probes\",\n\"func\": \"instance_count_by_health\"\n}\n}\n</code></pre> <pre><code>name: instance-count-by-health\nprovider:\nfunc: instance_count_by_health\nmodule: chaosaws.asg.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/aws/#is_scaling_in_progress","title":"<code>is_scaling_in_progress</code>","text":"Type probe Module chaosaws.asg.probes Name is_scaling_in_progress Return boolean <p>Check if there is any scaling activity in progress for ASG matching tags</p> <p>Returns: Boolean</p> <p>Signature:</p> <pre><code>def is_scaling_in_progress(tags: List[Dict[str, str]],\n                           configuration: Dict[str, Dict[str, str]] = None,\n                           secrets: Dict[str, Dict[str, str]] = None) -&gt; bool:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required tags list Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"is-scaling-in-progress\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.asg.probes\",\n\"func\": \"is_scaling_in_progress\",\n\"arguments\": {\n\"tags\": []\n}\n}\n}\n</code></pre> <pre><code>name: is-scaling-in-progress\nprovider:\narguments:\ntags: []\nfunc: is_scaling_in_progress\nmodule: chaosaws.asg.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/aws/#process_is_suspended","title":"<code>process_is_suspended</code>","text":"Type probe Module chaosaws.asg.probes Name process_is_suspended Return boolean <p>Determines if one or more processes on an ASG are suspended.</p> <p>:returns Boolean</p> <p>Signature:</p> <pre><code>def process_is_suspended(asg_names: List[str] = None,\n                         tags: List[Dict[str, str]] = None,\n                         process_names: List[str] = None,\n                         configuration: Dict[str, Dict[str, str]] = None,\n                         secrets: Dict[str, Dict[str, str]] = None) -&gt; bool:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required asg_names list null No tags list null No process_names list null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"process-is-suspended\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.asg.probes\",\n\"func\": \"process_is_suspended\"\n}\n}\n</code></pre> <pre><code>name: process-is-suspended\nprovider:\nfunc: process_is_suspended\nmodule: chaosaws.asg.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/aws/#resume_processes","title":"<code>resume_processes</code>","text":"Type action Module chaosaws.asg.actions Name resume_processes Return mapping <p>Resumes 1 or more suspended processes on a list of auto scaling groups.</p> <p>If no process is specified, all suspended auto scaling processes will be resumed.</p> <p>For a list of valid processes that can be suspended, reference: https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html</p> <p>:     One of:    - asg_names: a list of one or more asg names to target    - tags: a list of key/value pairs to identify the asgs by</p> <p><code>tags</code> are expected as a list of dictionary objects: [     {\u2018Key\u2019: \u2018TagKey1\u2019, \u2018Value\u2019: \u2018TagValue1\u2019},     {\u2018Key\u2019: \u2018TagKey2\u2019, \u2018Value\u2019: \u2018TagValue2\u2019},     \u2026 ]</p> <p>Signature:</p> <pre><code>def resume_processes(\n        asg_names: List[str] = None,\n        tags: List[Dict[str, str]] = None,\n        process_names: List[str] = None,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required asg_names list null No tags list null No process_names list null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"resume-processes\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.asg.actions\",\n\"func\": \"resume_processes\"\n}\n}\n</code></pre> <pre><code>name: resume-processes\nprovider:\nfunc: resume_processes\nmodule: chaosaws.asg.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/aws/#stop_random_instances","title":"<code>stop_random_instances</code>","text":"Type action Module chaosaws.asg.actions Name stop_random_instances Return list <p>Terminates one or more random healthy instances associated to an ALB</p> <p>A healthy instance is considered one with a status of \u2018InService\u2019</p> <p>:     - force: force stop the instances (default: False)</p> <pre><code>One Of:\n</code></pre> <ul> <li>asg_names: a list of one or more asg names to target</li> <li> <p>tags: a list of key/value pairs to identify the asgs by</p> <p>One Of:    - instance_count: the number of instances to terminate    - instance_percent: the percentage of instances to terminate    - az: the availability zone to terminate instances</p> </li> </ul> <p><code>tags</code> are expected as a list of dictionary objects: [     {\u2018Key\u2019: \u2018TagKey1\u2019, \u2018Value\u2019: \u2018TagValue1\u2019},     {\u2018Key\u2019: \u2018TagKey2\u2019, \u2018Value\u2019: \u2018TagValue2\u2019},     \u2026 ]</p> <p>Signature:</p> <pre><code>def stop_random_instances(\n        asg_names: List[str] = None,\n        tags: List[Dict[str, str]] = None,\n        instance_count: int = None,\n        instance_percent: int = None,\n        az: str = None,\n        force: bool = False,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; List[Dict[str, Any]]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required asg_names list null No tags list null No instance_count integer null No instance_percent integer null No az string null No force boolean false No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"stop-random-instances\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.asg.actions\",\n\"func\": \"stop_random_instances\"\n}\n}\n</code></pre> <pre><code>name: stop-random-instances\nprovider:\nfunc: stop_random_instances\nmodule: chaosaws.asg.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/aws/#suspend_processes","title":"<code>suspend_processes</code>","text":"Type action Module chaosaws.asg.actions Name suspend_processes Return mapping <p>Suspends 1 or more processes on a list of auto scaling groups.</p> <p>If no process is specified, all running auto scaling processes will be suspended.</p> <p>For a list of valid processes that can be suspended, reference: https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html</p> <p>:     One of:    - asg_names: a list of one or more asg names to target    - tags: a list of key/value pairs to identify the asgs by</p> <p><code>tags</code> are expected as a list of dictionary objects: [     {\u2018Key\u2019: \u2018TagKey1\u2019, \u2018Value\u2019: \u2018TagValue1\u2019},     {\u2018Key\u2019: \u2018TagKey2\u2019, \u2018Value\u2019: \u2018TagValue2\u2019},     \u2026 ]</p> <p>Signature:</p> <pre><code>def suspend_processes(\n        asg_names: List[str] = None,\n        tags: List[Dict[str, str]] = None,\n        process_names: List[str] = None,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required asg_names list null No tags list null No process_names list null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"suspend-processes\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.asg.actions\",\n\"func\": \"suspend_processes\"\n}\n}\n</code></pre> <pre><code>name: suspend-processes\nprovider:\nfunc: suspend_processes\nmodule: chaosaws.asg.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/aws/#terminate_random_instances","title":"<code>terminate_random_instances</code>","text":"Type action Module chaosaws.asg.actions Name terminate_random_instances Return list <p>Terminates one or more random healthy instances associated to an ALB</p> <p>A healthy instance is considered one with a status of \u2018InService\u2019</p> <p>:    One Of:   - asg_names: a list of one or more asg names to target   - tags: a list of key/value pairs to identify the asgs by</p> <p>One Of:   - instance_count: the number of instances to terminate   - instance_percent: the percentage of instances to terminate   - az: the availability zone to terminate instances</p> <p><code>tags</code> are expected as a list of dictionary objects: [     {\u2018Key\u2019: \u2018TagKey1\u2019, \u2018Value\u2019: \u2018TagValue1\u2019},     {\u2018Key\u2019: \u2018TagKey2\u2019, \u2018Value\u2019: \u2018TagValue2\u2019},     \u2026 ]</p> <p>Signature:</p> <pre><code>def terminate_random_instances(\n        asg_names: List[str] = None,\n        tags: List[Dict[str, str]] = None,\n        instance_count: int = None,\n        instance_percent: int = None,\n        az: str = None,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; List[Dict[str, Any]]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required asg_names list null No tags list null No instance_count integer null No instance_percent integer null No az string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"terminate-random-instances\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.asg.actions\",\n\"func\": \"terminate_random_instances\"\n}\n}\n</code></pre> <pre><code>name: terminate-random-instances\nprovider:\nfunc: terminate_random_instances\nmodule: chaosaws.asg.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/aws/#wait_desired_equals_healthy","title":"<code>wait_desired_equals_healthy</code>","text":"Type probe Module chaosaws.asg.probes Name wait_desired_equals_healthy Return integer <p>Wait until desired number matches the number of healthy instances for each of the auto-scaling groups</p> <p>Returns: Integer (number of seconds it took to wait) or sys.maxsize in case of timeout</p> <p>Signature:</p> <pre><code>def wait_desired_equals_healthy(\n        asg_names: List[str],\n        configuration: Dict[str, Dict[str, str]] = None,\n        timeout: Union[int, float] = 300,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; int:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required asg_names list Yes timeout object 300 No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"wait-desired-equals-healthy\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.asg.probes\",\n\"func\": \"wait_desired_equals_healthy\",\n\"arguments\": {\n\"asg_names\": []\n}\n}\n}\n</code></pre> <pre><code>name: wait-desired-equals-healthy\nprovider:\narguments:\nasg_names: []\nfunc: wait_desired_equals_healthy\nmodule: chaosaws.asg.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/aws/#wait_desired_equals_healthy_tags","title":"<code>wait_desired_equals_healthy_tags</code>","text":"Type probe Module chaosaws.asg.probes Name wait_desired_equals_healthy_tags Return integer <p>Wait until desired number matches the number of healthy instances for each of the auto-scaling groups matching tags provided</p> <p><code>tags</code> are  expected as: [{     \u2018Key\u2019: \u2018KeyName\u2019,     \u2018Value\u2019: \u2018KeyValue\u2019 }, \u2026 ]</p> <p>Returns: Integer (number of seconds it took to wait) or sys.maxsize in case of timeout</p> <p>Signature:</p> <pre><code>def wait_desired_equals_healthy_tags(\n        tags: List[Dict[str, str]],\n        timeout: Union[int, float] = 300,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; int:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required tags list Yes timeout object 300 No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"wait-desired-equals-healthy-tags\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.asg.probes\",\n\"func\": \"wait_desired_equals_healthy_tags\",\n\"arguments\": {\n\"tags\": []\n}\n}\n}\n</code></pre> <pre><code>name: wait-desired-equals-healthy-tags\nprovider:\narguments:\ntags: []\nfunc: wait_desired_equals_healthy_tags\nmodule: chaosaws.asg.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/aws/#wait_desired_not_equals_healthy_tags","title":"<code>wait_desired_not_equals_healthy_tags</code>","text":"Type probe Module chaosaws.asg.probes Name wait_desired_not_equals_healthy_tags Return integer <p>Wait until desired number doesn\u2019t match the number of healthy instances for each of the auto-scaling groups matching tags provided</p> <p><code>tags</code> are  expected as: [{     \u2018Key\u2019: \u2018KeyName\u2019,     \u2018Value\u2019: \u2018KeyValue\u2019 }, \u2026 ]</p> <p>Returns: Integer (number of seconds it took to wait) or sys.maxsize in case of timeout</p> <p>Signature:</p> <pre><code>def wait_desired_not_equals_healthy_tags(\n        tags: List[Dict[str, str]],\n        timeout: Union[int, float] = 300,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; int:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required tags list Yes timeout object 300 No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"wait-desired-not-equals-healthy-tags\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.asg.probes\",\n\"func\": \"wait_desired_not_equals_healthy_tags\",\n\"arguments\": {\n\"tags\": []\n}\n}\n}\n</code></pre> <pre><code>name: wait-desired-not-equals-healthy-tags\nprovider:\narguments:\ntags: []\nfunc: wait_desired_not_equals_healthy_tags\nmodule: chaosaws.asg.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/aws/#awslambda","title":"awslambda","text":""},{"location":"drivers/aws/#delete_event_source_mapping","title":"<code>delete_event_source_mapping</code>","text":"Type action Module chaosaws.awslambda.actions Name delete_event_source_mapping Return mapping <p>Delete an event source mapping</p> <p>:param event_uuid: The identifier of the event source mapping :param configuration: AWS configuration data :param secrets: AWS secrets :return: AWSResponse</p> <p>Signature:</p> <pre><code>def delete_event_source_mapping(\n        event_uuid: str,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required event_uuid string Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"delete-event-source-mapping\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.awslambda.actions\",\n\"func\": \"delete_event_source_mapping\",\n\"arguments\": {\n\"event_uuid\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: delete-event-source-mapping\nprovider:\narguments:\nevent_uuid: ''\nfunc: delete_event_source_mapping\nmodule: chaosaws.awslambda.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/aws/#delete_function_concurrency","title":"<code>delete_function_concurrency</code>","text":"Type action Module chaosaws.awslambda.actions Name delete_function_concurrency Return mapping <p>Removes concurrency limit applied to the specified Lambda</p> <p>Signature:</p> <pre><code>def delete_function_concurrency(\n        function_name: str,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required function_name string Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"delete-function-concurrency\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.awslambda.actions\",\n\"func\": \"delete_function_concurrency\",\n\"arguments\": {\n\"function_name\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: delete-function-concurrency\nprovider:\narguments:\nfunction_name: ''\nfunc: delete_function_concurrency\nmodule: chaosaws.awslambda.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/aws/#get_function_concurrency","title":"<code>get_function_concurrency</code>","text":"Type probe Module chaosaws.awslambda.probes Name get_function_concurrency Return boolean <p>Get configuration information of lambda by its function name</p> <p>Signature:</p> <pre><code>def get_function_concurrency(\n        function_name: str,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; bool:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required function_name string Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"get-function-concurrency\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.awslambda.probes\",\n\"func\": \"get_function_concurrency\",\n\"arguments\": {\n\"function_name\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: get-function-concurrency\nprovider:\narguments:\nfunction_name: ''\nfunc: get_function_concurrency\nmodule: chaosaws.awslambda.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/aws/#get_function_memory_size","title":"<code>get_function_memory_size</code>","text":"Type probe Module chaosaws.awslambda.probes Name get_function_memory_size Return integer <p>Get the configured memory size of a lambda function.</p> <p>The returned memory size is specified in megabytes.</p> <p>Signature:</p> <pre><code>def get_function_memory_size(function_name: str,\n                             qualifier: str = None,\n                             configuration: Dict[str, Dict[str, str]] = None,\n                             secrets: Dict[str, Dict[str, str]] = None) -&gt; int:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required function_name string Yes qualifier string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"get-function-memory-size\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.awslambda.probes\",\n\"func\": \"get_function_memory_size\",\n\"arguments\": {\n\"function_name\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: get-function-memory-size\nprovider:\narguments:\nfunction_name: ''\nfunc: get_function_memory_size\nmodule: chaosaws.awslambda.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/aws/#get_function_timeout","title":"<code>get_function_timeout</code>","text":"Type probe Module chaosaws.awslambda.probes Name get_function_timeout Return integer <p>Get the configured timeout of a lambda function.</p> <p>The returned timeout is specified in number of seconds.</p> <p>Signature:</p> <pre><code>def get_function_timeout(function_name: str,\n                         qualifier: str = None,\n                         configuration: Dict[str, Dict[str, str]] = None,\n                         secrets: Dict[str, Dict[str, str]] = None) -&gt; int:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required function_name string Yes qualifier string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"get-function-timeout\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.awslambda.probes\",\n\"func\": \"get_function_timeout\",\n\"arguments\": {\n\"function_name\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: get-function-timeout\nprovider:\narguments:\nfunction_name: ''\nfunc: get_function_timeout\nmodule: chaosaws.awslambda.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/aws/#invoke_function","title":"<code>invoke_function</code>","text":"Type action Module chaosaws.awslambda.actions Name invoke_function Return mapping <p>Invokes Lambda.</p> <p>More information about request arguments are available in the documentation https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/lambda.html#Lambda.Client.invoke</p> <p>Signature:</p> <pre><code>def invoke_function(\n        function_name: str,\n        function_arguments: Dict[str, Any] = None,\n        invocation_type: str = 'RequestResponse',\n        client_context: Dict[str, Any] = None,\n        qualifier: str = None,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required function_name string Yes function_arguments mapping null No invocation_type string \u201cRequestResponse\u201d No client_context mapping null No qualifier string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"invoke-function\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.awslambda.actions\",\n\"func\": \"invoke_function\",\n\"arguments\": {\n\"function_name\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: invoke-function\nprovider:\narguments:\nfunction_name: ''\nfunc: invoke_function\nmodule: chaosaws.awslambda.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/aws/#list_event_source_mapping","title":"<code>list_event_source_mapping</code>","text":"Type probe Module chaosaws.awslambda.probes Name list_event_source_mapping Return mapping <p>List event source mappings for the provided lambda function or ARN of the event source</p> <p>:param source_arn: The ARN of the event source :param function_name: The name of the lambda function :param configuration: AWS configuration data :param secrets: AWS secrets :return: AWSResponse</p> <p>Signature:</p> <pre><code>def list_event_source_mapping(\n        source_arn: str = None,\n        function_name: str = None,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required source_arn string null No function_name string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"list-event-source-mapping\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.awslambda.probes\",\n\"func\": \"list_event_source_mapping\"\n}\n}\n</code></pre> <pre><code>name: list-event-source-mapping\nprovider:\nfunc: list_event_source_mapping\nmodule: chaosaws.awslambda.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/aws/#put_function_concurrency","title":"<code>put_function_concurrency</code>","text":"Type action Module chaosaws.awslambda.actions Name put_function_concurrency Return mapping <p>Throttles Lambda by setting reserved concurrency amount.</p> <p>Signature:</p> <pre><code>def put_function_concurrency(\n        function_name: str,\n        concurrent_executions: int,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required function_name string Yes concurrent_executions integer Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"put-function-concurrency\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.awslambda.actions\",\n\"func\": \"put_function_concurrency\",\n\"arguments\": {\n\"function_name\": \"\",\n\"concurrent_executions\": 0\n}\n}\n}\n</code></pre> <pre><code>name: put-function-concurrency\nprovider:\narguments:\nconcurrent_executions: 0\nfunction_name: ''\nfunc: put_function_concurrency\nmodule: chaosaws.awslambda.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/aws/#put_function_memory_size","title":"<code>put_function_memory_size</code>","text":"Type action Module chaosaws.awslambda.actions Name put_function_memory_size Return mapping <p>Sets the function memory size.</p> <p>Input memory_size argument is specified in megabytes.</p> <p>Signature:</p> <pre><code>def put_function_memory_size(\n        function_name: str,\n        memory_size: int,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required function_name string Yes memory_size integer Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"put-function-memory-size\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.awslambda.actions\",\n\"func\": \"put_function_memory_size\",\n\"arguments\": {\n\"function_name\": \"\",\n\"memory_size\": 0\n}\n}\n}\n</code></pre> <pre><code>name: put-function-memory-size\nprovider:\narguments:\nfunction_name: ''\nmemory_size: 0\nfunc: put_function_memory_size\nmodule: chaosaws.awslambda.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/aws/#put_function_timeout","title":"<code>put_function_timeout</code>","text":"Type action Module chaosaws.awslambda.actions Name put_function_timeout Return mapping <p>Sets the function timeout.</p> <p>Input timeout argument is specified in seconds.</p> <p>Signature:</p> <pre><code>def put_function_timeout(\n        function_name: str,\n        timeout: int,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required function_name string Yes timeout integer Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"put-function-timeout\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.awslambda.actions\",\n\"func\": \"put_function_timeout\",\n\"arguments\": {\n\"function_name\": \"\",\n\"timeout\": 0\n}\n}\n}\n</code></pre> <pre><code>name: put-function-timeout\nprovider:\narguments:\nfunction_name: ''\ntimeout: 0\nfunc: put_function_timeout\nmodule: chaosaws.awslambda.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/aws/#toggle_event_source_mapping_state","title":"<code>toggle_event_source_mapping_state</code>","text":"Type action Module chaosaws.awslambda.actions Name toggle_event_source_mapping_state Return mapping <p>Toggle an event source mapping to be disabled or enabled</p> <p>:param event_uuid: The identifier of the event source mapping :param enabled: Boolean value: true to enable, false to disable :param configuration: AWS configuration data :param secrets: AWS secrets :return: AWSResponse</p> <p>Signature:</p> <pre><code>def toggle_event_source_mapping_state(\n        event_uuid: str,\n        enabled: bool,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required event_uuid string Yes enabled boolean Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"toggle-event-source-mapping-state\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.awslambda.actions\",\n\"func\": \"toggle_event_source_mapping_state\",\n\"arguments\": {\n\"event_uuid\": \"\",\n\"enabled\": true\n}\n}\n}\n</code></pre> <pre><code>name: toggle-event-source-mapping-state\nprovider:\narguments:\nenabled: true\nevent_uuid: ''\nfunc: toggle_event_source_mapping_state\nmodule: chaosaws.awslambda.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/aws/#cloudwatch","title":"cloudwatch","text":""},{"location":"drivers/aws/#delete_rule","title":"<code>delete_rule</code>","text":"Type action Module chaosaws.cloudwatch.actions Name delete_rule Return mapping <p>Deletes a CloudWatch rule.</p> <p>All rule targets must be removed before deleting the rule. Set input argument force to True to force all rule targets to be deleted.</p> <p>Signature:</p> <pre><code>def delete_rule(rule_name: str,\n                force: bool = False,\n                configuration: Dict[str, Dict[str, str]] = None,\n                secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required rule_name string Yes force boolean false No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"delete-rule\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.cloudwatch.actions\",\n\"func\": \"delete_rule\",\n\"arguments\": {\n\"rule_name\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: delete-rule\nprovider:\narguments:\nrule_name: ''\nfunc: delete_rule\nmodule: chaosaws.cloudwatch.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/aws/#disable_rule","title":"<code>disable_rule</code>","text":"Type action Module chaosaws.cloudwatch.actions Name disable_rule Return mapping <p>Disables a CloudWatch rule.</p> <p>Signature:</p> <pre><code>def disable_rule(rule_name: str,\n                 configuration: Dict[str, Dict[str, str]] = None,\n                 secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required rule_name string Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"disable-rule\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.cloudwatch.actions\",\n\"func\": \"disable_rule\",\n\"arguments\": {\n\"rule_name\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: disable-rule\nprovider:\narguments:\nrule_name: ''\nfunc: disable_rule\nmodule: chaosaws.cloudwatch.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/aws/#enable_rule","title":"<code>enable_rule</code>","text":"Type action Module chaosaws.cloudwatch.actions Name enable_rule Return mapping <p>Enables a CloudWatch rule.</p> <p>Signature:</p> <pre><code>def enable_rule(rule_name: str,\n                configuration: Dict[str, Dict[str, str]] = None,\n                secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required rule_name string Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"enable-rule\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.cloudwatch.actions\",\n\"func\": \"enable_rule\",\n\"arguments\": {\n\"rule_name\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: enable-rule\nprovider:\narguments:\nrule_name: ''\nfunc: enable_rule\nmodule: chaosaws.cloudwatch.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/aws/#get_alarm_state_value","title":"<code>get_alarm_state_value</code>","text":"Type probe Module chaosaws.cloudwatch.probes Name get_alarm_state_value Return string <p>Return the state value of an alarm.</p> <p>The possbile alarm state values are described in the documentation https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/cloudwatch.html#CloudWatch.Client.describe_alarms</p> <p>Signature:</p> <pre><code>def get_alarm_state_value(alarm_name: str,\n                          configuration: Dict[str, Dict[str, str]] = None,\n                          secrets: Dict[str, Dict[str, str]] = None) -&gt; str:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required alarm_name string Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"get-alarm-state-value\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.cloudwatch.probes\",\n\"func\": \"get_alarm_state_value\",\n\"arguments\": {\n\"alarm_name\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: get-alarm-state-value\nprovider:\narguments:\nalarm_name: ''\nfunc: get_alarm_state_value\nmodule: chaosaws.cloudwatch.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/aws/#get_metric_data","title":"<code>get_metric_data</code>","text":"Type probe Module chaosaws.cloudwatch.probes Name get_metric_data Return number <p>Gets metric data for a given metric in a given time period. This method allows for more data to be retrieved than get_metric_statistics</p> <p>:params     namespace: The AWS metric namespace     metric_name: The name of the metric to pull data for     One of:    dimension_name, dimension_value: Required to search for ONE dimension    dimensions: Required to search for dimensions combinations    Are expected as a list of dictionary objects:    [{\u2018Name\u2019: \u2018Dim1\u2019, \u2018Value\u2019: \u2018Val1\u2019}, {\u2018Name\u2019: \u2018Dim2\u2019, \u2018Value\u2019: \u2018Val2\u2019}, \u2026]     unit: The type of unit desired to be collected     statistic: The type of data to return.    One of: Average, Sum, Minimum, Maximum, SampleCount     period: The window in which to pull datapoints for     offset: The time (seconds) to offset the endtime (from now)     duration: The time (seconds) to set the start time (from now)</p> <p>Signature:</p> <pre><code>def get_metric_data(namespace: str,\n                    metric_name: str,\n                    dimension_name: str = None,\n                    dimension_value: str = None,\n                    dimensions: List[Dict[str, str]] = None,\n                    statistic: str = None,\n                    duration: int = 300,\n                    period: int = 60,\n                    offset: int = 0,\n                    unit: str = None,\n                    configuration: Dict[str, Dict[str, str]] = None,\n                    secrets: Dict[str, Dict[str, str]] = None) -&gt; float:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required namespace string Yes metric_name string Yes dimension_name string null No dimension_value string null No dimensions list null No statistic string null No duration integer 300 No period integer 60 No offset integer 0 No unit string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"get-metric-data\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.cloudwatch.probes\",\n\"func\": \"get_metric_data\",\n\"arguments\": {\n\"namespace\": \"\",\n\"metric_name\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: get-metric-data\nprovider:\narguments:\nmetric_name: ''\nnamespace: ''\nfunc: get_metric_data\nmodule: chaosaws.cloudwatch.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/aws/#get_metric_statistics","title":"<code>get_metric_statistics</code>","text":"Type probe Module chaosaws.cloudwatch.probes Name get_metric_statistics Return None <p>Get the value of a statistical calculation for a given metric.</p> <p>The period for which the calculation will be performed is specified by a duration and an offset from the current time. Both are specified in seconds.</p> <p>Example: A duration of 60 seconds and an offset of 30 seconds will yield a statistical value based on the time interval between 30 and 90 seconds in the past.</p> <p>Is required one of:     dimension_name, dimension_value: Required to search for ONE dimension     dimensions: Required to search for dimensions combinations     Are expected as a list of dictionary objects:     [{\u2018Name\u2019: \u2018Dim1\u2019, \u2018Value\u2019: \u2018Val1\u2019}, {\u2018Name\u2019: \u2018Dim2\u2019, \u2018Value\u2019: \u2018Val2\u2019}, \u2026]</p> <p>More information about input parameters are available in the documentation https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/cloudwatch.html#CloudWatch.Client.get_metric_statistics</p> <p>Signature:</p> <pre><code>def get_metric_statistics(namespace: str,\n                          metric_name: str,\n                          dimension_name: str = None,\n                          dimension_value: str = None,\n                          dimensions: List[Dict[str, str]] = None,\n                          duration: int = 60,\n                          offset: int = 0,\n                          statistic: str = None,\n                          extended_statistic: str = None,\n                          unit: str = None,\n                          configuration: Dict[str, Dict[str, str]] = None,\n                          secrets: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required namespace string Yes metric_name string Yes dimension_name string null No dimension_value string null No dimensions list null No duration integer 60 No offset integer 0 No statistic string null No extended_statistic string null No unit string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"get-metric-statistics\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.cloudwatch.probes\",\n\"func\": \"get_metric_statistics\",\n\"arguments\": {\n\"namespace\": \"\",\n\"metric_name\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: get-metric-statistics\nprovider:\narguments:\nmetric_name: ''\nnamespace: ''\nfunc: get_metric_statistics\nmodule: chaosaws.cloudwatch.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/aws/#put_metric_data","title":"<code>put_metric_data</code>","text":"Type action Module chaosaws.cloudwatch.actions Name put_metric_data Return None <p>Publish metric data points to CloudWatch</p> <p>:param namespace: The metric namespace :param metric_data: A list of metric data to submit :param configuration: AWS authentication configuration :param secrets: Additional authentication secrets :return: None</p> <p>example:     namespace=\u2019MyCustomTestMetric\u2019,     metric_data=[    {   \u2018MetricName\u2019: \u2018MemoryUsagePercent\u2019,   \u2018Dimensions\u2019: [  {\u2018Name\u2019: \u2018InstanceId\u2019, \u2018Value\u2019: \u2018i-000000000000\u2019},  {\u2018Name\u2019: \u2018Instance Name\u2019, \u2018Value\u2019: \u2018Test Instance\u2019}   ],   \u2018Timestamp\u2019: datetime(yyyy, mm, dd, HH, MM, SS),   \u2018Value\u2019: 55.55,   \u2018Unit\u2019: \u2018Percent\u2019,   \u2018StorageResolution\u2019: 60    }     ]</p> <p>For additional information, consult: https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/cloudwatch.html#CloudWatch.Client.put_metric_data</p> <p>Signature:</p> <pre><code>def put_metric_data(namespace: str,\n                    metric_data: List[Dict[str, Any]],\n                    configuration: Dict[str, Dict[str, str]] = None,\n                    secrets: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required namespace string Yes metric_data list Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"put-metric-data\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.cloudwatch.actions\",\n\"func\": \"put_metric_data\",\n\"arguments\": {\n\"namespace\": \"\",\n\"metric_data\": []\n}\n}\n}\n</code></pre> <pre><code>name: put-metric-data\nprovider:\narguments:\nmetric_data: []\nnamespace: ''\nfunc: put_metric_data\nmodule: chaosaws.cloudwatch.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/aws/#put_rule","title":"<code>put_rule</code>","text":"Type action Module chaosaws.cloudwatch.actions Name put_rule Return mapping <p>Creates or updates a CloudWatch event rule.</p> <p>Please refer to https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/events.html#CloudWatchEvents.Client.put_rule for details on input arguments.</p> <p>Signature:</p> <pre><code>def put_rule(rule_name: str,\n             schedule_expression: str = None,\n             event_pattern: str = None,\n             state: str = None,\n             description: str = None,\n             role_arn: str = None,\n             configuration: Dict[str, Dict[str, str]] = None,\n             secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required rule_name string Yes schedule_expression string null No event_pattern string null No state string null No description string null No role_arn string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"put-rule\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.cloudwatch.actions\",\n\"func\": \"put_rule\",\n\"arguments\": {\n\"rule_name\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: put-rule\nprovider:\narguments:\nrule_name: ''\nfunc: put_rule\nmodule: chaosaws.cloudwatch.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/aws/#put_rule_targets","title":"<code>put_rule_targets</code>","text":"Type action Module chaosaws.cloudwatch.actions Name put_rule_targets Return mapping <p>Creates or update CloudWatch event rule targets.</p> <p>Please refer to https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/events.html#CloudWatchEvents.Client.put_targets for details on input arguments.</p> <p>Signature:</p> <pre><code>def put_rule_targets(\n        rule_name: str,\n        targets: List[Dict[str, Any]],\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required rule_name string Yes targets list Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"put-rule-targets\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.cloudwatch.actions\",\n\"func\": \"put_rule_targets\",\n\"arguments\": {\n\"rule_name\": \"\",\n\"targets\": []\n}\n}\n}\n</code></pre> <pre><code>name: put-rule-targets\nprovider:\narguments:\nrule_name: ''\ntargets: []\nfunc: put_rule_targets\nmodule: chaosaws.cloudwatch.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/aws/#remove_rule_targets","title":"<code>remove_rule_targets</code>","text":"Type action Module chaosaws.cloudwatch.actions Name remove_rule_targets Return mapping <p>Removes CloudWatch rule targets. If no target ids are provided all targets will be removed.</p> <p>Signature:</p> <pre><code>def remove_rule_targets(\n        rule_name: str,\n        target_ids: List[str] = None,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required rule_name string Yes target_ids list null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"remove-rule-targets\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.cloudwatch.actions\",\n\"func\": \"remove_rule_targets\",\n\"arguments\": {\n\"rule_name\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: remove-rule-targets\nprovider:\narguments:\nrule_name: ''\nfunc: remove_rule_targets\nmodule: chaosaws.cloudwatch.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/aws/#ec2","title":"ec2","text":""},{"location":"drivers/aws/#attach_volume_1","title":"<code>attach_volume</code>","text":"Type action Module chaosaws.ec2.actions Name attach_volume Return list <p>Attaches a previously detached EBS volume to its associated EC2 instance.</p> <p>If neither \u2018instance_ids\u2019 or \u2018filters\u2019 are provided, all detached volumes will be reattached to their respective instances</p> <p>:     One of:    instance_ids: list: instance ids    filters: list: key/value pairs to pull ec2 instances</p> <p>Signature:</p> <pre><code>def attach_volume(\n        instance_ids: List[str] = None,\n        filters: List[Dict[str, Any]] = None,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; List[Dict[str, Any]]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required instance_ids list null No filters list null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"attach-volume\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.ec2.actions\",\n\"func\": \"attach_volume\"\n}\n}\n</code></pre> <pre><code>name: attach-volume\nprovider:\nfunc: attach_volume\nmodule: chaosaws.ec2.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/aws/#count_instances","title":"<code>count_instances</code>","text":"Type probe Module chaosaws.ec2.probes Name count_instances Return integer <p>Return count of instances matching the specified filters.</p> <p>Please refer to https://bit.ly/2Sv9lmU</p> <p>for details on said filters.</p> <p>Signature:</p> <pre><code>def count_instances(filters: List[Dict[str, Any]],\n                    configuration: Dict[str, Dict[str, str]] = None,\n                    secrets: Dict[str, Dict[str, str]] = None) -&gt; int:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required filters list Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"count-instances\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.ec2.probes\",\n\"func\": \"count_instances\",\n\"arguments\": {\n\"filters\": []\n}\n}\n}\n</code></pre> <pre><code>name: count-instances\nprovider:\narguments:\nfilters: []\nfunc: count_instances\nmodule: chaosaws.ec2.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/aws/#count_min_instances","title":"<code>count_min_instances</code>","text":"Type probe Module chaosaws.ec2.probes Name count_min_instances Return boolean <p>Returns whether minimum number of instances available matching the specified filters.</p> <p>Signature:</p> <pre><code>def count_min_instances(filters: List[Dict[str, Any]],\n                        min_count: int = 0,\n                        configuration: Dict[str, Dict[str, str]] = None,\n                        secrets: Dict[str, Dict[str, str]] = None) -&gt; bool:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required filters list Yes min_count integer 0 No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"count-min-instances\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.ec2.probes\",\n\"func\": \"count_min_instances\",\n\"arguments\": {\n\"filters\": []\n}\n}\n}\n</code></pre> <pre><code>name: count-min-instances\nprovider:\narguments:\nfilters: []\nfunc: count_min_instances\nmodule: chaosaws.ec2.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/aws/#describe_instances","title":"<code>describe_instances</code>","text":"Type probe Module chaosaws.ec2.probes Name describe_instances Return mapping <p>Describe instances following the specified filters.</p> <p>Please refer to https://bit.ly/2Sv9lmU</p> <p>for details on said filters.</p> <p>Signature:</p> <pre><code>def describe_instances(\n        filters: List[Dict[str, Any]],\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required filters list Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"describe-instances\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.ec2.probes\",\n\"func\": \"describe_instances\",\n\"arguments\": {\n\"filters\": []\n}\n}\n}\n</code></pre> <pre><code>name: describe-instances\nprovider:\narguments:\nfilters: []\nfunc: describe_instances\nmodule: chaosaws.ec2.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/aws/#detach_random_volume_1","title":"<code>detach_random_volume</code>","text":"Type action Module chaosaws.ec2.actions Name detach_random_volume Return list <p>Detaches a random ebs volume (non root) from one or more EC2 instances</p> <p>:     One of:    instance_ids: a list of one or more ec2 instance ids    filters: a list of key/value pairs to pull ec2 instances</p> <pre><code>force: force detach volume (default: true)\n</code></pre> <p>Additional filters may be used to narrow the scope: https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ec2.html#EC2.Client.describe_instances</p> <p>Signature:</p> <pre><code>def detach_random_volume(\n        instance_ids: List[str] = None,\n        filters: List[Dict[str, Any]] = None,\n        force: bool = True,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; List[Dict[str, Any]]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required instance_ids list null No filters list null No force boolean true No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"detach-random-volume\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.ec2.actions\",\n\"func\": \"detach_random_volume\"\n}\n}\n</code></pre> <pre><code>name: detach-random-volume\nprovider:\nfunc: detach_random_volume\nmodule: chaosaws.ec2.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/aws/#instance_state","title":"<code>instance_state</code>","text":"Type probe Module chaosaws.ec2.probes Name instance_state Return boolean <p>Determines if EC2 instances match desired state</p> <p>For additional filter options, please refer to the documentation found: https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ec2.html#EC2.Client.describe_instances</p> <p>Signature:</p> <pre><code>def instance_state(state: str,\n                   instance_ids: List[str] = None,\n                   filters: List[Dict[str, Any]] = None,\n                   configuration: Dict[str, Dict[str, str]] = None,\n                   secrets: Dict[str, Dict[str, str]] = None) -&gt; bool:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required state string Yes instance_ids list null No filters list null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"instance-state\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.ec2.probes\",\n\"func\": \"instance_state\",\n\"arguments\": {\n\"state\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: instance-state\nprovider:\narguments:\nstate: ''\nfunc: instance_state\nmodule: chaosaws.ec2.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/aws/#restart_instances","title":"<code>restart_instances</code>","text":"Type action Module chaosaws.ec2.actions Name restart_instances Return list <p>Restarts one or more EC2 instances.</p> <p>WARNING: If only an Availability Zone is provided, all instances in the provided AZ will be restarted.</p> <p>Additional filters may be used to narrow the scope: https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ec2.html#EC2.Client.describe_instances</p> <p>Signature:</p> <pre><code>def restart_instances(\n        instance_ids: List[str] = None,\n        az: str = None,\n        filters: List[Dict[str, Any]] = None,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; List[Dict[str, Any]]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required instance_ids list null No az string null No filters list null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"restart-instances\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.ec2.actions\",\n\"func\": \"restart_instances\"\n}\n}\n</code></pre> <pre><code>name: restart-instances\nprovider:\nfunc: restart_instances\nmodule: chaosaws.ec2.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/aws/#start_instances","title":"<code>start_instances</code>","text":"Type action Module chaosaws.ec2.actions Name start_instances Return list <p>Starts one or more EC2 instances.</p> <p>WARNING: If only an Availability Zone is provided, all instances in the provided AZ will be started.</p> <p>Additional filters may be used to narrow the scope: https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ec2.html#EC2.Client.describe_instances</p> <p>Signature:</p> <pre><code>def start_instances(\n        instance_ids: List[str] = None,\n        az: str = None,\n        filters: List[Dict[str, Any]] = None,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; List[Dict[str, Any]]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required instance_ids list null No az string null No filters list null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"start-instances\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.ec2.actions\",\n\"func\": \"start_instances\"\n}\n}\n</code></pre> <pre><code>name: start-instances\nprovider:\nfunc: start_instances\nmodule: chaosaws.ec2.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/aws/#stop_instance","title":"<code>stop_instance</code>","text":"Type action Module chaosaws.ec2.actions Name stop_instance Return list <p>Stop a single EC2 instance.</p> <p>You may provide an instance id explicitly or, if you only specify the AZ, a random instance will be selected. If you need more control, you can also provide a list of filters following the documentation https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ec2.html#EC2.Client.describe_instances</p> <p>Signature:</p> <pre><code>def stop_instance(\n        instance_id: str = None,\n        az: str = None,\n        force: bool = False,\n        filters: List[Dict[str, Any]] = None,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; List[Dict[str, Any]]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required instance_id string null No az string null No force boolean false No filters list null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"stop-instance\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.ec2.actions\",\n\"func\": \"stop_instance\"\n}\n}\n</code></pre> <pre><code>name: stop-instance\nprovider:\nfunc: stop_instance\nmodule: chaosaws.ec2.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/aws/#stop_instances","title":"<code>stop_instances</code>","text":"Type action Module chaosaws.ec2.actions Name stop_instances Return list <p>Stop the given EC2 instances or, if none is provided, all instances of the given availability zone. If you need more control, you can also provide a list of filters following the documentation https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ec2.html#EC2.Client.describe_instances</p> <p>Signature:</p> <pre><code>def stop_instances(\n        instance_ids: List[str] = None,\n        az: str = None,\n        filters: List[Dict[str, Any]] = None,\n        force: bool = False,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; List[Dict[str, Any]]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required instance_ids list null No az string null No filters list null No force boolean false No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"stop-instances\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.ec2.actions\",\n\"func\": \"stop_instances\"\n}\n}\n</code></pre> <pre><code>name: stop-instances\nprovider:\nfunc: stop_instances\nmodule: chaosaws.ec2.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/aws/#terminate_instance","title":"<code>terminate_instance</code>","text":"Type action Module chaosaws.ec2.actions Name terminate_instance Return list <p>Terminates a single EC2 instance.</p> <p>An instance may be targeted by specifying it by instance-id. If only the availability-zone is provided, a random instances in that AZ will be selected and terminated. For more control, please reference the available filters found: https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ec2.html#EC2.Client.describe_instances</p> <p>Signature:</p> <pre><code>def terminate_instance(\n        instance_id: str = None,\n        az: str = None,\n        filters: List[Dict[str, Any]] = None,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; List[Dict[str, Any]]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required instance_id string null No az string null No filters list null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"terminate-instance\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.ec2.actions\",\n\"func\": \"terminate_instance\"\n}\n}\n</code></pre> <pre><code>name: terminate-instance\nprovider:\nfunc: terminate_instance\nmodule: chaosaws.ec2.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/aws/#terminate_instances","title":"<code>terminate_instances</code>","text":"Type action Module chaosaws.ec2.actions Name terminate_instances Return list <p>Terminates multiple EC2 instances</p> <p>A set of instances may be targeted by providing them as the instance-ids.</p> <p>WARNING: If  only an Availability Zone is specified, all instances in that AZ will be terminated.</p> <p>Additional filters may be used to narrow the scope: https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ec2.html#EC2.Client.describe_instances</p> <p>Signature:</p> <pre><code>def terminate_instances(\n        instance_ids: List[str] = None,\n        az: str = None,\n        filters: List[Dict[str, Any]] = None,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; List[Dict[str, Any]]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required instance_ids list null No az string null No filters list null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"terminate-instances\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.ec2.actions\",\n\"func\": \"terminate_instances\"\n}\n}\n</code></pre> <pre><code>name: terminate-instances\nprovider:\nfunc: terminate_instances\nmodule: chaosaws.ec2.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/aws/#ecs","title":"ecs","text":""},{"location":"drivers/aws/#are_all_desired_tasks_running","title":"<code>are_all_desired_tasks_running</code>","text":"Type probe Module chaosaws.ecs.probes Name are_all_desired_tasks_running Return boolean <p>Checks to make sure desired and running tasks counts are equal</p> <p>Signature:</p> <pre><code>def are_all_desired_tasks_running(\n        cluster: str,\n        service: str,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; bool:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required cluster string Yes service string Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"are-all-desired-tasks-running\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.ecs.probes\",\n\"func\": \"are_all_desired_tasks_running\",\n\"arguments\": {\n\"cluster\": \"\",\n\"service\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: are-all-desired-tasks-running\nprovider:\narguments:\ncluster: ''\nservice: ''\nfunc: are_all_desired_tasks_running\nmodule: chaosaws.ecs.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/aws/#delete_cluster","title":"<code>delete_cluster</code>","text":"Type action Module chaosaws.ecs.actions Name delete_cluster Return mapping <p>Delete an ECS cluster</p> <p>:param cluster: The ECS cluster name or ARN :param configuration: access values used by actions/probes :param secrets: values that need to be passed on to actions/probes :return: Dict[str, Any]</p> <p>Signature:</p> <pre><code>def delete_cluster(\n        cluster: str,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required cluster string Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"delete-cluster\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.ecs.actions\",\n\"func\": \"delete_cluster\",\n\"arguments\": {\n\"cluster\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: delete-cluster\nprovider:\narguments:\ncluster: ''\nfunc: delete_cluster\nmodule: chaosaws.ecs.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/aws/#delete_service","title":"<code>delete_service</code>","text":"Type action Module chaosaws.ecs.actions Name delete_service Return mapping <p>Update a given ECS service by updating it to set the desired count of tasks to 0 then delete it. If not provided, a random one will be picked up regarding <code>service_pattern</code>, if provided, so that only service names matching the pattern would be be used. This should be a valid regex.</p> <p>You can specify a cluster by its ARN identifier or, if not provided, the default cluster will be picked up.</p> <p>Signature:</p> <pre><code>def delete_service(\n        service: str = None,\n        cluster: str = None,\n        service_pattern: str = None,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required service string null No cluster string null No service_pattern string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"delete-service\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.ecs.actions\",\n\"func\": \"delete_service\"\n}\n}\n</code></pre> <pre><code>name: delete-service\nprovider:\nfunc: delete_service\nmodule: chaosaws.ecs.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/aws/#deregister_container_instance","title":"<code>deregister_container_instance</code>","text":"Type action Module chaosaws.ecs.actions Name deregister_container_instance Return mapping <p>Deregister an ECS container</p> <p>Warning: If using \u201cforce\u201d, Any tasks not deleted before deregistration will remain orphaned</p> <p>:param cluster: The ECS cluster name or ARN or ARN :param instance_id: The container instance id or ARN :param force: Force deregistraion of container instance :param configuration: access values used by actions/probes :param secrets: values that need to be passed on to actions/probes :return: Dict[str, Any]</p> <p>Signature:</p> <pre><code>def deregister_container_instance(\n        cluster: str,\n        instance_id: str,\n        force: bool = False,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required cluster string Yes instance_id string Yes force boolean false No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"deregister-container-instance\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.ecs.actions\",\n\"func\": \"deregister_container_instance\",\n\"arguments\": {\n\"cluster\": \"\",\n\"instance_id\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: deregister-container-instance\nprovider:\narguments:\ncluster: ''\ninstance_id: ''\nfunc: deregister_container_instance\nmodule: chaosaws.ecs.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/aws/#describe_cluster","title":"<code>describe_cluster</code>","text":"Type probe Module chaosaws.ecs.probes Name describe_cluster Return mapping <p>Returns AWS response describing the specified cluster</p> <p>Probe example:     \u201csteady-state-hypothesis\u201d: {    \u201ctitle\u201d: \u201cMyCluster has 3 running tasks\u201d,    \u201cprobes\u201d: [{   \u201ctype\u201d: \u201cprobe\u201d,   \u201cname\u201d: \u201cCluster running task count\u201d,   \u201ctolerance\u201d: {  \u201ctype\u201d: \u201cjsonpath\u201d,  \u201cpath\u201d: $.clusters[0].runningTasksCount,  \u201cexpect\u201d: 3   },   \u201cprovider\u201d: {  \u201ctype\u201d: \u201cpython\u201d,  \u201cmodule\u201d: \u201cchaosaws.ecs.probes\u201d,  \u201cfunc\u201d: \u201cdescribe_cluster\u201d,  \u201carguments\u201d: { \u201ccluster\u201d: \u201cMyCluster\u201d  }   }    }     }</p> <p>Full list of possible paths can be found: https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ecs.html#ECS.Client.describe_clusters</p> <p>Signature:</p> <pre><code>def describe_cluster(\n        cluster: str,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required cluster string Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"describe-cluster\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.ecs.probes\",\n\"func\": \"describe_cluster\",\n\"arguments\": {\n\"cluster\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: describe-cluster\nprovider:\narguments:\ncluster: ''\nfunc: describe_cluster\nmodule: chaosaws.ecs.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/aws/#describe_service","title":"<code>describe_service</code>","text":"Type probe Module chaosaws.ecs.probes Name describe_service Return mapping <p>Returns AWS response describing the specified cluster service</p> <p>Probe example:     \u201csteady-state-hypothesis\u201d: {    \u201ctitle\u201d: \u201cMyService pending count is 1\u201d,    \u201cprobes\u201d: [{   \u201ctype\u201d: \u201cprobe\u201d,   \u201cname\u201d: \u201cService pending count\u201d,   \u201ctolerance\u201d: {  \u201ctype\u201d: \u201cjsonpath\u201d,  \u201cpath\u201d: $.services[0].pendingCount,  \u201cexpect\u201d: 1   },   \u201cprovider\u201d: {  \u201ctype\u201d: \u201cpython\u201d,  \u201cmodule\u201d: \u201cchaosaws.ecs.probes\u201d,  \u201cfunc\u201d: \u201cdescribe_service\u201d,  \u201carguments\u201d: { \u201ccluster\u201d: \u201cMyCluster\u201d, \u201cservice\u201d: \u201cMyService\u201d  }   }    }]     }</p> <p>Full list of possible paths can be found: https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ecs.html#ECS.Client.describe_services</p> <p>Signature:</p> <pre><code>def describe_service(\n        cluster: str,\n        service: str,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required cluster string Yes service string Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"describe-service\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.ecs.probes\",\n\"func\": \"describe_service\",\n\"arguments\": {\n\"cluster\": \"\",\n\"service\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: describe-service\nprovider:\narguments:\ncluster: ''\nservice: ''\nfunc: describe_service\nmodule: chaosaws.ecs.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/aws/#describe_tasks","title":"<code>describe_tasks</code>","text":"Type probe Module chaosaws.ecs.probes Name describe_tasks Return mapping <p>Returns AWS response describing the tasks for a provided cluster</p> <p>Probe example:     \u201csteady-state-hypothesis\u201d: {    \u201ctitle\u201d: \u201cMyCluster tasks are healthy\u201d,    \u201cprobes\u201d: [{   \u201ctype\u201d: \u201cprobe\u201d,   \u201cname\u201d: \u201cfirst task is healthy\u201d,   \u201ctolerance\u201d: {  \u201ctype\u201d: \u201cjsonpath\u201d,  \u201cpath\u201d: $.tasks[0].healthStatus,  \u201cexpect\u201d: \u201cHEALTHY\u201d   },   \u201cprovider\u201d: {  \u201ctype\u201d: \u201cpython\u201d,  \u201cmodule\u201d: \u201cchaosaws.ecs.probes\u201d,  \u201cfunc\u201d: \u201cdescribe_tasks\u201d,  \u201carguments\u201d: { \u201ccluster\u201d: \u201cMyCluster\u201d  }   }    }]     }</p> <p>Full list of possible paths can be found: https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ecs.html#ECS.Client.describe_tasks</p> <p>Signature:</p> <pre><code>def describe_tasks(\n        cluster: str,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required cluster string Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"describe-tasks\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.ecs.probes\",\n\"func\": \"describe_tasks\",\n\"arguments\": {\n\"cluster\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: describe-tasks\nprovider:\narguments:\ncluster: ''\nfunc: describe_tasks\nmodule: chaosaws.ecs.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/aws/#service_is_deploying","title":"<code>service_is_deploying</code>","text":"Type probe Module chaosaws.ecs.probes Name service_is_deploying Return boolean <p>Checks to make sure there is not an in progress deployment</p> <p>Signature:</p> <pre><code>def service_is_deploying(cluster: str,\n                         service: str,\n                         configuration: Dict[str, Dict[str, str]] = None,\n                         secrets: Dict[str, Dict[str, str]] = None) -&gt; bool:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required cluster string Yes service string Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"service-is-deploying\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.ecs.probes\",\n\"func\": \"service_is_deploying\",\n\"arguments\": {\n\"cluster\": \"\",\n\"service\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: service-is-deploying\nprovider:\narguments:\ncluster: ''\nservice: ''\nfunc: service_is_deploying\nmodule: chaosaws.ecs.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/aws/#set_service_deployment_configuration","title":"<code>set_service_deployment_configuration</code>","text":"Type action Module chaosaws.ecs.actions Name set_service_deployment_configuration Return mapping <p>Sets the maximum healthy count and minimum healthy percentage values for a services deployment configuration</p> <p>:param cluster: The ECS cluster name or ARN :param service: The ECS service name :param maximum_percent: The upper limit on the number of tasks a service is     allowed to have in RUNNING or PENDING during deployment :param minimum_healthy_percent: The lower limit on the number of tasks a     service must keep in RUNNING to be considered healthy during deployment :param configuration: access values used by actions/probes :param secrets: values that need to be passed on to actions/probes :return: Dict[str, Any]</p> <p>Signature:</p> <pre><code>def set_service_deployment_configuration(\n        cluster: str,\n        service: str,\n        maximum_percent: int = 200,\n        minimum_healthy_percent: int = 100,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required cluster string Yes service string Yes maximum_percent integer 200 No minimum_healthy_percent integer 100 No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"set-service-deployment-configuration\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.ecs.actions\",\n\"func\": \"set_service_deployment_configuration\",\n\"arguments\": {\n\"cluster\": \"\",\n\"service\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: set-service-deployment-configuration\nprovider:\narguments:\ncluster: ''\nservice: ''\nfunc: set_service_deployment_configuration\nmodule: chaosaws.ecs.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/aws/#set_service_placement_strategy","title":"<code>set_service_placement_strategy</code>","text":"Type action Module chaosaws.ecs.actions Name set_service_placement_strategy Return mapping <p>Sets the service\u2019s instance placement strategy</p> <p>:param cluster: The ECS cluster name or ARN :param service: The ECS service name :param placement_type: The type of placement strategy to employ     (random, spread, or binpack) :param placement_field: The field to apply the strategy against     (eg: \u201cattribute:ecs.availability-zone\u201d) :param configuration: access values used by actions/probes :param secrets: values that need to be passed on to actions/probes :return: Dict[str, Any]</p> <p>Signature:</p> <pre><code>def set_service_placement_strategy(\n        cluster: str,\n        service: str,\n        placement_type: str,\n        placement_field: str = None,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required cluster string Yes service string Yes placement_type string Yes placement_field string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"set-service-placement-strategy\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.ecs.actions\",\n\"func\": \"set_service_placement_strategy\",\n\"arguments\": {\n\"cluster\": \"\",\n\"service\": \"\",\n\"placement_type\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: set-service-placement-strategy\nprovider:\narguments:\ncluster: ''\nplacement_type: ''\nservice: ''\nfunc: set_service_placement_strategy\nmodule: chaosaws.ecs.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/aws/#stop_random_tasks","title":"<code>stop_random_tasks</code>","text":"Type action Module chaosaws.ecs.actions Name stop_random_tasks Return list <p>Stop a random number of tasks based on given task_count or task_percent</p> <p>You can specify a cluster by its ARN identifier or, if not provided, the default cluster will be picked up.</p> <p>:param cluster: The ECS cluster Name :param task_count: The number of tasks to stop :param task_percent: The percentage of total tasks to stop :param service: The ECS service name :param reason: An explanation of why the service was stopped :param configuration: access values used by actions/probes :param secrets: values that need to be passed on to actions/probes :return: List[Dict[str, Any]]</p> <p>Signature:</p> <pre><code>def stop_random_tasks(\n        cluster: str,\n        task_count: int = None,\n        task_percent: int = None,\n        service: str = None,\n        reason: str = 'Chaos Testing',\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; List[Dict[str, Any]]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required cluster string Yes task_count integer null No task_percent integer null No service string null No reason string \u201cChaos Testing\u201d No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"stop-random-tasks\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.ecs.actions\",\n\"func\": \"stop_random_tasks\",\n\"arguments\": {\n\"cluster\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: stop-random-tasks\nprovider:\narguments:\ncluster: ''\nfunc: stop_random_tasks\nmodule: chaosaws.ecs.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/aws/#stop_task","title":"<code>stop_task</code>","text":"Type action Module chaosaws.ecs.actions Name stop_task Return mapping <p>Stop a given ECS task instance. If no task_id provided, a random task of the given service is stopped. You can specify a cluster by its ARN identifier or, if not provided, the default cluster will be picked up.</p> <p>Signature:</p> <pre><code>def stop_task(cluster: str = None,\n              task_id: str = None,\n              service: str = None,\n              reason: str = 'Chaos Testing',\n              configuration: Dict[str, Dict[str, str]] = None,\n              secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required cluster string null No task_id string null No service string null No reason string \u201cChaos Testing\u201d No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"stop-task\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.ecs.actions\",\n\"func\": \"stop_task\"\n}\n}\n</code></pre> <pre><code>name: stop-task\nprovider:\nfunc: stop_task\nmodule: chaosaws.ecs.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/aws/#tag_resource","title":"<code>tag_resource</code>","text":"Type action Module chaosaws.ecs.actions Name tag_resource Return None <p>Tags the provided resource(s) with provided tags</p> <p>** For ECS resources, the long form ARN must be used https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-account-settings.html#ecs-resource-arn-timeline</p> <p>Example:     {    \u201ctags\u201d: [   {\u201ckey\u201d: \u201cMyTagKey\u201d, \u201cvalue\u201d: \u201cMyTagValue\u201d},   {\u201ckey\u201d: \u201cMyOtherTagKey\u201d, \u201cvalue\u201d: \u201cMyOtherTagValue\u201d}    ],    \u201cresource_arn\u201d: \u201carn:aws:ecs:us-east-1:123456789012:cluster/name\u201d     }</p> <p>:param tags: A list of key/value pairs :param resource_arn: The ARN of the resource to tag.     Valid resources: capacity providers, tasks, services, task definitions,     clusters, and container instances :param configuration: access values used by actions/probes :param secrets: values that need to be passed on to actions/probes :return: Dict[str, Any]</p> <p>Signature:</p> <pre><code>def tag_resource(tags: List[Dict[str, str]],\n                 resource_arn: str,\n                 configuration: Dict[str, Dict[str, str]] = None,\n                 secrets: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required tags list Yes resource_arn string Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"tag-resource\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.ecs.actions\",\n\"func\": \"tag_resource\",\n\"arguments\": {\n\"tags\": [],\n\"resource_arn\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: tag-resource\nprovider:\narguments:\nresource_arn: ''\ntags: []\nfunc: tag_resource\nmodule: chaosaws.ecs.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/aws/#untag_resource","title":"<code>untag_resource</code>","text":"Type action Module chaosaws.ecs.actions Name untag_resource Return None <p>Removes the given tags from the provided resource</p> <p>** For ECS resources, the long form ARN must be used https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-account-settings.html#ecs-resource-arn-timeline</p> <p>Example:     {    \u201ctag_keys\u201d: [\u201cMyTagKey\u201d, \u201cMyOtherTagKey\u201d],    \u201cresource_arn\u201d: \u201carn:aws:ecs:\u2026:service/cluster-name/service-name\u201d     }</p> <p>:param tag_keys: A list of tag keys to remove :param resource_arn: The ARN of the resource to tag.     Valid resources: capacity providers, tasks, services, task definitions,     clusters, and container instances :param configuration: access values used by actions/probes :param secrets: values that need to be passed on to actions/probes :return: Dict[str, Any]</p> <p>Signature:</p> <pre><code>def untag_resource(tag_keys: List[str],\n                   resource_arn: str,\n                   configuration: Dict[str, Dict[str, str]] = None,\n                   secrets: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required tag_keys list Yes resource_arn string Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"untag-resource\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.ecs.actions\",\n\"func\": \"untag_resource\",\n\"arguments\": {\n\"tag_keys\": [],\n\"resource_arn\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: untag-resource\nprovider:\narguments:\nresource_arn: ''\ntag_keys: []\nfunc: untag_resource\nmodule: chaosaws.ecs.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/aws/#update_container_instances_state","title":"<code>update_container_instances_state</code>","text":"Type action Module chaosaws.ecs.actions Name update_container_instances_state Return mapping <p>Modify the status of an ACTIVE ECS container instance</p> <p>:param cluster: The ECS cluster name or ARN :param container_instances: A list of container instance ids for ARNs :param status: The desired instance state (Valid States: ACTIVE, DRAINING) :param configuration: access values used by actions/probes :param secrets: values that need to be passed on to actions/probes :return: Dict[str, Any]</p> <p>Signature:</p> <pre><code>def update_container_instances_state(\n        cluster: str,\n        container_instances: List[str],\n        status: str,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required cluster string Yes container_instances list Yes status string Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"update-container-instances-state\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.ecs.actions\",\n\"func\": \"update_container_instances_state\",\n\"arguments\": {\n\"cluster\": \"\",\n\"container_instances\": [],\n\"status\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: update-container-instances-state\nprovider:\narguments:\ncluster: ''\ncontainer_instances: []\nstatus: ''\nfunc: update_container_instances_state\nmodule: chaosaws.ecs.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/aws/#update_desired_count","title":"<code>update_desired_count</code>","text":"Type action Module chaosaws.ecs.actions Name update_desired_count Return mapping <p>Set the number of desired tasks for an ECS service</p> <p>:param cluster: The ECS cluster name or ARN or ARN :param service: The ECS service name :param desired_count: The number of instantiation of the tasks to run :param configuration: access values used by actions/probes :param secrets: values that need to be passed on to actions/probes :return: Dict[str, Any]</p> <p>Example:     \u201cmethod\u201d: {    \u201ctype\u201d: \u201caction\u201d,    \u201cname\u201d: \u201cupdate service\u201d,    \u201cprovider\u201d: {   \u201ctype\u201d: \u201cpython\u201d,   \u201cmodule\u201d: \u201cchaosaws.ecs.actions\u201d,   \u201cfunc\u201d: \u201cupdate_desired_count\u201d,   \u201carguments\u201d: {  \u201ccluster\u201d: \u201cmy_cluster_name\u201d,  \u201cservice\u201d: \u201cmy_service_name\u201d,  \u201cdesired_count\u201d: 6   }    }     }</p> <p>Signature:</p> <pre><code>def update_desired_count(\n        cluster: str,\n        service: str,\n        desired_count: int,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required cluster string Yes service string Yes desired_count integer Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"update-desired-count\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.ecs.actions\",\n\"func\": \"update_desired_count\",\n\"arguments\": {\n\"cluster\": \"\",\n\"service\": \"\",\n\"desired_count\": 0\n}\n}\n}\n</code></pre> <pre><code>name: update-desired-count\nprovider:\narguments:\ncluster: ''\ndesired_count: 0\nservice: ''\nfunc: update_desired_count\nmodule: chaosaws.ecs.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/aws/#eks","title":"eks","text":""},{"location":"drivers/aws/#create_cluster","title":"<code>create_cluster</code>","text":"Type action Module chaosaws.eks.actions Name create_cluster Return mapping <p>Create a new EKS cluster.</p> <p>Signature:</p> <pre><code>def create_cluster(\n        name: str,\n        role_arn: str,\n        vpc_config: Dict[str, Any],\n        version: str = None,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required name string Yes role_arn string Yes vpc_config mapping Yes version string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"create-cluster\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.eks.actions\",\n\"func\": \"create_cluster\",\n\"arguments\": {\n\"name\": \"\",\n\"role_arn\": \"\",\n\"vpc_config\": {}\n}\n}\n}\n</code></pre> <pre><code>name: create-cluster\nprovider:\narguments:\nname: ''\nrole_arn: ''\nvpc_config: {}\nfunc: create_cluster\nmodule: chaosaws.eks.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/aws/#delete_cluster_1","title":"<code>delete_cluster</code>","text":"Type action Module chaosaws.eks.actions Name delete_cluster Return mapping <p>Delete the given EKS cluster.</p> <p>Signature:</p> <pre><code>def delete_cluster(\n        name: str = None,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required name string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"delete-cluster\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.eks.actions\",\n\"func\": \"delete_cluster\"\n}\n}\n</code></pre> <pre><code>name: delete-cluster\nprovider:\nfunc: delete_cluster\nmodule: chaosaws.eks.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/aws/#describe_cluster_1","title":"<code>describe_cluster</code>","text":"Type probe Module chaosaws.eks.probes Name describe_cluster Return mapping <p>Describe an EKS cluster.</p> <p>Signature:</p> <pre><code>def describe_cluster(\n        name: str,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required name string Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"describe-cluster\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.eks.probes\",\n\"func\": \"describe_cluster\",\n\"arguments\": {\n\"name\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: describe-cluster\nprovider:\narguments:\nname: ''\nfunc: describe_cluster\nmodule: chaosaws.eks.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/aws/#list_clusters","title":"<code>list_clusters</code>","text":"Type probe Module chaosaws.eks.probes Name list_clusters Return mapping <p>List EKS clusters available to the authenticated account.</p> <p>Signature:</p> <pre><code>def list_clusters(configuration: Dict[str, Dict[str, str]] = None,\n                  secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"list-clusters\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.eks.probes\",\n\"func\": \"list_clusters\"\n}\n}\n</code></pre> <pre><code>name: list-clusters\nprovider:\nfunc: list_clusters\nmodule: chaosaws.eks.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/aws/#elasticache","title":"elasticache","text":""},{"location":"drivers/aws/#count_cache_clusters_from_replication_group","title":"<code>count_cache_clusters_from_replication_group</code>","text":"Type probe Module chaosaws.elasticache.probes Name count_cache_clusters_from_replication_group Return integer <p>Returns the number of cache clusters that are part of the given ReplicationGroupId :param replication_group_id: The identifier for the replication group to be described :param configuration: Configuration :param secrets: Secrets Probe example:     \u201csteady-state-hypothesis\u201d: {    \u201ctitle\u201d: \u201cMyCluster has 3 nodes\u201d,    \u201cprobes\u201d: [{   \u201ctype\u201d: \u201cprobe\u201d,   \u201cname\u201d: \u201cCluster running node count\u201d,   \u201ctolerance\u201d: 3,   \u201cprovider\u201d: {  \u201ctype\u201d: \u201cpython\u201d,  \u201cmodule\u201d: \u201cmodules.elasticache\u201d,  \u201cfunc\u201d: \u201ccount_cache_clusters_from_replication_group\u201d,  \u201carguments\u201d: { \u201creplication_group_id\u201d: \u201cMyCluster\u201d  }   }    }     }</p> <p>Signature:</p> <pre><code>def count_cache_clusters_from_replication_group(\n        replication_group_id: str,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; int:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required replication_group_id string Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"count-cache-clusters-from-replication-group\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.elasticache.probes\",\n\"func\": \"count_cache_clusters_from_replication_group\",\n\"arguments\": {\n\"replication_group_id\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: count-cache-clusters-from-replication-group\nprovider:\narguments:\nreplication_group_id: ''\nfunc: count_cache_clusters_from_replication_group\nmodule: chaosaws.elasticache.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/aws/#delete_cache_clusters","title":"<code>delete_cache_clusters</code>","text":"Type action Module chaosaws.elasticache.actions Name delete_cache_clusters Return list <p>Deletes one or more cache clusters and creates a final snapshot</p> <p>: cluster_ids: list: a list of one or more cache cluster ids final_snapshot_id: str: an identifier to give the final snapshot</p> <p>Signature:</p> <pre><code>def delete_cache_clusters(\n        cluster_ids: List[str],\n        final_snapshot_id: str = None,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; List[Dict[str, Any]]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required cluster_ids list Yes final_snapshot_id string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"delete-cache-clusters\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.elasticache.actions\",\n\"func\": \"delete_cache_clusters\",\n\"arguments\": {\n\"cluster_ids\": []\n}\n}\n}\n</code></pre> <pre><code>name: delete-cache-clusters\nprovider:\narguments:\ncluster_ids: []\nfunc: delete_cache_clusters\nmodule: chaosaws.elasticache.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/aws/#delete_replication_groups","title":"<code>delete_replication_groups</code>","text":"Type action Module chaosaws.elasticache.actions Name delete_replication_groups Return list <p>Deletes one or more replication groups and creates a final snapshot</p> <p>:     group_ids: list: a list of one or more replication group ids     final_snapshot_id: str: an identifier to give the final snapshot     retain_primary_cluster: bool (default: True): delete only the read    replicas associated to the replication group, not the primary</p> <p>Signature:</p> <pre><code>def delete_replication_groups(\n        group_ids: List[str],\n        final_snapshot_id: str = None,\n        retain_primary_cluster: bool = True,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; List[Dict[str, Any]]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required group_ids list Yes final_snapshot_id string null No retain_primary_cluster boolean true No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"delete-replication-groups\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.elasticache.actions\",\n\"func\": \"delete_replication_groups\",\n\"arguments\": {\n\"group_ids\": []\n}\n}\n}\n</code></pre> <pre><code>name: delete-replication-groups\nprovider:\narguments:\ngroup_ids: []\nfunc: delete_replication_groups\nmodule: chaosaws.elasticache.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/aws/#describe_cache_cluster","title":"<code>describe_cache_cluster</code>","text":"Type probe Module chaosaws.elasticache.probes Name describe_cache_cluster Return mapping <p>Returns cache cluster data for given cluster</p> <p>:param cluster_id: str: the name of the cache cluster :param show_node_info: bool: show associated nodes (default: False) :param configuration: Configuration :param secrets: Secrets</p> <p>:example: {     \u201ctype\u201d: \u201cprobe\u201d,     \u201cname\u201d: \u201cvalidate cache cluster engine\u201d,     \u201ctolerance\u201d: {    \u201ctype\u201d: \u201cjsonpath\u201d,    \u201cpath\u201d: $.CacheClusters[0].Engine,    \u201cexpect\u201d: \u201cmemcached\u201d     },     \u201cprovider\u201d: {    \u201ctype\u201d: \u201cpython\u201d,    \u201cmodule\u201d: \u201cchaosaws.elasticache.probes\u201d,    \u201cfunc\u201d: \u201cdescribe_cache_cluster\u201d,    \u201carguments\u201d: {   \u201ccluster_id\u201d: \u201cMyTestCluster\u201d    }     } }</p> <p>Full list of possible paths can be found: https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/elasticache.html#ElastiCache.Client.describe_cache_clusters</p> <p>Signature:</p> <pre><code>def describe_cache_cluster(\n        cluster_id: str,\n        show_node_info: bool = False,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required cluster_id string Yes show_node_info boolean false No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"describe-cache-cluster\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.elasticache.probes\",\n\"func\": \"describe_cache_cluster\",\n\"arguments\": {\n\"cluster_id\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: describe-cache-cluster\nprovider:\narguments:\ncluster_id: ''\nfunc: describe_cache_cluster\nmodule: chaosaws.elasticache.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/aws/#get_cache_node_count","title":"<code>get_cache_node_count</code>","text":"Type probe Module chaosaws.elasticache.probes Name get_cache_node_count Return integer <p>Returns the number of cache nodes associated to the cluster</p> <p>:param cluster_id: str: the name of the cache cluster :param configuration: Configuration :param secrets: Secrets</p> <p>:example: {     \u201ctype\u201d: \u201cprobe\u201d,     \u201cname\u201d: \u201cvalidate cache node count\u201d,     \u201ctolerance\u201d: 3,     \u201cprovider\u201d: {    \u201ctype\u201d: \u201cpython\u201d,    \u201cmodule\u201d: \u201cchaosaws.elasticache.probes\u201d,    \u201cfunc\u201d: \u201cget_cache_node_count\u201d,    \u201carguments\u201d: {   \u201ccluster_id\u201d: \u201cMyTestCluster\u201d    }     } }</p> <p>Signature:</p> <pre><code>def get_cache_node_count(cluster_id: str,\n                         configuration: Dict[str, Dict[str, str]] = None,\n                         secrets: Dict[str, Dict[str, str]] = None) -&gt; int:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required cluster_id string Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"get-cache-node-count\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.elasticache.probes\",\n\"func\": \"get_cache_node_count\",\n\"arguments\": {\n\"cluster_id\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: get-cache-node-count\nprovider:\narguments:\ncluster_id: ''\nfunc: get_cache_node_count\nmodule: chaosaws.elasticache.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/aws/#get_cache_node_status","title":"<code>get_cache_node_status</code>","text":"Type probe Module chaosaws.elasticache.probes Name get_cache_node_status Return string <p>Returns the status of the given cache cluster</p> <p>:param cluster_id: str: the name of the cache cluster :param configuration: Configuration :param secrets: Secrets</p> <p>:example: {     \u201ctype\u201d: \u201cprobe\u201d,     \u201cname\u201d: \u201cvalidate cache node status\u201d,     \u201ctolerance\u201d: \u201cavailable\u201d,     \u201cprovider\u201d: {    \u201ctype\u201d: \u201cpython\u201d,    \u201cmodule\u201d: \u201cchaosaws.elasticache.probes\u201d,    \u201cfunc\u201d: \u201cget_cache_node_status\u201d,    \u201carguments\u201d: {   \u201ccluster_id\u201d: \u201cMyTestCluster\u201d    }     } }</p> <p>Signature:</p> <pre><code>def get_cache_node_status(cluster_id: str,\n                          configuration: Dict[str, Dict[str, str]] = None,\n                          secrets: Dict[str, Dict[str, str]] = None) -&gt; str:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required cluster_id string Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"get-cache-node-status\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.elasticache.probes\",\n\"func\": \"get_cache_node_status\",\n\"arguments\": {\n\"cluster_id\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: get-cache-node-status\nprovider:\narguments:\ncluster_id: ''\nfunc: get_cache_node_status\nmodule: chaosaws.elasticache.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/aws/#reboot_cache_clusters","title":"<code>reboot_cache_clusters</code>","text":"Type action Module chaosaws.elasticache.actions Name reboot_cache_clusters Return list <p>Reboots one or more nodes in a cache cluster. If no node ids are supplied, all nodes in the cluster will be rebooted</p> <p>:     cluster_ids: list: a list of one or more cache cluster ids     node_ids: list: a list of one or more node ids in to the cluster</p> <p>Signature:</p> <pre><code>def reboot_cache_clusters(\n        cluster_ids: List[str],\n        node_ids: List[str] = None,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; List[Dict[str, Any]]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required cluster_ids list Yes node_ids list null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"reboot-cache-clusters\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.elasticache.actions\",\n\"func\": \"reboot_cache_clusters\",\n\"arguments\": {\n\"cluster_ids\": []\n}\n}\n}\n</code></pre> <pre><code>name: reboot-cache-clusters\nprovider:\narguments:\ncluster_ids: []\nfunc: reboot_cache_clusters\nmodule: chaosaws.elasticache.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/aws/#test_failover","title":"<code>test_failover</code>","text":"Type action Module chaosaws.elasticache.actions Name test_failover Return list <p>Tests automatic failover on a single shard (also known as node groups). You can only invoke test_failover for no more than 5 shards in any rolling 24-hour period.</p> <p>:     replication_group_id: str: the name of the replication group    (also known as cluster) whose automatic failover is being    tested by this operation.     node_group_id: str: the name of the node group (also known as shard)    in this replication group on which automatic failover is to be tested.</p> <p>Signature:</p> <pre><code>def test_failover(\n        replication_group_id: str,\n        node_group_id: str,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; List[Dict[str, Any]]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required replication_group_id string Yes node_group_id string Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"test-failover\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.elasticache.actions\",\n\"func\": \"test_failover\",\n\"arguments\": {\n\"replication_group_id\": \"\",\n\"node_group_id\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: test-failover\nprovider:\narguments:\nnode_group_id: ''\nreplication_group_id: ''\nfunc: test_failover\nmodule: chaosaws.elasticache.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/aws/#elbv2","title":"elbv2","text":""},{"location":"drivers/aws/#all_targets_healthy","title":"<code>all_targets_healthy</code>","text":"Type probe Module chaosaws.elbv2.probes Name all_targets_healthy Return mapping <p>Return true/false based on if all targets for listed target groups are healthy</p> <p>Signature:</p> <pre><code>def all_targets_healthy(\n        tg_names: List[str],\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required tg_names list Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"all-targets-healthy\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.elbv2.probes\",\n\"func\": \"all_targets_healthy\",\n\"arguments\": {\n\"tg_names\": []\n}\n}\n}\n</code></pre> <pre><code>name: all-targets-healthy\nprovider:\narguments:\ntg_names: []\nfunc: all_targets_healthy\nmodule: chaosaws.elbv2.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/aws/#delete_load_balancer","title":"<code>delete_load_balancer</code>","text":"Type action Module chaosaws.elbv2.actions Name delete_load_balancer Return None <p>Deletes the provided load balancer(s).</p> <p>:     - load_balancer_names: a list of load balancer names</p> <p>Signature:</p> <pre><code>def delete_load_balancer(load_balancer_names: List[str],\n                         configuration: Dict[str, Dict[str, str]] = None,\n                         secrets: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required load_balancer_names list Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"delete-load-balancer\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.elbv2.actions\",\n\"func\": \"delete_load_balancer\",\n\"arguments\": {\n\"load_balancer_names\": []\n}\n}\n}\n</code></pre> <pre><code>name: delete-load-balancer\nprovider:\narguments:\nload_balancer_names: []\nfunc: delete_load_balancer\nmodule: chaosaws.elbv2.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/aws/#deregister_target","title":"<code>deregister_target</code>","text":"Type action Module chaosaws.elbv2.actions Name deregister_target Return mapping <p>Deregisters one random target from target group</p> <p>Signature:</p> <pre><code>def deregister_target(\n        tg_name: str,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required tg_name string Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"deregister-target\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.elbv2.actions\",\n\"func\": \"deregister_target\",\n\"arguments\": {\n\"tg_name\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: deregister-target\nprovider:\narguments:\ntg_name: ''\nfunc: deregister_target\nmodule: chaosaws.elbv2.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/aws/#enable_access_log","title":"<code>enable_access_log</code>","text":"Type action Module chaosaws.elbv2.actions Name enable_access_log Return boolean <p>Enable or Disable Access logs of ELB</p> <p>Signature:</p> <pre><code>def enable_access_log(load_balancer_arn: str,\n                      enable: bool = False,\n                      bucket_name: str = None,\n                      configuration: Dict[str, Dict[str, str]] = None,\n                      secrets: Dict[str, Dict[str, str]] = None) -&gt; bool:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required load_balancer_arn string Yes enable boolean false No bucket_name string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"enable-access-log\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.elbv2.actions\",\n\"func\": \"enable_access_log\",\n\"arguments\": {\n\"load_balancer_arn\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: enable-access-log\nprovider:\narguments:\nload_balancer_arn: ''\nfunc: enable_access_log\nmodule: chaosaws.elbv2.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/aws/#is_access_log_enabled","title":"<code>is_access_log_enabled</code>","text":"Type probe Module chaosaws.elbv2.probes Name is_access_log_enabled Return mapping <p>Verify access logging enabled on load balancer</p> <p>Signature:</p> <pre><code>def is_access_log_enabled(\n        load_balancer_arn: str,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required load_balancer_arn string Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"is-access-log-enabled\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.elbv2.probes\",\n\"func\": \"is_access_log_enabled\",\n\"arguments\": {\n\"load_balancer_arn\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: is-access-log-enabled\nprovider:\narguments:\nload_balancer_arn: ''\nfunc: is_access_log_enabled\nmodule: chaosaws.elbv2.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/aws/#set_security_groups","title":"<code>set_security_groups</code>","text":"Type action Module chaosaws.elbv2.actions Name set_security_groups Return list <p>Changes the security groups for the specified load balancer(s). This action will replace the existing security groups on an application load balancer with the specified security groups.</p> <p>:     - load_balancer_names: a list of load balancer names     - security_group_ids: a list of security group ids</p> <p>returns:     [    {   \u2018LoadBalancerArn\u2019: \u2018string\u2019,   \u2018SecurityGroupIds\u2019: [\u2018sg-0000000\u2019, \u2018sg-0000001\u2019]    },    \u2026     ]</p> <p>Signature:</p> <pre><code>def set_security_groups(\n        load_balancer_names: List[str],\n        security_group_ids: List[str],\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; List[Dict[str, Any]]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required load_balancer_names list Yes security_group_ids list Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"set-security-groups\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.elbv2.actions\",\n\"func\": \"set_security_groups\",\n\"arguments\": {\n\"load_balancer_names\": [],\n\"security_group_ids\": []\n}\n}\n}\n</code></pre> <pre><code>name: set-security-groups\nprovider:\narguments:\nload_balancer_names: []\nsecurity_group_ids: []\nfunc: set_security_groups\nmodule: chaosaws.elbv2.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/aws/#set_subnets","title":"<code>set_subnets</code>","text":"Type action Module chaosaws.elbv2.actions Name set_subnets Return list <p>Changes the subnets for the specified application load balancer(s) This action will replace the existing security groups on an application load balancer with the specified security groups.</p> <p>:     - load_balancer_names: a list of load balancer names     - subnet_ids: a list of subnet ids</p> <p>returns:     [    {   \u2018LoadBalancerArn\u2019: \u2018string\u2019,   \u2018AvailabilityZones\u2019: {  \u2018ZoneName\u2019: \u2018string\u2019,  \u2018SubnetId\u2019: \u2018string\u2019,  \u2018LoadBalancerAddresses\u2019: [ {     \u2018IpAddress\u2019: \u2018string\u2019,     \u2018AllocationId\u2019: \u2018string\u2019 }  ]   }    },    \u2026     ]</p> <p>Signature:</p> <pre><code>def set_subnets(\n        load_balancer_names: List[str],\n        subnet_ids: List[str],\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; List[Dict[str, Any]]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required load_balancer_names list Yes subnet_ids list Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"set-subnets\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.elbv2.actions\",\n\"func\": \"set_subnets\",\n\"arguments\": {\n\"load_balancer_names\": [],\n\"subnet_ids\": []\n}\n}\n}\n</code></pre> <pre><code>name: set-subnets\nprovider:\narguments:\nload_balancer_names: []\nsubnet_ids: []\nfunc: set_subnets\nmodule: chaosaws.elbv2.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/aws/#targets_health_count","title":"<code>targets_health_count</code>","text":"Type probe Module chaosaws.elbv2.probes Name targets_health_count Return mapping <p>Count of healthy/unhealthy targets per targetgroup</p> <p>Signature:</p> <pre><code>def targets_health_count(\n        tg_names: List[str],\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required tg_names list Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"targets-health-count\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.elbv2.probes\",\n\"func\": \"targets_health_count\",\n\"arguments\": {\n\"tg_names\": []\n}\n}\n}\n</code></pre> <pre><code>name: targets-health-count\nprovider:\narguments:\ntg_names: []\nfunc: targets_health_count\nmodule: chaosaws.elbv2.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/aws/#emr","title":"emr","text":""},{"location":"drivers/aws/#describe_cluster_2","title":"<code>describe_cluster</code>","text":"Type probe Module chaosaws.emr.probes Name describe_cluster Return mapping <p>Describe a single EMR cluster</p> <p>:param cluster_id: The cluster id :param configuration: access values used by actions/probes :param secrets: values that need to be passed on to actions/probes :return: Dict[str, Any]</p> <p>Signature:</p> <pre><code>def describe_cluster(\n        cluster_id: str,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required cluster_id string Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"describe-cluster\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.emr.probes\",\n\"func\": \"describe_cluster\",\n\"arguments\": {\n\"cluster_id\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: describe-cluster\nprovider:\narguments:\ncluster_id: ''\nfunc: describe_cluster\nmodule: chaosaws.emr.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/aws/#describe_instance_fleet","title":"<code>describe_instance_fleet</code>","text":"Type probe Module chaosaws.emr.probes Name describe_instance_fleet Return mapping <p>Describe a single EMR instance fleet</p> <p>:param cluster_id: The cluster id :param fleet_id: The instance fleet id :param configuration: access values used by actions/probes :param secrets: values that need to be passed on to actions/probes :return: Dict[str, Any]</p> <p>Signature:</p> <pre><code>def describe_instance_fleet(\n        cluster_id: str,\n        fleet_id: str,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required cluster_id string Yes fleet_id string Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"describe-instance-fleet\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.emr.probes\",\n\"func\": \"describe_instance_fleet\",\n\"arguments\": {\n\"cluster_id\": \"\",\n\"fleet_id\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: describe-instance-fleet\nprovider:\narguments:\ncluster_id: ''\nfleet_id: ''\nfunc: describe_instance_fleet\nmodule: chaosaws.emr.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/aws/#describe_instance_group","title":"<code>describe_instance_group</code>","text":"Type probe Module chaosaws.emr.probes Name describe_instance_group Return mapping <p>Describe a single EMR instance group</p> <p>:param cluster_id: The cluster id :param group_id: The instance group id :param configuration: access values used by actions/probes :param secrets: values that need to be passed on to actions/probes :return: Dict[str, Any]</p> <p>Signature:</p> <pre><code>def describe_instance_group(\n        cluster_id: str,\n        group_id: str,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required cluster_id string Yes group_id string Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"describe-instance-group\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.emr.probes\",\n\"func\": \"describe_instance_group\",\n\"arguments\": {\n\"cluster_id\": \"\",\n\"group_id\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: describe-instance-group\nprovider:\narguments:\ncluster_id: ''\ngroup_id: ''\nfunc: describe_instance_group\nmodule: chaosaws.emr.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/aws/#list_cluster_fleet_instances","title":"<code>list_cluster_fleet_instances</code>","text":"Type probe Module chaosaws.emr.probes Name list_cluster_fleet_instances Return mapping <p>Get a list of instance fleet instances associated to the EMR cluster</p> <p>:param cluster_id: The cluster id :param fleet_id: The instance fleet id :param fleet_type: The instance fleet type :param instance_states: A list of instance states to include :param configuration: access values used by actions/probes :param secrets: values that need to be passed on to actions/probes :return: Dict[str, Any]</p> <p>Signature:</p> <pre><code>def list_cluster_fleet_instances(\n        cluster_id: str,\n        fleet_id: str,\n        fleet_type: str = None,\n        instance_states: List[str] = None,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required cluster_id string Yes fleet_id string Yes fleet_type string null No instance_states list null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"list-cluster-fleet-instances\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.emr.probes\",\n\"func\": \"list_cluster_fleet_instances\",\n\"arguments\": {\n\"cluster_id\": \"\",\n\"fleet_id\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: list-cluster-fleet-instances\nprovider:\narguments:\ncluster_id: ''\nfleet_id: ''\nfunc: list_cluster_fleet_instances\nmodule: chaosaws.emr.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/aws/#list_cluster_group_instances","title":"<code>list_cluster_group_instances</code>","text":"Type probe Module chaosaws.emr.probes Name list_cluster_group_instances Return mapping <p>Get a list of instance group instances associated to the EMR cluster</p> <p>:param cluster_id: The cluster id :param group_id: The instance group id :param group_type: The instance group type :param instance_states: A list of instance states to include :param configuration: access values used by actions/probes :param secrets: values that need to be passed on to actions/probes :return: Dict[str, Any]</p> <p>Signature:</p> <pre><code>def list_cluster_group_instances(\n        cluster_id: str,\n        group_id: str,\n        group_type: str = None,\n        instance_states: List[str] = None,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required cluster_id string Yes group_id string Yes group_type string null No instance_states list null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"list-cluster-group-instances\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.emr.probes\",\n\"func\": \"list_cluster_group_instances\",\n\"arguments\": {\n\"cluster_id\": \"\",\n\"group_id\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: list-cluster-group-instances\nprovider:\narguments:\ncluster_id: ''\ngroup_id: ''\nfunc: list_cluster_group_instances\nmodule: chaosaws.emr.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/aws/#modify_cluster","title":"<code>modify_cluster</code>","text":"Type action Module chaosaws.emr.actions Name modify_cluster Return mapping <p>Set the step concurrency level on the provided cluster</p> <p>:param cluster_id: The cluster id :param concurrency: The number of steps to execute concurrently (1 - 256) :param configuration: access values used by actions/probes :param secrets: values that need to be passed on to actions/probes :return: Dict[str, Any]</p> <p>Signature:</p> <pre><code>def modify_cluster(\n        cluster_id: str,\n        concurrency: int,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required cluster_id string Yes concurrency integer Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"modify-cluster\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.emr.actions\",\n\"func\": \"modify_cluster\",\n\"arguments\": {\n\"cluster_id\": \"\",\n\"concurrency\": 0\n}\n}\n}\n</code></pre> <pre><code>name: modify-cluster\nprovider:\narguments:\ncluster_id: ''\nconcurrency: 0\nfunc: modify_cluster\nmodule: chaosaws.emr.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/aws/#modify_instance_fleet","title":"<code>modify_instance_fleet</code>","text":"Type action Module chaosaws.emr.actions Name modify_instance_fleet Return mapping <p>Modify the on-demand and spot capacities for an instance fleet</p> <p>:param cluster_id: The cluster id :param fleet_id: The instance fleet id :param on_demand_capacity: Target capacity of on-demand units :param spot_capacity: Target capacity of spot units :param configuration: access values used by actions/probes :param secrets: values that need to be passed on to actions/probes :return: Dict[str, Any]</p> <p>Signature:</p> <pre><code>def modify_instance_fleet(\n        cluster_id: str,\n        fleet_id: str,\n        on_demand_capacity: int = None,\n        spot_capacity: int = None,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required cluster_id string Yes fleet_id string Yes on_demand_capacity integer null No spot_capacity integer null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"modify-instance-fleet\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.emr.actions\",\n\"func\": \"modify_instance_fleet\",\n\"arguments\": {\n\"cluster_id\": \"\",\n\"fleet_id\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: modify-instance-fleet\nprovider:\narguments:\ncluster_id: ''\nfleet_id: ''\nfunc: modify_instance_fleet\nmodule: chaosaws.emr.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/aws/#modify_instance_groups_instance_count","title":"<code>modify_instance_groups_instance_count</code>","text":"Type action Module chaosaws.emr.actions Name modify_instance_groups_instance_count Return mapping <p>Modify the number of instances in an instance group</p> <p>:param cluster_id: The cluster id :param group_id: The instance group id :param instance_count: The target size for the instance group :param configuration: access values used by actions/probes :param secrets: values that need to be passed on to actions/probes :return: Dict[str, Any]</p> <p>Signature:</p> <pre><code>def modify_instance_groups_instance_count(\n        cluster_id: str,\n        group_id: str,\n        instance_count: int,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required cluster_id string Yes group_id string Yes instance_count integer Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"modify-instance-groups-instance-count\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.emr.actions\",\n\"func\": \"modify_instance_groups_instance_count\",\n\"arguments\": {\n\"cluster_id\": \"\",\n\"group_id\": \"\",\n\"instance_count\": 0\n}\n}\n}\n</code></pre> <pre><code>name: modify-instance-groups-instance-count\nprovider:\narguments:\ncluster_id: ''\ngroup_id: ''\ninstance_count: 0\nfunc: modify_instance_groups_instance_count\nmodule: chaosaws.emr.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/aws/#modify_instance_groups_shrink_policy","title":"<code>modify_instance_groups_shrink_policy</code>","text":"Type action Module chaosaws.emr.actions Name modify_instance_groups_shrink_policy Return mapping <p>Modify an instance groups shrink operations</p> <p>:param cluster_id: The cluster id :param group_id: The instance group id :param decommission_timeout: Timeout for decommissioning an instance :param terminate_instances: Instance id list to terminate when shrinking :param protect_instances: Instance id list to protect when shrinking :param termination_timeout: Override for list of instances to terminate :param configuration: access values used by actions/probes :param secrets: values that need to be passed on to actions/probes :return: Dict[str, Any]</p> <p>Signature:</p> <pre><code>def modify_instance_groups_shrink_policy(\n        cluster_id: str,\n        group_id: str,\n        decommission_timeout: int = None,\n        terminate_instances: List[str] = None,\n        protect_instances: List[str] = None,\n        termination_timeout: int = None,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required cluster_id string Yes group_id string Yes decommission_timeout integer null No terminate_instances list null No protect_instances list null No termination_timeout integer null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"modify-instance-groups-shrink-policy\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.emr.actions\",\n\"func\": \"modify_instance_groups_shrink_policy\",\n\"arguments\": {\n\"cluster_id\": \"\",\n\"group_id\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: modify-instance-groups-shrink-policy\nprovider:\narguments:\ncluster_id: ''\ngroup_id: ''\nfunc: modify_instance_groups_shrink_policy\nmodule: chaosaws.emr.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/aws/#fis","title":"fis","text":""},{"location":"drivers/aws/#get_experiment","title":"<code>get_experiment</code>","text":"Type probe Module chaosaws.fis.probes Name get_experiment Return mapping <p>Gets information about the specified experiment.</p> <p>:param experiment_id: str representing the id of the experiment to fetch information     of :param configuration: Configuration object representing the CTK Configuration :param secrets: Secret object representing the CTK Secrets :returns: AWSResponse representing the response from FIS upon retrieving the     experiment information</p> <p>get_experiment( \u2026    experiment_id=\u201dEXPTUCK2dxepXgkR38\u201d \u2026 ) {\u2018ResponseMetadata\u2019: {\u2018RequestId\u2019: \u20180665fe39-2213-400b-b7ff-5f1ab9b7a5ea\u2019, \u2018HTTPStatusCode\u2019: 200, \u2018HTTPHeaders\u2019: {\u2018date\u2019: \u2018Fri, 20 Aug 2021 11:08:27 GMT\u2019, \u2026 \u2018experiment\u2019: {\u2018id\u2019: \u2018EXPTUCK2dxepXgkR38\u2019, \u2018experimentTemplateId\u2019: \u2018EXT6oWVA1WrLNy4XS\u2019, \u2026 }</p> <p>Signature:</p> <pre><code>def get_experiment(\n        experiment_id: str,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required experiment_id string Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"get-experiment\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.fis.probes\",\n\"func\": \"get_experiment\",\n\"arguments\": {\n\"experiment_id\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: get-experiment\nprovider:\narguments:\nexperiment_id: ''\nfunc: get_experiment\nmodule: chaosaws.fis.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/aws/#start_experiment","title":"<code>start_experiment</code>","text":"Type action Module chaosaws.fis.actions Name start_experiment Return mapping <p>Starts running an experiment from the specified experiment template.</p> <p>:param experiment_template_id: str representing the id of the experiment template     to run :param client_token: str representing the unique identifier for this experiment run.     If a value is not provided, boto3 generates one for you :param tags: Dict[str, str] representing tags to apply to the experiment that is     started :param configuration: Configuration object representing the CTK Configuration :param secrets: Secret object representing the CTK Secrets :returns: AWSResponse representing the response from FIS upon starting the     experiment</p> <p>start_experiment( \u2026experiment_template_id=\u201dEXT6oWVA1WrLNy4XS\u201d \u2026 ) { \u2018ResponseMetadata\u2019: {\u2018RequestId\u2019: \u20181ceaedae-5897-4b64-9ade-9e94449f1262\u2019, \u2018HTTPStatusCode\u2019: 200, \u2018HTTPHeaders\u2019: {\u2018date\u2019: \u2018Thu, 12 Aug 2021 14:21:19 GMT\u2019, \u2026 \u2018experiment\u2019: {\u2018id\u2019: \u2018EXPXDPecuQBFiZs1Jz\u2019, \u2018experimentTemplateId\u2019: \u2018EXT6oWVA1WrLNy4XS\u2019, \u2026 }</p> <p>start_experiment( \u2026experiment_template_id=\u201dEXT6oWVA1WrLNy4XS\u201d, \u2026client_token=\u201dmy-unique-token\u201d, \u2026tags={\u201ca-key\u201d: \u201ca-value\u201d} \u2026 )</p> <p>Signature:</p> <pre><code>def start_experiment(\n        experiment_template_id: str,\n        client_token: str = None,\n        tags: Dict[str, str] = None,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required experiment_template_id string Yes client_token string null No tags mapping null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"start-experiment\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.fis.actions\",\n\"func\": \"start_experiment\",\n\"arguments\": {\n\"experiment_template_id\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: start-experiment\nprovider:\narguments:\nexperiment_template_id: ''\nfunc: start_experiment\nmodule: chaosaws.fis.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/aws/#stop_experiment","title":"<code>stop_experiment</code>","text":"Type action Module chaosaws.fis.actions Name stop_experiment Return mapping <p>Stops the specified experiment.</p> <p>:param experiment_id: str representing the running experiment to stop :param configuration: Configuration object representing the CTK Configuration :param secrets: Secret object representing the CTK Secrets :returns: AWSResponse representing the response from FIS upon stopping the     experiment</p> <p>stop_experiment(experiment_id=\u201dEXPTUCK2dxepXgkR38\u201d) {\u2018ResponseMetadata\u2019: {\u2018RequestId\u2019: \u2018e5e9f9a9-f4d0-4d72-8704-1f26cc8b6ad6\u2019, \u2018HTTPStatusCode\u2019: 200, \u2018HTTPHeaders\u2019: {\u2018date\u2019: \u2018Fri, 13 Aug 2021 09:12:17 GMT\u2019, \u2026\u2019experiment\u2019: {\u2018id\u2019: \u2018EXPTUCK2dxepXgkR38\u2019, \u2018experimentTemplateId\u2019: \u2018EXT6oWVA1WrLNy4XS\u2019, \u2026 }</p> <p>Signature:</p> <pre><code>def stop_experiment(\n        experiment_id: str,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required experiment_id string Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"stop-experiment\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.fis.actions\",\n\"func\": \"stop_experiment\",\n\"arguments\": {\n\"experiment_id\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: stop-experiment\nprovider:\narguments:\nexperiment_id: ''\nfunc: stop_experiment\nmodule: chaosaws.fis.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/aws/#iam","title":"iam","text":""},{"location":"drivers/aws/#attach_role_policy","title":"<code>attach_role_policy</code>","text":"Type action Module chaosaws.iam.actions Name attach_role_policy Return mapping <p>Attach a role to a policy.</p> <p>Signature:</p> <pre><code>def attach_role_policy(\n        arn: str,\n        role_name: str,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required arn string Yes role_name string Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"attach-role-policy\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.iam.actions\",\n\"func\": \"attach_role_policy\",\n\"arguments\": {\n\"arn\": \"\",\n\"role_name\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: attach-role-policy\nprovider:\narguments:\narn: ''\nrole_name: ''\nfunc: attach_role_policy\nmodule: chaosaws.iam.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/aws/#create_policy","title":"<code>create_policy</code>","text":"Type action Module chaosaws.iam.actions Name create_policy Return mapping <p>Create a new IAM policy</p> <p>Signature:</p> <pre><code>def create_policy(name: str,\n                  policy: Dict[str, Any],\n                  path: str = '/',\n                  description: str = '',\n                  configuration: Dict[str, Dict[str, str]] = None,\n                  secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required name string Yes policy mapping Yes path string \u201d/\u201d No description string \u201d\u201c No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"create-policy\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.iam.actions\",\n\"func\": \"create_policy\",\n\"arguments\": {\n\"name\": \"\",\n\"policy\": {}\n}\n}\n}\n</code></pre> <pre><code>name: create-policy\nprovider:\narguments:\nname: ''\npolicy: {}\nfunc: create_policy\nmodule: chaosaws.iam.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/aws/#detach_role_policy","title":"<code>detach_role_policy</code>","text":"Type action Module chaosaws.iam.actions Name detach_role_policy Return mapping <p>Detach a role from a policy.</p> <p>Signature:</p> <pre><code>def detach_role_policy(\n        arn: str,\n        role_name: str,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required arn string Yes role_name string Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"detach-role-policy\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.iam.actions\",\n\"func\": \"detach_role_policy\",\n\"arguments\": {\n\"arn\": \"\",\n\"role_name\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: detach-role-policy\nprovider:\narguments:\narn: ''\nrole_name: ''\nfunc: detach_role_policy\nmodule: chaosaws.iam.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/aws/#get_policy","title":"<code>get_policy</code>","text":"Type probe Module chaosaws.iam.probes Name get_policy Return boolean <p>Get a policy by its ARN</p> <p>Signature:</p> <pre><code>def get_policy(arn: str,\n               configuration: Dict[str, Dict[str, str]] = None,\n               secrets: Dict[str, Dict[str, str]] = None) -&gt; bool:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required arn string Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"get-policy\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.iam.probes\",\n\"func\": \"get_policy\",\n\"arguments\": {\n\"arn\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: get-policy\nprovider:\narguments:\narn: ''\nfunc: get_policy\nmodule: chaosaws.iam.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/aws/#rds","title":"rds","text":""},{"location":"drivers/aws/#cluster_membership_count","title":"<code>cluster_membership_count</code>","text":"Type probe Module chaosaws.rds.probes Name cluster_membership_count Return integer <p>Signature:</p> <pre><code>def cluster_membership_count(cluster_id: str,\n                             configuration: Dict[str, Dict[str, str]] = None,\n                             secrets: Dict[str, Dict[str, str]] = None) -&gt; int:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required cluster_id string Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"cluster-membership-count\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.rds.probes\",\n\"func\": \"cluster_membership_count\",\n\"arguments\": {\n\"cluster_id\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: cluster-membership-count\nprovider:\narguments:\ncluster_id: ''\nfunc: cluster_membership_count\nmodule: chaosaws.rds.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/aws/#cluster_status","title":"<code>cluster_status</code>","text":"Type probe Module chaosaws.rds.probes Name cluster_status Return Union[str, List[str]] <p>Signature:</p> <pre><code>def cluster_status(\n        cluster_id: str = None,\n        filters: List[Dict[str, Any]] = None,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Union[str, List[str]]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required cluster_id string null No filters list null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"cluster-status\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.rds.probes\",\n\"func\": \"cluster_status\"\n}\n}\n</code></pre> <pre><code>name: cluster-status\nprovider:\nfunc: cluster_status\nmodule: chaosaws.rds.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/aws/#delete_db_cluster","title":"<code>delete_db_cluster</code>","text":"Type action Module chaosaws.rds.actions Name delete_db_cluster Return mapping <p>Deletes an Aurora DB cluster</p> <ul> <li>db_cluster_identifier: the identifier of the cluster to delete</li> <li>skip_final_snapshot: boolean (true): determines whether or not to     perform a final snapshot of the cluster before deletion</li> <li>db_snapshot_identifier: the identifier to give the final rds snapshot</li> </ul> <p>Signature:</p> <pre><code>def delete_db_cluster(\n        db_cluster_identifier: str,\n        skip_final_snapshot: bool = True,\n        db_snapshot_identifier: str = None,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required db_cluster_identifier string Yes skip_final_snapshot boolean true No db_snapshot_identifier string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"delete-db-cluster\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.rds.actions\",\n\"func\": \"delete_db_cluster\",\n\"arguments\": {\n\"db_cluster_identifier\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: delete-db-cluster\nprovider:\narguments:\ndb_cluster_identifier: ''\nfunc: delete_db_cluster\nmodule: chaosaws.rds.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/aws/#delete_db_cluster_endpoint","title":"<code>delete_db_cluster_endpoint</code>","text":"Type action Module chaosaws.rds.actions Name delete_db_cluster_endpoint Return mapping <p>Deletes the custom endpoint of an Aurora cluster</p> <ul> <li>db_cluster_identifier: the identifier of the cluster to delete the     endpoint from</li> </ul> <p>Signature:</p> <pre><code>def delete_db_cluster_endpoint(\n        db_cluster_identifier: str,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required db_cluster_identifier string Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"delete-db-cluster-endpoint\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.rds.actions\",\n\"func\": \"delete_db_cluster_endpoint\",\n\"arguments\": {\n\"db_cluster_identifier\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: delete-db-cluster-endpoint\nprovider:\narguments:\ndb_cluster_identifier: ''\nfunc: delete_db_cluster_endpoint\nmodule: chaosaws.rds.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/aws/#delete_db_instance","title":"<code>delete_db_instance</code>","text":"Type action Module chaosaws.rds.actions Name delete_db_instance Return mapping <p>Deletes a RDS instance</p> <ul> <li>db_instance_identifier: the identifier of the RDS instance to delete</li> <li>skip_final_snapshot: boolean (true): determines whether or not to     perform a final snapshot of the rds instance before deletion</li> <li>db_snapshot_identifier: the identifier to give the final rds snapshot</li> <li>delete_automated_backups: boolean (true): determines if the automated     backups of the rds instance are deleted immediately</li> </ul> <p>Signature:</p> <pre><code>def delete_db_instance(\n        db_instance_identifier: str,\n        skip_final_snapshot: bool = True,\n        db_snapshot_identifier: str = None,\n        delete_automated_backups: bool = True,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required db_instance_identifier string Yes skip_final_snapshot boolean true No db_snapshot_identifier string null No delete_automated_backups boolean true No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"delete-db-instance\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.rds.actions\",\n\"func\": \"delete_db_instance\",\n\"arguments\": {\n\"db_instance_identifier\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: delete-db-instance\nprovider:\narguments:\ndb_instance_identifier: ''\nfunc: delete_db_instance\nmodule: chaosaws.rds.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/aws/#failover_db_cluster","title":"<code>failover_db_cluster</code>","text":"Type action Module chaosaws.rds.actions Name failover_db_cluster Return mapping <p>Forces a failover for a DB cluster.</p> <p>Signature:</p> <pre><code>def failover_db_cluster(\n        db_cluster_identifier: str,\n        target_db_instance_identifier: str = None,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required db_cluster_identifier string Yes target_db_instance_identifier string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"failover-db-cluster\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.rds.actions\",\n\"func\": \"failover_db_cluster\",\n\"arguments\": {\n\"db_cluster_identifier\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: failover-db-cluster\nprovider:\narguments:\ndb_cluster_identifier: ''\nfunc: failover_db_cluster\nmodule: chaosaws.rds.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/aws/#instance_status","title":"<code>instance_status</code>","text":"Type probe Module chaosaws.rds.probes Name instance_status Return Union[str, List[str]] <p>Signature:</p> <pre><code>def instance_status(\n        instance_id: str = None,\n        filters: List[Dict[str, Any]] = None,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Union[str, List[str]]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required instance_id string null No filters list null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"instance-status\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.rds.probes\",\n\"func\": \"instance_status\"\n}\n}\n</code></pre> <pre><code>name: instance-status\nprovider:\nfunc: instance_status\nmodule: chaosaws.rds.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/aws/#reboot_db_instance","title":"<code>reboot_db_instance</code>","text":"Type action Module chaosaws.rds.actions Name reboot_db_instance Return mapping <p>Forces a reboot of your DB instance.</p> <p>Signature:</p> <pre><code>def reboot_db_instance(\n        db_instance_identifier: str,\n        force_failover: bool = False,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required db_instance_identifier string Yes force_failover boolean false No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"reboot-db-instance\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.rds.actions\",\n\"func\": \"reboot_db_instance\",\n\"arguments\": {\n\"db_instance_identifier\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: reboot-db-instance\nprovider:\narguments:\ndb_instance_identifier: ''\nfunc: reboot_db_instance\nmodule: chaosaws.rds.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/aws/#stop_db_cluster","title":"<code>stop_db_cluster</code>","text":"Type action Module chaosaws.rds.actions Name stop_db_cluster Return mapping <p>Stop a RDS Cluster</p> <ul> <li>db_cluster_identifier: the identifier of the RDS cluster to stop</li> </ul> <p>Signature:</p> <pre><code>def stop_db_cluster(\n        db_cluster_identifier: str,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required db_cluster_identifier string Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"stop-db-cluster\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.rds.actions\",\n\"func\": \"stop_db_cluster\",\n\"arguments\": {\n\"db_cluster_identifier\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: stop-db-cluster\nprovider:\narguments:\ndb_cluster_identifier: ''\nfunc: stop_db_cluster\nmodule: chaosaws.rds.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/aws/#stop_db_instance","title":"<code>stop_db_instance</code>","text":"Type action Module chaosaws.rds.actions Name stop_db_instance Return mapping <p>Stops a RDS DB instance</p> <ul> <li>db_instance_identifier: the instance identifier of the RDS instance</li> <li>db_snapshot_identifier: the name of the DB snapshot made before stop</li> </ul> <p>Signature:</p> <pre><code>def stop_db_instance(\n        db_instance_identifier: str,\n        db_snapshot_identifier: str = None,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required db_instance_identifier string Yes db_snapshot_identifier string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"stop-db-instance\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.rds.actions\",\n\"func\": \"stop_db_instance\",\n\"arguments\": {\n\"db_instance_identifier\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: stop-db-instance\nprovider:\narguments:\ndb_instance_identifier: ''\nfunc: stop_db_instance\nmodule: chaosaws.rds.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/aws/#route53","title":"route53","text":""},{"location":"drivers/aws/#associate_vpc_with_zone","title":"<code>associate_vpc_with_zone</code>","text":"Type action Module chaosaws.route53.actions Name associate_vpc_with_zone Return mapping <p>Associate a VPC with a private hosted zone</p> <p>:param zone_id: The hosted zone id :param vpc_id: The id of the vpc :param vpc_region: The region of the vpc :param configuration: access values used by actions/probes :param comment: a comment regarding the request :param secrets: values that need to be passed on to actions/probes :returns: Dict[str, Any]</p> <p>Signature:</p> <pre><code>def associate_vpc_with_zone(\n        zone_id: str,\n        vpc_id: str,\n        vpc_region: str,\n        comment: str = None,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required zone_id string Yes vpc_id string Yes vpc_region string Yes comment string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"associate-vpc-with-zone\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.route53.actions\",\n\"func\": \"associate_vpc_with_zone\",\n\"arguments\": {\n\"zone_id\": \"\",\n\"vpc_id\": \"\",\n\"vpc_region\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: associate-vpc-with-zone\nprovider:\narguments:\nvpc_id: ''\nvpc_region: ''\nzone_id: ''\nfunc: associate_vpc_with_zone\nmodule: chaosaws.route53.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/aws/#disassociate_vpc_from_zone","title":"<code>disassociate_vpc_from_zone</code>","text":"Type action Module chaosaws.route53.actions Name disassociate_vpc_from_zone Return mapping <p>Remove an association between a VPC and a private hosted zone</p> <p>:param zone_id: The hosted zone id :param vpc_id: The id of the vpc :param vpc_region: The region of the vpc :param comment: A note regarding the disassociation request :param configuration: access values used by actions/probes :param secrets: values that need to be passed on to actions/probes :returns: Dict[str, Any]</p> <p>Signature:</p> <pre><code>def disassociate_vpc_from_zone(\n        zone_id: str,\n        vpc_id: str,\n        vpc_region: str,\n        comment: str = None,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required zone_id string Yes vpc_id string Yes vpc_region string Yes comment string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"disassociate-vpc-from-zone\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.route53.actions\",\n\"func\": \"disassociate_vpc_from_zone\",\n\"arguments\": {\n\"zone_id\": \"\",\n\"vpc_id\": \"\",\n\"vpc_region\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: disassociate-vpc-from-zone\nprovider:\narguments:\nvpc_id: ''\nvpc_region: ''\nzone_id: ''\nfunc: disassociate_vpc_from_zone\nmodule: chaosaws.route53.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/aws/#get_dns_answer","title":"<code>get_dns_answer</code>","text":"Type probe Module chaosaws.route53.probes Name get_dns_answer Return mapping <p>Get the DNS response for the specified record name &amp; type</p> <p>:param zone_id: The route53 zone id :param record_name: The name of the record to get a response for :param record_type: The type of the record set :param configuration: access values used by actions/probes :param secrets: values that need to be passed on to actions/probes :returns: Dict[str, Any]</p> <p>Signature:</p> <pre><code>def get_dns_answer(\n        zone_id: str,\n        record_name: str,\n        record_type: str,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required zone_id string Yes record_name string Yes record_type string Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"get-dns-answer\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.route53.probes\",\n\"func\": \"get_dns_answer\",\n\"arguments\": {\n\"zone_id\": \"\",\n\"record_name\": \"\",\n\"record_type\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: get-dns-answer\nprovider:\narguments:\nrecord_name: ''\nrecord_type: ''\nzone_id: ''\nfunc: get_dns_answer\nmodule: chaosaws.route53.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/aws/#get_health_check_status","title":"<code>get_health_check_status</code>","text":"Type probe Module chaosaws.route53.probes Name get_health_check_status Return mapping <p>Get the status of the specified health check</p> <p>:param check_id: The health check id :param configuration: access values used by actions/probes :param secrets: values that need to be passed on to actions/probes :returns: Dict[str, Any]</p> <p>Signature:</p> <pre><code>def get_health_check_status(\n        check_id: str,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required check_id string Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"get-health-check-status\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.route53.probes\",\n\"func\": \"get_health_check_status\",\n\"arguments\": {\n\"check_id\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: get-health-check-status\nprovider:\narguments:\ncheck_id: ''\nfunc: get_health_check_status\nmodule: chaosaws.route53.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/aws/#get_hosted_zone","title":"<code>get_hosted_zone</code>","text":"Type probe Module chaosaws.route53.probes Name get_hosted_zone Return mapping <p>Pull information regarding a specific zone id</p> <p>:param zone_id: The route53 zone id :param configuration: access values used by actions/probes :param secrets: values that need to be passed on to actions/probes :returns: Dict[str, Any]</p> <p>Signature:</p> <pre><code>def get_hosted_zone(\n        zone_id: str,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required zone_id string Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"get-hosted-zone\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.route53.probes\",\n\"func\": \"get_hosted_zone\",\n\"arguments\": {\n\"zone_id\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: get-hosted-zone\nprovider:\narguments:\nzone_id: ''\nfunc: get_hosted_zone\nmodule: chaosaws.route53.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/aws/#s3","title":"s3","text":""},{"location":"drivers/aws/#bucket_exists","title":"<code>bucket_exists</code>","text":"Type probe Module chaosaws.s3.probes Name bucket_exists Return boolean <p>Validate that a bucket exists</p> <p>:param bucket_name: The name of the S3 bucket :param configuration: access values used by actions/probes :param secrets: values that need to be passed on to actions/probes :return: boolean</p> <p>Signature:</p> <pre><code>def bucket_exists(bucket_name: str,\n                  configuration: Dict[str, Dict[str, str]] = None,\n                  secrets: Dict[str, Dict[str, str]] = None) -&gt; bool:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required bucket_name string Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"bucket-exists\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.s3.probes\",\n\"func\": \"bucket_exists\",\n\"arguments\": {\n\"bucket_name\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: bucket-exists\nprovider:\narguments:\nbucket_name: ''\nfunc: bucket_exists\nmodule: chaosaws.s3.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/aws/#delete_object","title":"<code>delete_object</code>","text":"Type action Module chaosaws.s3.actions Name delete_object Return None <p>Delete an object in a S3 bucket</p> <p>:param bucket_name: the S3 bucket name :param object_key: the path to the object :param version_id: the version id of the object (optional) :param configuration: access values used by actions/probes (optional) :param secrets: values that need to be passed on to actions/probes (optional) :return: None</p> <p>Signature:</p> <pre><code>def delete_object(bucket_name: str,\n                  object_key: str,\n                  version_id: str = None,\n                  configuration: Dict[str, Dict[str, str]] = None,\n                  secrets: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required bucket_name string Yes object_key string Yes version_id string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"delete-object\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.s3.actions\",\n\"func\": \"delete_object\",\n\"arguments\": {\n\"bucket_name\": \"\",\n\"object_key\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: delete-object\nprovider:\narguments:\nbucket_name: ''\nobject_key: ''\nfunc: delete_object\nmodule: chaosaws.s3.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/aws/#object_exists","title":"<code>object_exists</code>","text":"Type probe Module chaosaws.s3.probes Name object_exists Return boolean <p>Validate that an object exists in a S3 bucket</p> <p>:param bucket_name: the name of the S3 bucket :param object_key: the path to the object :param version_id: the version id of the object (optional) :param configuration: access values used by actions/probes (optional) :param secrets: values that need to be passed on to actions/probes (optional) :return: boolean</p> <p>Signature:</p> <pre><code>def object_exists(bucket_name: str,\n                  object_key: str,\n                  version_id: str = None,\n                  configuration: Dict[str, Dict[str, str]] = None,\n                  secrets: Dict[str, Dict[str, str]] = None) -&gt; bool:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required bucket_name string Yes object_key string Yes version_id string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"object-exists\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.s3.probes\",\n\"func\": \"object_exists\",\n\"arguments\": {\n\"bucket_name\": \"\",\n\"object_key\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: object-exists\nprovider:\narguments:\nbucket_name: ''\nobject_key: ''\nfunc: object_exists\nmodule: chaosaws.s3.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/aws/#toggle_versioning","title":"<code>toggle_versioning</code>","text":"Type action Module chaosaws.s3.actions Name toggle_versioning Return null <p>Toggles versioning on a S3 bucket</p> <p>If the \u201cstatus\u201d parameter is not provided, the bucket will be scanned to determine if versioning is enabled. If it is enabled, it will be suspended. If it is suspended it will be enabled using basic values unless MFA is provided.</p> <p>:param bucket_name: The S3 bucket name :param status: \u201cEnabled\u201d to turn on versioning, \u201cSuspended\u201d to disable :param mfa: The authentication device serial number, a space, and the value from     the device (optional) :param mfa_delete: Specifies if MFA delete is enabled in the bucket versioning     (optional) :param owner: The account ID of the expected bucket owner (optional) :param configuration: access values used by actions/probes (optional) :param secrets: values that need to be passed on to actions/probes (optional) :return: None</p> <p>Signature:</p> <pre><code>def toggle_versioning(bucket_name: str,\n                      mfa_delete: str = None,\n                      status: str = None,\n                      mfa: str = None,\n                      owner: str = None,\n                      configuration: Dict[str, Dict[str, str]] = None,\n                      secrets: Dict[str, Dict[str, str]] = None) -&gt; None:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required bucket_name string Yes mfa_delete string null No status string null No mfa string null No owner string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"toggle-versioning\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.s3.actions\",\n\"func\": \"toggle_versioning\",\n\"arguments\": {\n\"bucket_name\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: toggle-versioning\nprovider:\narguments:\nbucket_name: ''\nfunc: toggle_versioning\nmodule: chaosaws.s3.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/aws/#controls","title":"controls","text":""},{"location":"drivers/aws/#ssm","title":"ssm","text":""},{"location":"drivers/aws/#create_document","title":"<code>create_document</code>","text":"Type action Module chaosaws.ssm.actions Name create_document Return mapping <p>creates a Systems Manager (SSM) document. An SSM document defines the actions that SSM performs on your managed. For more information about SSM documents: https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-ssm-docs.html https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ssm.html#SSM.Client.create_document</p> <p>Signature:</p> <pre><code>def create_document(\n        path_content: str,\n        name: str,\n        version_name: str = None,\n        document_type: str = None,\n        document_format: str = None,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required path_content string Yes name string Yes version_name string null No document_type string null No document_format string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"create-document\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.ssm.actions\",\n\"func\": \"create_document\",\n\"arguments\": {\n\"path_content\": \"\",\n\"name\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: create-document\nprovider:\narguments:\nname: ''\npath_content: ''\nfunc: create_document\nmodule: chaosaws.ssm.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/aws/#delete_document","title":"<code>delete_document</code>","text":"Type action Module chaosaws.ssm.actions Name delete_document Return mapping <p>creates a Systems Manager (SSM) document.</p> <p>An SSM document defines the actions that SSM performs on your managed. For more information about SSM documents: https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-ssm-docs.html https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ssm.html#SSM.Client.create_document</p> <p>Signature:</p> <pre><code>def delete_document(\n        name: str,\n        version_name: str = None,\n        force: bool = True,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required name string Yes version_name string null No force boolean true No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"delete-document\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.ssm.actions\",\n\"func\": \"delete_document\",\n\"arguments\": {\n\"name\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: delete-document\nprovider:\narguments:\nname: ''\nfunc: delete_document\nmodule: chaosaws.ssm.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/aws/#put_parameter","title":"<code>put_parameter</code>","text":"Type action Module chaosaws.ssm.actions Name put_parameter Return mapping <p>Add or update a parameter in the Systems Manager Parameter Store.</p> <p>:param name: str name of the parameter :param value: str value of the parameter :param description: str information about the parameter :param type: str type of the paramater value, such as \u2018String\u2019 :param key_id: str KMS key id to use while encrypting the parameter value :param overwrite: bool allow the parameter value to be overwritten :param allowed_pattern: str regex to validate parameter value :param tags: List[Dict[str, str]] metadata about the parameter :param tier: str storage classes such as \u2018Advanced\u2019 to allow larger parameter     values :param policies: str storage policies such as expiration in JSON format :param data_type: str data type for String. Allows the validation of AMI IDs :param configuration: Configuration object representing the CTK Configuration :param secrets: Secret object representing the CTK Secrets :returns: dict representing the Version and Tier of the parameter</p> <p>Configuration within experiment    {    \u201cname\u201d: \u201cActivate Chaos\u201d,    \u201ctype\u201d: \u201caction\u201d,    \u201cprovider\u201d: {   \u201ctype\u201d: \u201cpython\u201d,   \u201cmodule\u201d: \u201cchaosaws.ssm.actions\u201d,   \u201cfunc\u201d: \u201cput_parameter\u201d,   \u201carguments\u201d: {  \u201cname\u201d: \u201cchaos_trigger\u201d,  \u201cvalue\u201d: true,  \u201coverwrite\u201d: true,  \u201ctype\u201d: \u201cSecureString\u201d,   }    },     }</p> <p>Signature:</p> <pre><code>def put_parameter(name: str,\n                  value: str,\n                  description: str = None,\n                  type: str = None,\n                  key_id: str = None,\n                  overwrite: bool = False,\n                  allowed_pattern: str = None,\n                  tags: List[Dict[str, str]] = None,\n                  tier: str = None,\n                  policies: str = None,\n                  data_type: str = None,\n                  configuration: Dict[str, Dict[str, str]] = None,\n                  secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required name string Yes value string Yes description string null No type string null No key_id string null No overwrite boolean false No allowed_pattern string null No tags list null No tier string null No policies string null No data_type string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"put-parameter\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.ssm.actions\",\n\"func\": \"put_parameter\",\n\"arguments\": {\n\"name\": \"\",\n\"value\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: put-parameter\nprovider:\narguments:\nname: ''\nvalue: ''\nfunc: put_parameter\nmodule: chaosaws.ssm.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/aws/#send_command","title":"<code>send_command</code>","text":"Type action Module chaosaws.ssm.actions Name send_command Return mapping <p>Runs commands on one or more managed instances.</p> <p>An SSM document defines the actions that SSM performs on your managed. For more information about SSM SendCommand: https://docs.aws.amazon.com/systems-manager/latest/APIReference/API_SendCommand.html https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ssm.html#SSM.Client.send_command</p> <p>Signature:</p> <pre><code>def send_command(document_name: str,\n                 targets: List[Dict[str, Any]] = None,\n                 document_version: str = None,\n                 parameters: Dict[str, Any] = None,\n                 timeout_seconds: int = None,\n                 max_concurrency: str = None,\n                 max_errors: str = None,\n                 region: str = None,\n                 configuration: Dict[str, Dict[str, str]] = None,\n                 secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required document_name string Yes targets list null No document_version string null No parameters mapping null No timeout_seconds integer null No max_concurrency string null No max_errors string null No region string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"send-command\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.ssm.actions\",\n\"func\": \"send_command\",\n\"arguments\": {\n\"document_name\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: send-command\nprovider:\narguments:\ndocument_name: ''\nfunc: send_command\nmodule: chaosaws.ssm.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/aws/#xray","title":"xray","text":""},{"location":"drivers/aws/#get_most_recent_trace","title":"<code>get_most_recent_trace</code>","text":"Type probe Module chaosaws.xray.probes Name get_most_recent_trace Return Union[Dict[str, Any], List[Dict[str, Any]]] <p>Return a list of recent XRay traces within the given time range.</p> <p>Time can be given as a float, which is an absolute Unix timestamp (UTC) or as a string representing a relative period such as \u201c1 minute\u201d.</p> <p>Supported units are: seconds, minutes, hours and days. Plural and singular.</p> <p>Be careful about what you ask for, this can lead to a huge amount of traces being returned. Try to filter using <code>filter_expression</code>.</p> <p>The response is the AWS response as-is. The content of each segments of the trace are encoded as a json string. By setting <code>raw_segments</code> you ask for the list of segment documents decoded. Useful in an hypothesis scenario with a tolerance set to a jsonpath for instance.</p> <p>The possbile alarm state values are described in the documentation https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/xray/client/batch_get_traces.html</p> <p>Signature:</p> <pre><code>def get_most_recent_trace(\n    start_time: Union[str, float] = '3 minutes',\n    end_time: Union[str, float] = 'now',\n    time_range_type: str = 'TraceId',\n    filter_expression: str = 'groupname = \"Default\"',\n    sampling: bool = False,\n    sampling_strategy: Optional[Dict[str, float]] = None,\n    raw_segments: bool = False,\n    configuration: Dict[str, Dict[str, str]] = None,\n    secrets: Dict[str, Dict[str, str]] = None\n) -&gt; Union[Dict[str, Any], List[Dict[str, Any]]]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required start_time object \u201c3 minutes\u201d No end_time object \u201cnow\u201d No time_range_type string \u201cTraceId\u201d No filter_expression string \u201cgroupname = \u201cDefault\u201d\u201c No sampling boolean false No sampling_strategy object null No raw_segments boolean false No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"get-most-recent-trace\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.xray.probes\",\n\"func\": \"get_most_recent_trace\"\n}\n}\n</code></pre> <pre><code>name: get-most-recent-trace\nprovider:\nfunc: get_most_recent_trace\nmodule: chaosaws.xray.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/aws/#get_service_graph","title":"<code>get_service_graph</code>","text":"Type probe Module chaosaws.xray.probes Name get_service_graph Return Union[Dict[str, Any], List[Dict[str, Any]]] <p>Return a service graph for a given group at a given moment.</p> <p>See more information: https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/xray/client/get_service_graph.html</p> <p>Signature:</p> <pre><code>def get_service_graph(\n    start_time: Union[str, float] = '3 minutes',\n    end_time: Union[str, float] = 'now',\n    group_name: Optional[str] = 'Default',\n    group_arn: Optional[str] = None,\n    configuration: Dict[str, Dict[str, str]] = None,\n    secrets: Dict[str, Dict[str, str]] = None\n) -&gt; Union[Dict[str, Any], List[Dict[str, Any]]]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required start_time object \u201c3 minutes\u201d No end_time object \u201cnow\u201d No group_name object \u201cDefault\u201d No group_arn object null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"get-service-graph\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.xray.probes\",\n\"func\": \"get_service_graph\"\n}\n}\n</code></pre> <pre><code>name: get-service-graph\nprovider:\nfunc: get_service_graph\nmodule: chaosaws.xray.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/aws/#get_traces","title":"<code>get_traces</code>","text":"Type probe Module chaosaws.xray.probes Name get_traces Return mapping <p>Return a list of recent XRay traces within the given time range.</p> <p>Time can be given as a float, which is an absolute Unix timestamp (UTC) or as a string representing a relative period such as \u201c1 minute\u201d.</p> <p>Supported units are: seconds, minutes, hours and days. Plural and singular.</p> <p>This will never return more than 5 traces as per the limits set by the AWS API. It will always pick the 5 newest.</p> <p>The possbile alarm state values are described in the documentation https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/xray/client/batch_get_traces.html</p> <p>Signature:</p> <pre><code>def get_traces(start_time: Union[str, float] = '3 minutes',\n               end_time: Union[str, float] = 'now',\n               time_range_type: str = 'TraceId',\n               filter_expression: str = 'groupname = \"Default\"',\n               sampling: bool = False,\n               sampling_strategy: Optional[Dict[str, float]] = None,\n               quantity: int = 5,\n               configuration: Dict[str, Dict[str, str]] = None,\n               secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required start_time object \u201c3 minutes\u201d No end_time object \u201cnow\u201d No time_range_type string \u201cTraceId\u201d No filter_expression string \u201cgroupname = \u201cDefault\u201d\u201c No sampling boolean false No sampling_strategy object null No quantity integer 5 No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"get-traces\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.xray.probes\",\n\"func\": \"get_traces\"\n}\n}\n</code></pre> <pre><code>name: get-traces\nprovider:\nfunc: get_traces\nmodule: chaosaws.xray.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/aws/#get_traces_summaries","title":"<code>get_traces_summaries</code>","text":"Type probe Module chaosaws.xray.probes Name get_traces_summaries Return mapping <p>Return a list of recent XRay trace summaries within the given time range.</p> <p>Time can be given as a float, which is an absolute Unix timestamp (UTC) or as a string representing a relative period such as \u201c1 minute\u201d.</p> <p>Supported units are: seconds, minutes, hours and days. Plural and singular.</p> <p>Be careful about what you ask for, this can lead to a huge amount of traces being returned. Try to filter using <code>filter_expression</code> and/or <code>sampling</code>.</p> <p>The possbile alarm state values are described in the documentation https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/xray/client/get_trace_summaries.html</p> <p>Signature:</p> <pre><code>def get_traces_summaries(\n        start_time: Union[str, float] = '3 minutes',\n        end_time: Union[str, float] = 'now',\n        time_range_type: str = 'TraceId',\n        filter_expression: str = 'groupname = \"Default\"',\n        sampling: bool = False,\n        sampling_strategy: Optional[Dict[str, float]] = None,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required start_time object \u201c3 minutes\u201d No end_time object \u201cnow\u201d No time_range_type string \u201cTraceId\u201d No filter_expression string \u201cgroupname = \u201cDefault\u201d\u201c No sampling boolean false No sampling_strategy object null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"get-traces-summaries\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.xray.probes\",\n\"func\": \"get_traces_summaries\"\n}\n}\n</code></pre> <pre><code>name: get-traces-summaries\nprovider:\nfunc: get_traces_summaries\nmodule: chaosaws.xray.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/azure/","title":"Extension <code>chaosazure</code>","text":"Version 0.11.1 Repository https://github.com/chaostoolkit-incubator/chaostoolkit-azure <p>This project is a collection of actions and probes, gathered as an extension to the Chaos Toolkit. It targets the Microsoft Azure platform.</p>"},{"location":"drivers/azure/#install","title":"Install","text":"<p>This package requires Python 3.5+</p> <p>To be used from your experiment, this package must be installed in the Python environment where chaostoolkit already lives.</p> <pre><code>$ pip install -U chaostoolkit-azure\n</code></pre>"},{"location":"drivers/azure/#usage","title":"Usage","text":"<p>To use the probes and actions from this package, add the following to your experiment file:</p> <pre><code>{\n\"type\": \"action\",\n\"name\": \"start-service-factory-chaos\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosazure.vm.actions\",\n\"func\": \"stop_machines\",\n\"secrets\": [\"azure\"],\n\"arguments\": {\n\"parameters\": {\n\"TimeToRunInSeconds\": 45\n}\n}\n}\n}\n</code></pre> <p>That\u2019s it!</p> <p>Please explore the code to see existing probes and actions.</p>"},{"location":"drivers/azure/#configuration","title":"Configuration","text":"<p>This extension uses the Azure SDK libraries under the hood. The Azure SDK library expects that you have a tenant and client identifier, as well as a client secret and subscription, that allows you to authenticate with the Azure resource management API.</p> <p>Configuration values for the Chaos Toolkit Extension for Azure can come from several sources:</p> <ul> <li>Experiment file</li> <li>Azure credential file</li> </ul> <p>The extension will first try to load the configuration from the <code>experiment file</code>. If configuration is not provided in the <code>experiment file</code>, it will try to load it from the <code>Azure credential file</code>.</p>"},{"location":"drivers/azure/#credentials","title":"Credentials","text":"<ul> <li>Secrets in the Experiment file</li> </ul> <pre><code>{\n\"secrets\": {\n\"azure\": {\n\"client_id\": \"your-super-secret-client-id\",\n\"client_secret\": \"your-even-more-super-secret-client-secret\",\n\"tenant_id\": \"your-tenant-id\"\n}\n}\n}\n</code></pre> <p>You can retrieve secretes as well from environment or HashiCorp vault. </p> <p>If you are not working with Public Global Azure, e.g. China Cloud You can set the cloud environment.</p> <pre><code>{\n\"client_id\": \"your-super-secret-client-id\",\n\"client_secret\": \"your-even-more-super-secret-client-secret\",\n\"tenant_id\": \"your-tenant-id\",\n\"azure_cloud\": \"AZURE_CHINA_CLOUD\"\n}\n</code></pre> <p>Available cloud names:</p> <ul> <li>AZURE_CHINA_CLOUD</li> <li>AZURE_GERMAN_CLOUD</li> <li>AZURE_PUBLIC_CLOUD</li> <li> <p>AZURE_US_GOV_CLOUD</p> </li> <li> <p>Secrets in the Azure credential file</p> </li> </ul> <p>You can retrieve a credentials file with your subscription ID already in place by signing in to Azure using the az login command followed by the az ad sp create-for-rbac command</p> <pre><code>az login\naz ad sp create-for-rbac --sdk-auth &gt; credentials.json\n</code></pre> <p>credentials.json:</p> <pre><code>{\n\"subscriptionId\": \"&lt;azure_aubscription_id&gt;\",\n\"tenantId\": \"&lt;tenant_id&gt;\",\n\"clientId\": \"&lt;application_id&gt;\",\n\"clientSecret\": \"&lt;application_secret&gt;\",\n\"activeDirectoryEndpointUrl\": \"https://login.microsoftonline.com\",\n\"resourceManagerEndpointUrl\": \"https://management.azure.com/\",\n\"activeDirectoryGraphResourceId\": \"https://graph.windows.net/\",\n\"sqlManagementEndpointUrl\": \"https://management.core.windows.net:8443/\",\n\"galleryEndpointUrl\": \"https://gallery.azure.com/\",\n\"managementEndpointUrl\": \"https://management.core.windows.net/\"\n}\n</code></pre> <p>Store the path to the file in an environment variable called AZURE_AUTH_LOCATION and make sure that your experiment does NOT contain <code>secrets</code> section. </p>"},{"location":"drivers/azure/#subscription","title":"Subscription","text":"<p>Additionally you need to provide the Azure subscription id.</p> <ul> <li>Subscription id in the experiment file</li> </ul> <pre><code>{\n\"configuration\": {\n\"azure_subscription_id\": \"your-azure-subscription-id\"\n}\n}\n</code></pre> <p>Configuration may be as well retrieved from an environment.</p> <p>An old, but deprecated way of doing it was as follows, this still works   but should not be favoured over the previous approaches as it\u2019s not the   Chaos Toolkit way to pass structured configurations.</p> <pre><code>{\n\"configuration\": {\n\"azure\": {\n\"subscription_id\": \"your-azure-subscription-id\"\n}\n}\n}\n</code></pre> <ul> <li>Subscription id in the Azure credential file</li> </ul> <p>Credential file described in the previous \u201cCredential\u201d section contains as well subscription id. If AZURE_AUTH_LOCATION is set and subscription id is NOT set in the experiment definition, extension will try to load it from the credential file.</p>"},{"location":"drivers/azure/#putting-it-all-together","title":"Putting it all together","text":"<p>Here is a full example for an experiment containing secrets and configuration: </p> <pre><code>{\n\"version\": \"1.0.0\",\n\"title\": \"...\",\n\"description\": \"...\",\n\"tags\": [\"azure\", \"kubernetes\", \"aks\", \"node\"],\n\"configuration\": {\n\"azure_subscription_id\": \"xxx\"\n},\n\"secrets\": {\n\"azure\": {\n\"client_id\": \"xxx\",\n\"client_secret\": \"xxx\",\n\"tenant_id\": \"xxx\"\n}\n},\n\"steady-state-hypothesis\": {\n\"title\": \"Services are all available and healthy\",\n\"probes\": [\n{\n\"type\": \"probe\",\n\"name\": \"consumer-service-must-still-respond\",\n\"tolerance\": 200,\n\"provider\": {\n\"type\": \"http\",\n\"url\": \"https://some-url/\"\n}\n}\n]\n},\n\"method\": [\n{\n\"type\": \"action\",\n\"name\": \"restart-node-at-random\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosazure.machine.actions\",\n\"func\": \"restart_machines\",\n\"secrets\": [\"azure\"],\n\"config\": [\"azure_subscription_id\"]\n}\n}\n],\n\"rollbacks\": []\n}\n</code></pre>"},{"location":"drivers/azure/#contribute","title":"Contribute","text":"<p>If you wish to contribute more functions to this package, you are more than welcome to do so. Please, fork this project, make your changes following the usual PEP 8 code style, sprinkling with tests and submit a PR for review.</p> <p>The Chaos Toolkit projects require all contributors must sign a Developer Certificate of Origin on each commit they would like to merge into the master branch of the repository. Please, make sure you can abide by the rules of the DCO before submitting a PR.</p>"},{"location":"drivers/azure/#develop","title":"Develop","text":"<p>If you wish to develop on this project, make sure to install the development dependencies. But first, create a virtual environment and then install those dependencies.</p> <pre><code>$ pip install -r requirements-dev.txt -r requirements.txt\n</code></pre> <p>Then, point your environment to this directory:</p> <pre><code>$ python setup.py develop\n</code></pre> <p>Now, you can edit the files and they will be automatically be seen by your environment, even when running from the <code>chaos</code> command locally.</p>"},{"location":"drivers/azure/#test","title":"Test","text":"<p>To run the tests for the project execute the following:</p> <pre><code>$ pytest\n</code></pre>"},{"location":"drivers/azure/#exported-activities","title":"Exported Activities","text":""},{"location":"drivers/azure/#aks","title":"aks","text":""},{"location":"drivers/azure/#delete_node","title":"<code>delete_node</code>","text":"Type action Module chaosazure.aks.actions Name delete_node Return None <p>Delete a node at random from a managed Azure Kubernetes Service.</p> <p>Be aware: Deleting a node is an invasive action. You will not be able to recover the node once you deleted it.</p> <p>\u2013 filter : str     Filter the managed AKS. If the filter is omitted all AKS in     the subscription will be selected as potential chaos candidates.     Filtering example:     \u2018where resourceGroup==\u201dmyresourcegroup\u201d and name=\u201dmyresourcename\u201d\u2019</p> <p>Signature:</p> <pre><code>def delete_node(filter: str = None,\n                configuration: Dict[str, Dict[str, str]] = None,\n                secrets: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required filter string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"delete-node\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosazure.aks.actions\",\n\"func\": \"delete_node\"\n}\n}\n</code></pre> <pre><code>name: delete-node\nprovider:\nfunc: delete_node\nmodule: chaosazure.aks.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/azure/#restart_node","title":"<code>restart_node</code>","text":"Type action Module chaosazure.aks.actions Name restart_node Return None <p>Restart a node at random from a managed Azure Kubernetes Service.</p> <p>\u2013 filter : str     Filter the managed AKS. If the filter is omitted all AKS in     the subscription will be selected as potential chaos candidates.     Filtering example:     \u2018where resourceGroup==\u201dmyresourcegroup\u201d and name=\u201dmyresourcename\u201d\u2019</p> <p>Signature:</p> <pre><code>def restart_node(filter: str = None,\n                 configuration: Dict[str, Dict[str, str]] = None,\n                 secrets: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required filter string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"restart-node\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosazure.aks.actions\",\n\"func\": \"restart_node\"\n}\n}\n</code></pre> <pre><code>name: restart-node\nprovider:\nfunc: restart_node\nmodule: chaosazure.aks.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/azure/#stop_node","title":"<code>stop_node</code>","text":"Type action Module chaosazure.aks.actions Name stop_node Return None <p>Stop a node at random from a managed Azure Kubernetes Service.</p> <p>\u2013 filter : str     Filter the managed AKS. If the filter is omitted all AKS in     the subscription will be selected as potential chaos candidates.     Filtering example:     \u2018where resourceGroup==\u201dmyresourcegroup\u201d and name=\u201dmyresourcename\u201d\u2019</p> <p>Signature:</p> <pre><code>def stop_node(filter: str = None,\n              configuration: Dict[str, Dict[str, str]] = None,\n              secrets: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required filter string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"stop-node\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosazure.aks.actions\",\n\"func\": \"stop_node\"\n}\n}\n</code></pre> <pre><code>name: stop-node\nprovider:\nfunc: stop_node\nmodule: chaosazure.aks.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/azure/#machine","title":"machine","text":""},{"location":"drivers/azure/#burn_io","title":"<code>burn_io</code>","text":"Type action Module chaosazure.machine.actions Name burn_io Return None <p>Increases the Disk I/O operations per second of the virtual machine.</p> <p>\u2013 filter : str, optional     Filter the virtual machines. If the filter is omitted all machines in     the subscription will be selected as potential chaos candidates. duration : int, optional     How long the burn lasts. Defaults to 60 seconds. timeout : int     Additional wait time (in seconds) for filling operation to be completed     Getting and sending data from/to Azure may take some time so it\u2019s not     recommended to set this value to less than 30s. Defaults to 60 seconds.</p> <p>Some calling examples. Deep dive into the filter syntax: https://docs.microsoft.com/en-us/azure/kusto/query/</p> <p>burn_io(\u201cwhere resourceGroup==\u2019rg\u2019\u201c, configuration=c, secrets=s) Increase the I/O operations per second of all machines from the group \u2018rg\u2019</p> <p>burn_io(\u201cwhere resourceGroup==\u2019rg\u2019 and name=\u2019name\u2019\u201c,  configuration=c, secrets=s) Increase the I/O operations per second of the machine from the group \u2018rg\u2019 having the name \u2018name\u2019</p> <p>burn_io(\u201cwhere resourceGroup==\u2019rg\u2019 | sample 2\u201d,  configuration=c, secrets=s) Increase the I/O operations per second of two machines at random from the group \u2018rg\u2019</p> <p>Signature:</p> <pre><code>def burn_io(filter: str = None,\n            duration: int = 60,\n            timeout: int = 60,\n            configuration: Dict[str, Dict[str, str]] = None,\n            secrets: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required filter string null No duration integer 60 No timeout integer 60 No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"burn-io\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosazure.machine.actions\",\n\"func\": \"burn_io\"\n}\n}\n</code></pre> <pre><code>name: burn-io\nprovider:\nfunc: burn_io\nmodule: chaosazure.machine.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/azure/#count_machines","title":"<code>count_machines</code>","text":"Type probe Module chaosazure.machine.probes Name count_machines Return integer <p>Return count of Azure virtual machines.</p> <p>\u2013 filter : str     Filter the virtual machines. If the filter is omitted all machines in     the subscription will be selected for the probe.     Filtering example:     \u2018where resourceGroup==\u201dmyresourcegroup\u201d and name=\u201dmyresourcename\u201d\u2019</p> <p>Signature:</p> <pre><code>def count_machines(filter: str = None,\n                   configuration: Dict[str, Dict[str, str]] = None,\n                   secrets: Dict[str, Dict[str, str]] = None) -&gt; int:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required filter string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"count-machines\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosazure.machine.probes\",\n\"func\": \"count_machines\"\n}\n}\n</code></pre> <pre><code>name: count-machines\nprovider:\nfunc: count_machines\nmodule: chaosazure.machine.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/azure/#delete_machines","title":"<code>delete_machines</code>","text":"Type action Module chaosazure.machine.actions Name delete_machines Return None <p>Delete virtual machines at random.</p> <p>Be aware: Deleting a machine is an invasive action. You will not be able to recover the machine once you deleted it.</p> <p>\u2013 filter : str, optional     Filter the virtual machines. If the filter is omitted all machines in     the subscription will be selected as potential chaos candidates.</p> <p>Some calling examples. Deep dive into the filter syntax: https://docs.microsoft.com/en-us/azure/kusto/query/</p> <p>delete_machines(\u201cwhere resourceGroup==\u2019rg\u2019\u201c, c, s) Delete all machines from the group \u2018rg\u2019</p> <p>delete_machines(\u201cwhere resourceGroup==\u2019rg\u2019 and name=\u2019name\u2019\u201c, c, s) Delete the machine from the group \u2018rg\u2019 having the name \u2018name\u2019</p> <p>delete_machines(\u201cwhere resourceGroup==\u2019rg\u2019 | sample 2\u201d, c, s) Delete two machines at random from the group \u2018rg\u2019</p> <p>Signature:</p> <pre><code>def delete_machines(filter: str = None,\n                    configuration: Dict[str, Dict[str, str]] = None,\n                    secrets: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required filter string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"delete-machines\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosazure.machine.actions\",\n\"func\": \"delete_machines\"\n}\n}\n</code></pre> <pre><code>name: delete-machines\nprovider:\nfunc: delete_machines\nmodule: chaosazure.machine.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/azure/#describe_machines","title":"<code>describe_machines</code>","text":"Type probe Module chaosazure.machine.probes Name describe_machines Return None <p>Describe Azure virtual machines.</p> <p>\u2013 filter : str     Filter the virtual machines. If the filter is omitted all machines in     the subscription will be selected for the probe.     Filtering example:     \u2018where resourceGroup==\u201dmyresourcegroup\u201d and name=\u201dmyresourcename\u201d\u2019</p> <p>Signature:</p> <pre><code>def describe_machines(filter: str = None,\n                      configuration: Dict[str, Dict[str, str]] = None,\n                      secrets: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required filter string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"describe-machines\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosazure.machine.probes\",\n\"func\": \"describe_machines\"\n}\n}\n</code></pre> <pre><code>name: describe-machines\nprovider:\nfunc: describe_machines\nmodule: chaosazure.machine.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/azure/#fill_disk","title":"<code>fill_disk</code>","text":"Type action Module chaosazure.machine.actions Name fill_disk Return None <p>Fill the disk with random data.</p> <p>\u2013 filter : str, optional     Filter the virtual machines. If the filter is omitted all machines in     the subscription will be selected as potential chaos candidates. duration : int, optional     Lifetime of the file created. Defaults to 120 seconds. timeout : int     Additional wait time (in seconds)     for filling operation to be completed.     Getting and sending data from/to Azure may take some time so it\u2019s not     recommended to set this value to less than 30s. Defaults to 60 seconds. size : int     Size of the file created on the disk. Defaults to 1GB. path : str, optional     The absolute path to write the fill file into.     Defaults: C:/burn for Windows clients, /root/burn for Linux clients.</p> <p>Some calling examples. Deep dive into the filter syntax: https://docs.microsoft.com/en-us/azure/kusto/query/</p> <p>fill_disk(\u201cwhere resourceGroup==\u2019rg\u2019\u201c, configuration=c, secrets=s) Fill all machines from the group \u2018rg\u2019</p> <p>fill_disk(\u201cwhere resourceGroup==\u2019rg\u2019 and name=\u2019name\u2019\u201c,  configuration=c, secrets=s) Fill the machine from the group \u2018rg\u2019 having the name \u2018name\u2019</p> <p>fill_disk(\u201cwhere resourceGroup==\u2019rg\u2019 | sample 2\u201d,  configuration=c, secrets=s) Fill two machines at random from the group \u2018rg\u2019</p> <p>Signature:</p> <pre><code>def fill_disk(filter: str = None,\n              duration: int = 120,\n              timeout: int = 60,\n              size: int = 1000,\n              path: str = None,\n              configuration: Dict[str, Dict[str, str]] = None,\n              secrets: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required filter string null No duration integer 120 No timeout integer 60 No size integer 1000 No path string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"fill-disk\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosazure.machine.actions\",\n\"func\": \"fill_disk\"\n}\n}\n</code></pre> <pre><code>name: fill-disk\nprovider:\nfunc: fill_disk\nmodule: chaosazure.machine.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/azure/#network_latency","title":"<code>network_latency</code>","text":"Type action Module chaosazure.machine.actions Name network_latency Return None <p>Increases the response time of the virtual machine.</p> <p>\u2013 filter : str, optional     Filter the virtual machines. If the filter is omitted all machines in     the subscription will be selected as potential chaos candidates. duration : int, optional     How long the latency lasts. Defaults to 60 seconds. timeout : int     Additional wait time (in seconds) for filling operation to be completed     Getting and sending data from/to Azure may take some time so it\u2019s not     recommended to set this value to less than 30s. Defaults to 60 seconds. delay : int     Added delay in ms. Defaults to 200. jitter : int     Variance of the delay in ms. Defaults to 50.</p> <p>Some calling examples. Deep dive into the filter syntax: https://docs.microsoft.com/en-us/azure/kusto/query/</p> <p>network_latency(\u201cwhere resourceGroup==\u2019rg\u2019\u201c, configuration=c,  secrets=s) Increase the latency of all machines from the group \u2018rg\u2019</p> <p>network_latency(\u201cwhere resourceGroup==\u2019rg\u2019 and name=\u2019name\u2019\u201c,  configuration=c, secrets=s) Increase the latecy of the machine from the group \u2018rg\u2019 having the name \u2018name\u2019</p> <p>network_latency(\u201cwhere resourceGroup==\u2019rg\u2019 | sample 2\u201d,  configuration=c, secrets=s) Increase the latency of two machines at random from the group \u2018rg\u2019</p> <p>Signature:</p> <pre><code>def network_latency(filter: str = None,\n                    duration: int = 60,\n                    delay: int = 200,\n                    jitter: int = 50,\n                    timeout: int = 60,\n                    configuration: Dict[str, Dict[str, str]] = None,\n                    secrets: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required filter string null No duration integer 60 No delay integer 200 No jitter integer 50 No timeout integer 60 No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"network-latency\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosazure.machine.actions\",\n\"func\": \"network_latency\"\n}\n}\n</code></pre> <pre><code>name: network-latency\nprovider:\nfunc: network_latency\nmodule: chaosazure.machine.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/azure/#restart_machines","title":"<code>restart_machines</code>","text":"Type action Module chaosazure.machine.actions Name restart_machines Return None <p>Restart virtual machines at random.</p> <p>\u2013 filter : str, optional     Filter the virtual machines. If the filter is omitted all machines in     the subscription will be selected as potential chaos candidates.</p> <p>Some calling examples. Deep dive into the filter syntax: https://docs.microsoft.com/en-us/azure/kusto/query/</p> <p>restart_machines(\u201cwhere resourceGroup==\u2019rg\u2019\u201c, c, s) Restart all machines from the group \u2018rg\u2019</p> <p>restart_machines(\u201cwhere resourceGroup==\u2019rg\u2019 and name=\u2019name\u2019\u201c, c, s) Restart the machine from the group \u2018rg\u2019 having the name \u2018name\u2019</p> <p>restart_machines(\u201cwhere resourceGroup==\u2019rg\u2019 | sample 2\u201d, c, s) Restart two machines at random from the group \u2018rg\u2019</p> <p>Signature:</p> <pre><code>def restart_machines(filter: str = None,\n                     configuration: Dict[str, Dict[str, str]] = None,\n                     secrets: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required filter string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"restart-machines\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosazure.machine.actions\",\n\"func\": \"restart_machines\"\n}\n}\n</code></pre> <pre><code>name: restart-machines\nprovider:\nfunc: restart_machines\nmodule: chaosazure.machine.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/azure/#start_machines","title":"<code>start_machines</code>","text":"Type action Module chaosazure.machine.actions Name start_machines Return None <p>Start virtual machines at random. Thought as a rollback action.</p> <p>\u2013 filter : str, optional     Filter the virtual machines. If the filter is omitted all machines in     the subscription will be selected as potential chaos candidates.</p> <p>Some calling examples. Deep dive into the filter syntax: https://docs.microsoft.com/en-us/azure/kusto/query/</p> <p>start_machines(\u201cwhere resourceGroup==\u2019rg\u2019\u201c, c, s) Start all stopped machines from the group \u2018rg\u2019</p> <p>start_machines(\u201cwhere resourceGroup==\u2019rg\u2019 and name=\u2019name\u2019\u201c, c, s) Start the stopped machine from the group \u2018rg\u2019 having the name \u2018name\u2019</p> <p>start_machines(\u201cwhere resourceGroup==\u2019rg\u2019 | sample 2\u201d, c, s) Start two stopped machines at random from the group \u2018rg\u2019</p> <p>Signature:</p> <pre><code>def start_machines(filter: str = None,\n                   configuration: Dict[str, Dict[str, str]] = None,\n                   secrets: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required filter string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"start-machines\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosazure.machine.actions\",\n\"func\": \"start_machines\"\n}\n}\n</code></pre> <pre><code>name: start-machines\nprovider:\nfunc: start_machines\nmodule: chaosazure.machine.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/azure/#stop_machines","title":"<code>stop_machines</code>","text":"Type action Module chaosazure.machine.actions Name stop_machines Return None <p>Stop virtual machines at random.</p> <p>\u2013 filter : str, optional     Filter the virtual machines. If the filter is omitted all machines in     the subscription will be selected as potential chaos candidates.</p> <p>Some calling examples. Deep dive into the filter syntax: https://docs.microsoft.com/en-us/azure/kusto/query/</p> <p>stop_machines(\u201cwhere resourceGroup==\u2019rg\u2019\u201c, c, s) Stop all machines from the group \u2018rg\u2019</p> <p>stop_machines(\u201cwhere resourceGroup==\u2019mygroup\u2019 and name=\u2019myname\u2019\u201c, c, s) Stop the machine from the group \u2018mygroup\u2019 having the name \u2018myname\u2019</p> <p>stop_machines(\u201cwhere resourceGroup==\u2019mygroup\u2019 | sample 2\u201d, c, s) Stop two machines at random from the group \u2018mygroup\u2019</p> <p>Signature:</p> <pre><code>def stop_machines(filter: str = None,\n                  configuration: Dict[str, Dict[str, str]] = None,\n                  secrets: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required filter string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"stop-machines\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosazure.machine.actions\",\n\"func\": \"stop_machines\"\n}\n}\n</code></pre> <pre><code>name: stop-machines\nprovider:\nfunc: stop_machines\nmodule: chaosazure.machine.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/azure/#stress_cpu","title":"<code>stress_cpu</code>","text":"Type action Module chaosazure.machine.actions Name stress_cpu Return None <p>Stress CPU up to 100% at virtual machines.</p> <p>\u2013 filter : str, optional     Filter the virtual machines. If the filter is omitted all machines in     the subscription will be selected as potential chaos candidates. duration : int, optional     Duration of the stress test (in seconds) that generates high CPU usage.     Defaults to 120 seconds. timeout : int     Additional wait time (in seconds) for stress operation to be completed.     Getting and sending data from/to Azure may take some time so it\u2019s not     recommended to set this value to less than 30s. Defaults to 60 seconds.</p> <p>Some calling examples. Deep dive into the filter syntax: https://docs.microsoft.com/en-us/azure/kusto/query/</p> <p>stress_cpu(\u201cwhere resourceGroup==\u2019rg\u2019\u201c, configuration=c, secrets=s) Stress all machines from the group \u2018rg\u2019</p> <p>stress_cpu(\u201cwhere resourceGroup==\u2019rg\u2019 and name=\u2019name\u2019\u201c,  configuration=c, secrets=s) Stress the machine from the group \u2018rg\u2019 having the name \u2018name\u2019</p> <p>stress_cpu(\u201cwhere resourceGroup==\u2019rg\u2019 | sample 2\u201d,  configuration=c, secrets=s) Stress two machines at random from the group \u2018rg\u2019</p> <p>Signature:</p> <pre><code>def stress_cpu(filter: str = None,\n               duration: int = 120,\n               timeout: int = 60,\n               configuration: Dict[str, Dict[str, str]] = None,\n               secrets: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required filter string null No duration integer 120 No timeout integer 60 No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"stress-cpu\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosazure.machine.actions\",\n\"func\": \"stress_cpu\"\n}\n}\n</code></pre> <pre><code>name: stress-cpu\nprovider:\nfunc: stress_cpu\nmodule: chaosazure.machine.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/azure/#postgresql","title":"postgresql","text":""},{"location":"drivers/azure/#count_servers","title":"<code>count_servers</code>","text":"Type probe Module chaosazure.postgresql.probes Name count_servers Return integer <p>Return count of Azure servers.</p> <p>\u2013 filter : str     Filter the servers. If the filter is omitted all servers in     the subscription will be selected for the probe.     Filtering example:     \u2018where resourceGroup==\u201dmyresourcegroup\u201d and name=\u201dmyresourcename\u201d\u2019</p> <p>Signature:</p> <pre><code>def count_servers(filter: str = None,\n                  configuration: Dict[str, Dict[str, str]] = None,\n                  secrets: Dict[str, Dict[str, str]] = None) -&gt; int:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required filter string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"count-servers\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosazure.postgresql.probes\",\n\"func\": \"count_servers\"\n}\n}\n</code></pre> <pre><code>name: count-servers\nprovider:\nfunc: count_servers\nmodule: chaosazure.postgresql.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/azure/#create_databases","title":"<code>create_databases</code>","text":"Type action Module chaosazure.postgresql.actions Name create_databases Return None <p>Delete databases at random.</p> <p>Be aware: Deleting a database is an invasive action. You will not be able to recover the database once you deleted it.</p> <p>\u2013 filter : str, optional     Filter the servers. If the filter is omitted all databases     of all servers in the subscription will be selected     as potential chaos candidates.</p> <p>name : str, required     The name of the database to create.</p> <p>Some calling examples. Deep dive into the filter syntax: https://docs.microsoft.com/en-us/azure/kusto/query/</p> <p>create_databases(\u201cwhere resourceGroup==\u2019rg\u2019\u201c, \u2018chaos-test\u2019, c, s) Creating database named \u2018chaos-test\u2019 in all servers from the group \u2018rg\u2019</p> <p>create_databases(\u201cwhere resourceGroup==\u2019rg\u2019 and name=\u2019name\u2019\u201c, \u2018chaos-test\u2019, c, s) Creating database named \u2018chaos-test\u2019 the server from the group \u2018rg\u2019 having the name \u2018name\u2019</p> <p>Signature:</p> <pre><code>def create_databases(filter: str = None,\n                     name: str = None,\n                     charset: str = None,\n                     collation: str = None,\n                     configuration: Dict[str, Dict[str, str]] = None,\n                     secrets: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required filter string null No name string null No charset string null No collation string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"create-databases\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosazure.postgresql.actions\",\n\"func\": \"create_databases\"\n}\n}\n</code></pre> <pre><code>name: create-databases\nprovider:\nfunc: create_databases\nmodule: chaosazure.postgresql.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/azure/#delete_databases","title":"<code>delete_databases</code>","text":"Type action Module chaosazure.postgresql.actions Name delete_databases Return None <p>Delete databases at random.</p> <p>Be aware: Deleting a database is an invasive action. You will not be able to recover the database once you deleted it.</p> <p>\u2013 filter : str, optional     Filter the servers. If the filter is omitted all databases     of all servers in the subscription will be selected     as potential chaos candidates.</p> <p>name_pattern : str, optional     Filter the databases. If the filter is omitted all databases in     the server will be selected for the probe.     Pattern example:     \u2018app[0-9]{3}\u2019</p> <p>Some calling examples. Deep dive into the filter syntax: https://docs.microsoft.com/en-us/azure/kusto/query/</p> <p>delete_databases(\u201cwhere resourceGroup==\u2019rg\u2019\u201c, \u2018chaos-\u2019, c, s) Delete all database named \u2018chaos-\u2018 in all servers from the group \u2018rg\u2019</p> <p>delete_databases(\u201cwhere resourceGroup==\u2019rg\u2019 and name=\u2019name\u2019\u201c, \u2018chaos-test\u2019, c, s) Delete all database named \u2018chaos-*\u2019 the server from the group \u2018rg\u2019 having the name \u2018name\u2019</p> <p>Signature:</p> <pre><code>def delete_databases(filter: str = None,\n                     name_pattern: str = None,\n                     configuration: Dict[str, Dict[str, str]] = None,\n                     secrets: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required filter string null No name_pattern string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"delete-databases\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosazure.postgresql.actions\",\n\"func\": \"delete_databases\"\n}\n}\n</code></pre> <pre><code>name: delete-databases\nprovider:\nfunc: delete_databases\nmodule: chaosazure.postgresql.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/azure/#delete_servers","title":"<code>delete_servers</code>","text":"Type action Module chaosazure.postgresql.actions Name delete_servers Return None <p>Delete servers at random.</p> <p>Be aware: Deleting a server is an invasive action. You will not be able to recover the server once you deleted it.</p> <p>\u2013 filter : str, optional     Filter the servers. If the filter is omitted all servers in     the subscription will be selected as potential chaos candidates.</p> <p>Some calling examples. Deep dive into the filter syntax: https://docs.microsoft.com/en-us/azure/kusto/query/</p> <p>delete_servers(\u201cwhere resourceGroup==\u2019rg\u2019\u201c, c, s) Delete all servers from the group \u2018rg\u2019</p> <p>delete_servers(\u201cwhere resourceGroup==\u2019rg\u2019 and name=\u2019name\u2019\u201c, c, s) Delete the server from the group \u2018rg\u2019 having the name \u2018name\u2019</p> <p>delete_servers(\u201cwhere resourceGroup==\u2019rg\u2019 | sample 2\u201d, c, s) Delete two servers at random from the group \u2018rg\u2019</p> <p>Signature:</p> <pre><code>def delete_servers(filter: str = None,\n                   configuration: Dict[str, Dict[str, str]] = None,\n                   secrets: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required filter string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"delete-servers\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosazure.postgresql.actions\",\n\"func\": \"delete_servers\"\n}\n}\n</code></pre> <pre><code>name: delete-servers\nprovider:\nfunc: delete_servers\nmodule: chaosazure.postgresql.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/azure/#describe_databases","title":"<code>describe_databases</code>","text":"Type probe Module chaosazure.postgresql.probes Name describe_databases Return None <p>Describe Azure servers.</p> <p>\u2013 filter : str     Filter the servers. If the filter is omitted all servers in     the subscription will be selected for the probe.     Filtering example:     \u2018where resourceGroup==\u201dmyresourcegroup\u201d and name=\u201dmyresourcename\u201d\u2019 name_pattern : str     Filter the databases. If the filter is omitted all databases in     the server will be selected for the probe.     Pattern example:     \u2018app[0-9]{3}\u2019</p> <p>Signature:</p> <pre><code>def describe_databases(filter: str = None,\n                       name_pattern: str = None,\n                       configuration: Dict[str, Dict[str, str]] = None,\n                       secrets: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required filter string null No name_pattern string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"describe-databases\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosazure.postgresql.probes\",\n\"func\": \"describe_databases\"\n}\n}\n</code></pre> <pre><code>name: describe-databases\nprovider:\nfunc: describe_databases\nmodule: chaosazure.postgresql.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/azure/#describe_servers","title":"<code>describe_servers</code>","text":"Type probe Module chaosazure.postgresql.probes Name describe_servers Return None <p>Describe Azure servers.</p> <p>\u2013 filter : str     Filter the servers. If the filter is omitted all servers in     the subscription will be selected for the probe.     Filtering example:     \u2018where resourceGroup==\u201dmyresourcegroup\u201d and name=\u201dmyresourcename\u201d\u2019</p> <p>Signature:</p> <pre><code>def describe_servers(filter: str = None,\n                     configuration: Dict[str, Dict[str, str]] = None,\n                     secrets: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required filter string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"describe-servers\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosazure.postgresql.probes\",\n\"func\": \"describe_servers\"\n}\n}\n</code></pre> <pre><code>name: describe-servers\nprovider:\nfunc: describe_servers\nmodule: chaosazure.postgresql.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/azure/#restart_servers","title":"<code>restart_servers</code>","text":"Type action Module chaosazure.postgresql.actions Name restart_servers Return None <p>Restart servers at random.</p> <p>\u2013 filter : str, optional     Filter the servers. If the filter is omitted all servers in     the subscription will be selected as potential chaos candidates.</p> <p>Some calling examples. Deep dive into the filter syntax: https://docs.microsoft.com/en-us/azure/kusto/query/</p> <p>restart_servers(\u201cwhere resourceGroup==\u2019rg\u2019\u201c, c, s) Restart all servers from the group \u2018rg\u2019</p> <p>restart_servers(\u201cwhere resourceGroup==\u2019rg\u2019 and name=\u2019name\u2019\u201c, c, s) Restart the server from the group \u2018rg\u2019 having the name \u2018name\u2019</p> <p>restart_servers(\u201cwhere resourceGroup==\u2019rg\u2019 | sample 2\u201d, c, s) Restart two servers at random from the group \u2018rg\u2019</p> <p>Signature:</p> <pre><code>def restart_servers(filter: str = None,\n                    configuration: Dict[str, Dict[str, str]] = None,\n                    secrets: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required filter string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"restart-servers\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosazure.postgresql.actions\",\n\"func\": \"restart_servers\"\n}\n}\n</code></pre> <pre><code>name: restart-servers\nprovider:\nfunc: restart_servers\nmodule: chaosazure.postgresql.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/azure/#postgresql_flexible","title":"postgresql_flexible","text":""},{"location":"drivers/azure/#count_servers_1","title":"<code>count_servers</code>","text":"Type probe Module chaosazure.postgresql_flexible.probes Name count_servers Return integer <p>Return count of Azure servers.</p> <p>\u2013 filter : str     Filter the servers. If the filter is omitted all servers in     the subscription will be selected for the probe.     Filtering example:     \u2018where resourceGroup==\u201dmyresourcegroup\u201d and name=\u201dmyresourcename\u201d\u2019</p> <p>Signature:</p> <pre><code>def count_servers(filter: str = None,\n                  configuration: Dict[str, Dict[str, str]] = None,\n                  secrets: Dict[str, Dict[str, str]] = None) -&gt; int:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required filter string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"count-servers\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosazure.postgresql_flexible.probes\",\n\"func\": \"count_servers\"\n}\n}\n</code></pre> <pre><code>name: count-servers\nprovider:\nfunc: count_servers\nmodule: chaosazure.postgresql_flexible.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/azure/#create_databases_1","title":"<code>create_databases</code>","text":"Type action Module chaosazure.postgresql_flexible.actions Name create_databases Return None <p>Delete databases at random.</p> <p>Be aware: Deleting a database is an invasive action. You will not be able to recover the database once you deleted it.</p> <p>\u2013 filter : str, optional     Filter the servers. If the filter is omitted all databases     of all servers in the subscription will be selected     as potential chaos candidates.</p> <p>name : str, required     The name of the database to create.</p> <p>Some calling examples. Deep dive into the filter syntax: https://docs.microsoft.com/en-us/azure/kusto/query/</p> <p>create_databases(\u201cwhere resourceGroup==\u2019rg\u2019\u201c, \u2018chaos-test\u2019, c, s) Creating database named \u2018chaos-test\u2019 in all servers from the group \u2018rg\u2019</p> <p>create_databases(\u201cwhere resourceGroup==\u2019rg\u2019 and name=\u2019name\u2019\u201c, \u2018chaos-test\u2019, c, s) Creating database named \u2018chaos-test\u2019 the server from the group \u2018rg\u2019 having the name \u2018name\u2019</p> <p>Signature:</p> <pre><code>def create_databases(filter: str = None,\n                     name: str = None,\n                     charset: str = None,\n                     collation: str = None,\n                     configuration: Dict[str, Dict[str, str]] = None,\n                     secrets: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required filter string null No name string null No charset string null No collation string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"create-databases\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosazure.postgresql_flexible.actions\",\n\"func\": \"create_databases\"\n}\n}\n</code></pre> <pre><code>name: create-databases\nprovider:\nfunc: create_databases\nmodule: chaosazure.postgresql_flexible.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/azure/#delete_databases_1","title":"<code>delete_databases</code>","text":"Type action Module chaosazure.postgresql_flexible.actions Name delete_databases Return None <p>Delete databases at random.</p> <p>Be aware: Deleting a database is an invasive action. You will not be able to recover the database once you deleted it.</p> <p>\u2013 filter : str, optional     Filter the servers. If the filter is omitted all databases     of all servers in the subscription will be selected     as potential chaos candidates.</p> <p>name_pattern : str, optional     Filter the databases. If the filter is omitted all databases in     the server will be selected for the probe.     Pattern example:     \u2018app[0-9]{3}\u2019</p> <p>Some calling examples. Deep dive into the filter syntax: https://docs.microsoft.com/en-us/azure/kusto/query/</p> <p>delete_databases(\u201cwhere resourceGroup==\u2019rg\u2019\u201c, \u2018chaos-\u2019, c, s) Delete all database named \u2018chaos-\u2018 in all servers from the group \u2018rg\u2019</p> <p>delete_databases(\u201cwhere resourceGroup==\u2019rg\u2019 and name=\u2019name\u2019\u201c, \u2018chaos-test\u2019, c, s) Delete all database named \u2018chaos-*\u2019 the server from the group \u2018rg\u2019 having the name \u2018name\u2019</p> <p>Signature:</p> <pre><code>def delete_databases(filter: str = None,\n                     name_pattern: str = None,\n                     configuration: Dict[str, Dict[str, str]] = None,\n                     secrets: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required filter string null No name_pattern string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"delete-databases\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosazure.postgresql_flexible.actions\",\n\"func\": \"delete_databases\"\n}\n}\n</code></pre> <pre><code>name: delete-databases\nprovider:\nfunc: delete_databases\nmodule: chaosazure.postgresql_flexible.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/azure/#delete_servers_1","title":"<code>delete_servers</code>","text":"Type action Module chaosazure.postgresql_flexible.actions Name delete_servers Return None <p>Delete servers at random.</p> <p>Be aware: Deleting a server is an invasive action. You will not be able to recover the server once you deleted it.</p> <p>\u2013 filter : str, optional     Filter the servers. If the filter is omitted all servers in     the subscription will be selected as potential chaos candidates.</p> <p>Some calling examples. Deep dive into the filter syntax: https://docs.microsoft.com/en-us/azure/kusto/query/</p> <p>delete_servers(\u201cwhere resourceGroup==\u2019rg\u2019\u201c, c, s) Delete all servers from the group \u2018rg\u2019</p> <p>delete_servers(\u201cwhere resourceGroup==\u2019rg\u2019 and name=\u2019name\u2019\u201c, c, s) Delete the server from the group \u2018rg\u2019 having the name \u2018name\u2019</p> <p>delete_servers(\u201cwhere resourceGroup==\u2019rg\u2019 | sample 2\u201d, c, s) Delete two servers at random from the group \u2018rg\u2019</p> <p>Signature:</p> <pre><code>def delete_servers(filter: str = None,\n                   configuration: Dict[str, Dict[str, str]] = None,\n                   secrets: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required filter string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"delete-servers\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosazure.postgresql_flexible.actions\",\n\"func\": \"delete_servers\"\n}\n}\n</code></pre> <pre><code>name: delete-servers\nprovider:\nfunc: delete_servers\nmodule: chaosazure.postgresql_flexible.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/azure/#describe_databases_1","title":"<code>describe_databases</code>","text":"Type probe Module chaosazure.postgresql_flexible.probes Name describe_databases Return None <p>Describe Azure servers.</p> <p>\u2013 filter : str     Filter the servers. If the filter is omitted all servers in     the subscription will be selected for the probe.     Filtering example:     \u2018where resourceGroup==\u201dmyresourcegroup\u201d and name=\u201dmyresourcename\u201d\u2019 name_pattern : str     Filter the databases. If the filter is omitted all databases in     the server will be selected for the probe.     Pattern example:     \u2018app[0-9]{3}\u2019</p> <p>Signature:</p> <pre><code>def describe_databases(filter: str = None,\n                       name_pattern: str = None,\n                       configuration: Dict[str, Dict[str, str]] = None,\n                       secrets: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required filter string null No name_pattern string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"describe-databases\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosazure.postgresql_flexible.probes\",\n\"func\": \"describe_databases\"\n}\n}\n</code></pre> <pre><code>name: describe-databases\nprovider:\nfunc: describe_databases\nmodule: chaosazure.postgresql_flexible.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/azure/#describe_servers_1","title":"<code>describe_servers</code>","text":"Type probe Module chaosazure.postgresql_flexible.probes Name describe_servers Return None <p>Describe Azure servers.</p> <p>\u2013 filter : str     Filter the servers. If the filter is omitted all servers in     the subscription will be selected for the probe.     Filtering example:     \u2018where resourceGroup==\u201dmyresourcegroup\u201d and name=\u201dmyresourcename\u201d\u2019</p> <p>Signature:</p> <pre><code>def describe_servers(filter: str = None,\n                     configuration: Dict[str, Dict[str, str]] = None,\n                     secrets: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required filter string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"describe-servers\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosazure.postgresql_flexible.probes\",\n\"func\": \"describe_servers\"\n}\n}\n</code></pre> <pre><code>name: describe-servers\nprovider:\nfunc: describe_servers\nmodule: chaosazure.postgresql_flexible.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/azure/#restart_servers_1","title":"<code>restart_servers</code>","text":"Type action Module chaosazure.postgresql_flexible.actions Name restart_servers Return None <p>Restart servers at random.</p> <p>\u2013 filter : str, optional     Filter the servers. If the filter is omitted all servers in     the subscription will be selected as potential chaos candidates.</p> <p>Some calling examples. Deep dive into the filter syntax: https://docs.microsoft.com/en-us/azure/kusto/query/</p> <p>restart_servers(\u201cwhere resourceGroup==\u2019rg\u2019\u201c, c, s) Restart all servers from the group \u2018rg\u2019</p> <p>restart_servers(\u201cwhere resourceGroup==\u2019rg\u2019 and name=\u2019name\u2019\u201c, c, s) Restart the server from the group \u2018rg\u2019 having the name \u2018name\u2019</p> <p>restart_servers(\u201cwhere resourceGroup==\u2019rg\u2019 | sample 2\u201d, c, s) Restart two servers at random from the group \u2018rg\u2019</p> <p>Signature:</p> <pre><code>def restart_servers(filter: str = None,\n                    configuration: Dict[str, Dict[str, str]] = None,\n                    secrets: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required filter string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"restart-servers\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosazure.postgresql_flexible.actions\",\n\"func\": \"restart_servers\"\n}\n}\n</code></pre> <pre><code>name: restart-servers\nprovider:\nfunc: restart_servers\nmodule: chaosazure.postgresql_flexible.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/azure/#start_servers","title":"<code>start_servers</code>","text":"Type action Module chaosazure.postgresql_flexible.actions Name start_servers Return None <p>Start servers at random. Thought as a rollback action.</p> <p>\u2013 filter : str, optional     Filter the servers. If the filter is omitted all servers in     the subscription will be selected as potential chaos candidates.</p> <p>Some calling examples. Deep dive into the filter syntax: https://docs.microsoft.com/en-us/azure/kusto/query/</p> <p>start_servers(\u201cwhere resourceGroup==\u2019rg\u2019\u201c, c, s) Start all stopped servers from the group \u2018rg\u2019</p> <p>start_servers(\u201cwhere resourceGroup==\u2019rg\u2019 and name=\u2019name\u2019\u201c, c, s) Start the stopped server from the group \u2018rg\u2019 having the name \u2018name\u2019</p> <p>start_servers(\u201cwhere resourceGroup==\u2019rg\u2019 | sample 2\u201d, c, s) Start two stopped servers at random from the group \u2018rg\u2019</p> <p>Signature:</p> <pre><code>def start_servers(filter: str = None,\n                  configuration: Dict[str, Dict[str, str]] = None,\n                  secrets: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required filter string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"start-servers\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosazure.postgresql_flexible.actions\",\n\"func\": \"start_servers\"\n}\n}\n</code></pre> <pre><code>name: start-servers\nprovider:\nfunc: start_servers\nmodule: chaosazure.postgresql_flexible.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/azure/#stop_servers","title":"<code>stop_servers</code>","text":"Type action Module chaosazure.postgresql_flexible.actions Name stop_servers Return None <p>Stop servers at random.</p> <p>\u2013 filter : str, optional     Filter the servers. If the filter is omitted all servers in     the subscription will be selected as potential chaos candidates.</p> <p>Some calling examples. Deep dive into the filter syntax: https://docs.microsoft.com/en-us/azure/kusto/query/</p> <p>stop_servers(\u201cwhere resourceGroup==\u2019rg\u2019\u201c, c, s) Stop all servers from the group \u2018rg\u2019</p> <p>stop_servers(\u201cwhere resourceGroup==\u2019mygroup\u2019 and name=\u2019myname\u2019\u201c, c, s) Stop the server from the group \u2018mygroup\u2019 having the name \u2018myname\u2019</p> <p>stop_servers(\u201cwhere resourceGroup==\u2019mygroup\u2019 | sample 2\u201d, c, s) Stop two servers at random from the group \u2018mygroup\u2019</p> <p>Signature:</p> <pre><code>def stop_servers(filter: str = None,\n                 configuration: Dict[str, Dict[str, str]] = None,\n                 secrets: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required filter string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"stop-servers\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosazure.postgresql_flexible.actions\",\n\"func\": \"stop_servers\"\n}\n}\n</code></pre> <pre><code>name: stop-servers\nprovider:\nfunc: stop_servers\nmodule: chaosazure.postgresql_flexible.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/azure/#vmss","title":"vmss","text":""},{"location":"drivers/azure/#burn_io_1","title":"<code>burn_io</code>","text":"Type action Module chaosazure.vmss.actions Name burn_io Return None <p>Increases the Disk I/O operations per second of the VMSS machine. Similar to the burn_io action of the machine.actions module.</p> <p>Signature:</p> <p>Arguments:</p> Name Type Default Required filter string null No duration integer 60 No timeout integer 60 No instance_criteria object null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"burn-io\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosazure.vmss.actions\",\n\"func\": \"burn_io\"\n}\n}\n</code></pre> <pre><code>name: burn-io\nprovider:\nfunc: burn_io\nmodule: chaosazure.vmss.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/azure/#count_instances","title":"<code>count_instances</code>","text":"Type probe Module chaosazure.vmss.probes Name count_instances Return integer <p>Return count of VMSS instances.</p> <p>\u2013 filter : str     Filter the VMSS instance. If the filter is omitted all machines in     the subscription will be selected for the probe.     Filtering example:     \u2018where resourceGroup==\u201dmyresourcegroup\u201d and name=\u201dmyresourcename\u201d\u2019</p> <p>Signature:</p> <pre><code>def count_instances(filter: str = None,\n                    configuration: Dict[str, Dict[str, str]] = None,\n                    secrets: Dict[str, Dict[str, str]] = None) -&gt; int:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required filter string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"count-instances\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosazure.vmss.probes\",\n\"func\": \"count_instances\"\n}\n}\n</code></pre> <pre><code>name: count-instances\nprovider:\nfunc: count_instances\nmodule: chaosazure.vmss.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/azure/#deallocate_vmss","title":"<code>deallocate_vmss</code>","text":"Type action Module chaosazure.vmss.actions Name deallocate_vmss Return None <p>Deallocate a virtual machine scale set instance at random.</p> <p>\u2013 filter : str     Filter the virtual machine scale set. If the filter is omitted all     virtual machine scale sets in the subscription will be selected as     potential chaos candidates.     Filtering example:     \u2018where resourceGroup==\u201dmyresourcegroup\u201d and name=\u201dmyresourcename\u201d\u2019</p> <p>Signature:</p> <p>Arguments:</p> Name Type Default Required filter string null No instance_criteria object null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"deallocate-vmss\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosazure.vmss.actions\",\n\"func\": \"deallocate_vmss\"\n}\n}\n</code></pre> <pre><code>name: deallocate-vmss\nprovider:\nfunc: deallocate_vmss\nmodule: chaosazure.vmss.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/azure/#delete_vmss","title":"<code>delete_vmss</code>","text":"Type action Module chaosazure.vmss.actions Name delete_vmss Return None <p>Delete a virtual machine scale set instance at random.</p> <p>Be aware: Deleting a VMSS instance is an invasive action. You will not be able to recover the VMSS instance once you deleted it.</p> <p>\u2013 filter : str     Filter the virtual machine scale set. If the filter is omitted all     virtual machine scale sets in the subscription will be selected as     potential chaos candidates.     Filtering example:     \u2018where resourceGroup==\u201dmyresourcegroup\u201d and name=\u201dmyresourcename\u201d\u2019</p> <p>Signature:</p> <p>Arguments:</p> Name Type Default Required filter string null No instance_criteria object null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"delete-vmss\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosazure.vmss.actions\",\n\"func\": \"delete_vmss\"\n}\n}\n</code></pre> <pre><code>name: delete-vmss\nprovider:\nfunc: delete_vmss\nmodule: chaosazure.vmss.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/azure/#fill_disk_1","title":"<code>fill_disk</code>","text":"Type action Module chaosazure.vmss.actions Name fill_disk Return None <p>Fill the VMSS machine disk with random data. Similar to the fill_disk action of the machine.actions module.</p> <p>Signature:</p> <p>Arguments:</p> Name Type Default Required filter string null No duration integer 120 No timeout integer 60 No size integer 1000 No path string null No instance_criteria object null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"fill-disk\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosazure.vmss.actions\",\n\"func\": \"fill_disk\"\n}\n}\n</code></pre> <pre><code>name: fill-disk\nprovider:\nfunc: fill_disk\nmodule: chaosazure.vmss.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/azure/#network_latency_1","title":"<code>network_latency</code>","text":"Type action Module chaosazure.vmss.actions Name network_latency Return None <p>Increases the response time of the virtual machine. Similar to the network_latency action of the machine.actions module.</p> <p>Signature:</p> <p>Arguments:</p> Name Type Default Required filter string null No duration integer 60 No delay integer 200 No jitter integer 50 No timeout integer 60 No instance_criteria object null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"network-latency\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosazure.vmss.actions\",\n\"func\": \"network_latency\"\n}\n}\n</code></pre> <pre><code>name: network-latency\nprovider:\nfunc: network_latency\nmodule: chaosazure.vmss.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/azure/#restart_vmss","title":"<code>restart_vmss</code>","text":"Type action Module chaosazure.vmss.actions Name restart_vmss Return None <p>Restart a virtual machine scale set instance at random.</p> <p>\u2013 filter : str     Filter the virtual machine scale set. If the filter is omitted all     virtual machine scale sets in the subscription will be selected as     potential chaos candidates.     Filtering example:     \u2018where resourceGroup==\u201dmyresourcegroup\u201d and name=\u201dmyresourcename\u201d\u2019</p> <p>Signature:</p> <p>Arguments:</p> Name Type Default Required filter string null No instance_criteria object null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"restart-vmss\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosazure.vmss.actions\",\n\"func\": \"restart_vmss\"\n}\n}\n</code></pre> <pre><code>name: restart-vmss\nprovider:\nfunc: restart_vmss\nmodule: chaosazure.vmss.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/azure/#stop_vmss","title":"<code>stop_vmss</code>","text":"Type action Module chaosazure.vmss.actions Name stop_vmss Return None <p>Stops instances from the filtered scale set either at random or by  a defined instance criteria.</p> <p>\u2013 filter : str     Filter the virtual machine scale set. If the filter is omitted all     virtual machine scale sets in the subscription will be selected as     potential chaos candidates.     Filtering example:     \u2018where resourceGroup==\u201dmyresourcegroup\u201d and name=\u201dmyresourcename\u201d\u2019 instance_criteria :  Iterable[Mapping[str, any]]     Allows specification of criteria for selection of a given virtual     machine scale set instance. If the instance_criteria is omitted,     an instance will be chosen at random. All of the criteria within each     item of the Iterable must match, i.e. AND logic is applied.     The first item with all matching criterion will be used to select the     instance.     Criteria example:     [ {\u201cname\u201d: \u201cmyVMSSInstance1\u201d}, {  \u201cname\u201d: \u201cmyVMSSInstance2\u201d,  \u201cinstanceId\u201d: \u201c2\u201d } {\u201cinstanceId\u201d: \u201c3\u201d},     ]     If the instances include two items. One with name = myVMSSInstance4     and instanceId = 2. The other with name = myVMSSInstance2 and     instanceId = 3. The criteria {\u201cinstanceId\u201d: \u201c3\u201d} will be the first     match since both the name and the instanceId did not match on the     first criteria.</p> <p>Signature:</p> <p>Arguments:</p> Name Type Default Required filter string null No instance_criteria object null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"stop-vmss\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosazure.vmss.actions\",\n\"func\": \"stop_vmss\"\n}\n}\n</code></pre> <pre><code>name: stop-vmss\nprovider:\nfunc: stop_vmss\nmodule: chaosazure.vmss.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/azure/#stress_vmss_instance_cpu","title":"<code>stress_vmss_instance_cpu</code>","text":"Type action Module chaosazure.vmss.actions Name stress_vmss_instance_cpu Return None <p>Signature:</p> <p>Arguments:</p> Name Type Default Required filter string null No duration integer 120 No timeout integer 60 No instance_criteria object null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"stress-vmss-instance-cpu\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosazure.vmss.actions\",\n\"func\": \"stress_vmss_instance_cpu\"\n}\n}\n</code></pre> <pre><code>name: stress-vmss-instance-cpu\nprovider:\nfunc: stress_vmss_instance_cpu\nmodule: chaosazure.vmss.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/azure/#webapp","title":"webapp","text":""},{"location":"drivers/azure/#delete_webapp","title":"<code>delete_webapp</code>","text":"Type action Module chaosazure.webapp.actions Name delete_webapp Return None <p>Delete a web app at random.</p> <p>***Be aware**: Deleting a web app is an invasive action. You will not be able to recover the web app once you deleted it.</p> <p>\u2013 filter : str     Filter the web apps. If the filter is omitted all web apps in     the subscription will be selected as potential chaos candidates.     Filtering example:     \u2018where resourceGroup==\u201dmyresourcegroup\u201d and name=\u201dmyresourcename\u201d\u2019</p> <p>Signature:</p> <pre><code>def delete_webapp(filter: str = None,\n                  configuration: Dict[str, Dict[str, str]] = None,\n                  secrets: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required filter string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"delete-webapp\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosazure.webapp.actions\",\n\"func\": \"delete_webapp\"\n}\n}\n</code></pre> <pre><code>name: delete-webapp\nprovider:\nfunc: delete_webapp\nmodule: chaosazure.webapp.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/azure/#restart_webapp","title":"<code>restart_webapp</code>","text":"Type action Module chaosazure.webapp.actions Name restart_webapp Return None <p>Restart a web app at random.</p> <p>\u2013 filter : str     Filter the web apps. If the filter is omitted all web apps in     the subscription will be selected as potential chaos candidates.     Filtering example:     \u2018where resourceGroup==\u201dmyresourcegroup\u201d and name=\u201dmyresourcename\u201d\u2019</p> <p>Signature:</p> <pre><code>def restart_webapp(filter: str = None,\n                   configuration: Dict[str, Dict[str, str]] = None,\n                   secrets: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required filter string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"restart-webapp\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosazure.webapp.actions\",\n\"func\": \"restart_webapp\"\n}\n}\n</code></pre> <pre><code>name: restart-webapp\nprovider:\nfunc: restart_webapp\nmodule: chaosazure.webapp.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/azure/#start_webapp","title":"<code>start_webapp</code>","text":"Type action Module chaosazure.webapp.actions Name start_webapp Return None <p>Start a web app at random.</p> <p>\u2013 filter : str     Filter the web apps. If the filter is omitted all web apps in     the subscription will be selected as potential chaos candidates.     Filtering example:     \u2018where resourceGroup==\u201dmyresourcegroup\u201d and name=\u201dmyresourcename\u201d\u2019</p> <p>Signature:</p> <pre><code>def start_webapp(filter: str = None,\n                 configuration: Dict[str, Dict[str, str]] = None,\n                 secrets: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required filter string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"start-webapp\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosazure.webapp.actions\",\n\"func\": \"start_webapp\"\n}\n}\n</code></pre> <pre><code>name: start-webapp\nprovider:\nfunc: start_webapp\nmodule: chaosazure.webapp.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/azure/#stop_webapp","title":"<code>stop_webapp</code>","text":"Type action Module chaosazure.webapp.actions Name stop_webapp Return None <p>Stop a web app at random.</p> <p>\u2013 filter : str     Filter the web apps. If the filter is omitted all web apps in     the subscription will be selected as potential chaos candidates.     Filtering example:     \u2018where resourceGroup==\u201dmyresourcegroup\u201d and name=\u201dmyresourcename\u201d\u2019</p> <p>Signature:</p> <pre><code>def stop_webapp(filter: str = None,\n                configuration: Dict[str, Dict[str, str]] = None,\n                secrets: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required filter string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"stop-webapp\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosazure.webapp.actions\",\n\"func\": \"stop_webapp\"\n}\n}\n</code></pre> <pre><code>name: stop-webapp\nprovider:\nfunc: stop_webapp\nmodule: chaosazure.webapp.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/cloudfoundry/","title":"Extension <code>chaoscf</code>","text":"Version 0.7.3 Repository https://github.com/chaostoolkit-incubator/chaostoolkit-cloud-foundry <p>This extension package provides probes and actions for Chaos Engineering experiments against a Cloud Foundry instance using the Chaos Toolkit.</p>"},{"location":"drivers/cloudfoundry/#install","title":"Install","text":"<p>This package requires Python 3.7+</p> <p>To be used from your experiment, this package must be installed in the Python environment where chaostoolkit already lives.</p> <pre><code>$ pip install -U chaostoolkit-cloud-foundry\n</code></pre>"},{"location":"drivers/cloudfoundry/#usage","title":"Usage","text":"<p>To use the probes and actions from this package, add a similar payload to your experiment file:</p> <pre><code>{\n\"type\": \"action\",\n\"name\": \"terminate-random-instance\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaoscf.probes\",\n\"func\": \"terminate_some_random_instance\",\n\"arguments\": {\n\"name\": \"my-app\",\n\"org_name\": \"my-org\",\n\"space_name\": \"my-space\"\n}\n}\n},\n{\n\"type\": \"probe\",\n\"name\": \"fetch-app-statistics\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaoscf.probes\",\n\"func\": \"get_app_stats\",\n\"arguments\": {\n\"name\": \"my-app\",\n\"org_name\": \"my-org\",\n\"space_name\": \"my-space\"\n}\n}\n}\n</code></pre> <p>That\u2019s it!</p> <p>Please explore the code to see existing probes and actions.</p>"},{"location":"drivers/cloudfoundry/#discovery","title":"Discovery","text":"<p>You may use the Chaos Toolkit to discover the capabilities of this extension:</p> <pre><code>$ chaos discover chaostoolkit-cloud-foundry --no-install\n</code></pre> <p>If you have logged in against a Cloud Foundry environment, this will discover information about it along the way.</p>"},{"location":"drivers/cloudfoundry/#configuration","title":"Configuration","text":"<p>This extension to the Chaos Toolkit need credentials to a Cloud Foundry account with appropriate scopes. Please add the following sections to your experiment file:</p> <pre><code>{\n\"configuration\": {\n\"cf_api_url\": \"https://api.local.pcfdev.io\",\n\"cf_verify_ssl\": false\n},\n\"secrets\": {\n\"cloudfoundry\": {\n\"cf_username\": \"user\",\n\"cf_password\": \"pass\"\n}\n}\n}\n</code></pre> <p>You may leave <code>\"cf_verifiy_ssl\"</code> out of the configuration when you want to verify TLS certificates. Usually, local environments are self-signed so it may be useful to disable that check in that case.</p> <p>You may also specify the <code>\"cf_client_id\"</code> and <code>\"cf_client_secret\"</code> secrets when you need. Their default values are <code>\"cf\"</code> and <code>\"\"</code> respectively. These work well against a local PCF dev install.</p> <p>Then in your probe or action:</p> <pre><code>{\n\"type\": \"probe\",\n\"name\": \"fetch-app-statistics\",\n\"provider\": {\n\"type\": \"python\",\n\"secrets\": [\"cloudfoundry\"],\n\"module\": \"chaoscf.probes\",\n\"func\": \"get_app_stats\",\n\"arguments\": {\n\"name\": \"my-app\",\n\"org_name\": \"my-org\",\n\"space_name\": \"my-space\"\n}\n}\n}\n</code></pre>"},{"location":"drivers/cloudfoundry/#test","title":"Test","text":"<p>To run the tests for the project execute the following:</p> <pre><code>$ pip install -r requirements-dev.txt\n$ pytest\n</code></pre>"},{"location":"drivers/cloudfoundry/#contribute","title":"Contribute","text":"<p>If you wish to contribute more functions to this package, you are more than welcome to do so. Please, fork this project, make your changes following the usual PEP 8 code style, sprinkling with tests and submit a PR for review.</p> <p>The Chaos Toolkit project requires all contributors must sign a Developer Certificate of Origin on each commit they would like to merge into the master branch of the repository. Please, make sure you can abide by the rules of the DCO before submitting a PR.</p>"},{"location":"drivers/cloudfoundry/#develop","title":"Develop","text":"<p>If you wish to develop on this project, make sure to install the development dependencies. But first, create a virtual environment and then install those dependencies.</p> <pre><code>$ pip install -r requirements-dev.txt -r requirements.txt </code></pre> <p>Then, point your environment to this directory:</p> <pre><code>$ python setup.py develop\n</code></pre> <p>Now, you can edit the files and they will be automatically be seen by your environment, even when running from the <code>chaos</code> command locally.</p>"},{"location":"drivers/cloudfoundry/#test_1","title":"Test","text":"<p>To run the tests for the project execute the following:</p> <pre><code>$ python setup.py test\n</code></pre>"},{"location":"drivers/cloudfoundry/#exported-activities","title":"Exported Activities","text":""},{"location":"drivers/cloudfoundry/#actions","title":"actions","text":""},{"location":"drivers/cloudfoundry/#delete_app","title":"<code>delete_app</code>","text":"Type action Module chaoscf.actions Name delete_app Return None <p>Delete application.</p> <p>See https://apidocs.cloudfoundry.org/280/apps/delete_a_particular_app.html</p> <p>Signature:</p> <pre><code>def delete_app(app_name: str,\n               configuration: Dict[str, Dict[str, str]],\n               secrets: Dict[str, Dict[str, str]],\n               org_name: str = None,\n               space_name: str = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required app_name string Yes org_name string null No space_name string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"delete-app\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaoscf.actions\",\n\"func\": \"delete_app\",\n\"arguments\": {\n\"app_name\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: delete-app\nprovider:\narguments:\napp_name: ''\nfunc: delete_app\nmodule: chaoscf.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/cloudfoundry/#map_route_to_app","title":"<code>map_route_to_app</code>","text":"Type action Module chaoscf.actions Name map_route_to_app Return list <p>Map a specific route to a given application.</p> <p>As Domains are deprecated in the Cloud Foundry API, they are not specified here. See https://apidocs.cloudfoundry.org/280/#domains--deprecated- See https://www.cloudfoundry.org/blog/coming-changes-app-manifest-simplification/</p> <p>See https://apidocs.cloudfoundry.org/280/apps/remove_route_from_the_app.html</p> <p>Signature:</p> <pre><code>def map_route_to_app(app_name: str,\n                     host_name: str,\n                     configuration: Dict[str, Dict[str, str]],\n                     secrets: Dict[str, Dict[str, str]],\n                     org_name: str = None,\n                     space_name: str = None) -&gt; List[Dict[str, Any]]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required app_name string Yes host_name string Yes org_name string null No space_name string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"map-route-to-app\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaoscf.actions\",\n\"func\": \"map_route_to_app\",\n\"arguments\": {\n\"app_name\": \"\",\n\"host_name\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: map-route-to-app\nprovider:\narguments:\napp_name: ''\nhost_name: ''\nfunc: map_route_to_app\nmodule: chaoscf.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/cloudfoundry/#remove_routes_from_app","title":"<code>remove_routes_from_app</code>","text":"Type action Module chaoscf.actions Name remove_routes_from_app Return None <p>Remove routes from a given application.</p> <p>See https://apidocs.cloudfoundry.org/280/apps/remove_route_from_the_app.html</p> <p>Signature:</p> <pre><code>def remove_routes_from_app(app_name: str,\n                           route_host: str,\n                           configuration: Dict[str, Dict[str, str]],\n                           secrets: Dict[str, Dict[str, str]],\n                           org_name: str = None,\n                           space_name: str = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required app_name string Yes route_host string Yes org_name string null No space_name string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"remove-routes-from-app\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaoscf.actions\",\n\"func\": \"remove_routes_from_app\",\n\"arguments\": {\n\"app_name\": \"\",\n\"route_host\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: remove-routes-from-app\nprovider:\narguments:\napp_name: ''\nroute_host: ''\nfunc: remove_routes_from_app\nmodule: chaoscf.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/cloudfoundry/#start_all_apps","title":"<code>start_all_apps</code>","text":"Type action Module chaoscf.actions Name start_all_apps Return None <p>Start all applications for the specified org name</p> <p>See https://apidocs.cloudfoundry.org/280/apps/updating_an_app.html</p> <p>Signature:</p> <pre><code>def start_all_apps(org_name: str, configuration: Dict[str, Dict[str, str]],\n                   secrets: Dict[str, Dict[str, str]]):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required org_name string Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"start-all-apps\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaoscf.actions\",\n\"func\": \"start_all_apps\",\n\"arguments\": {\n\"org_name\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: start-all-apps\nprovider:\narguments:\norg_name: ''\nfunc: start_all_apps\nmodule: chaoscf.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/cloudfoundry/#start_app","title":"<code>start_app</code>","text":"Type action Module chaoscf.actions Name start_app Return None <p>Start application</p> <p>See https://apidocs.cloudfoundry.org/280/apps/updating_an_app.html</p> <p>Signature:</p> <pre><code>def start_app(app_name: str,\n              configuration: Dict[str, Dict[str, str]],\n              secrets: Dict[str, Dict[str, str]],\n              org_name: str = None,\n              space_name: str = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required app_name string Yes org_name string null No space_name string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"start-app\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaoscf.actions\",\n\"func\": \"start_app\",\n\"arguments\": {\n\"app_name\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: start-app\nprovider:\narguments:\napp_name: ''\nfunc: start_app\nmodule: chaoscf.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/cloudfoundry/#stop_all_apps","title":"<code>stop_all_apps</code>","text":"Type action Module chaoscf.actions Name stop_all_apps Return None <p>Stop all application for the specified org name</p> <p>See https://apidocs.cloudfoundry.org/280/apps/updating_an_app.html</p> <p>Signature:</p> <pre><code>def stop_all_apps(org_name: str, configuration: Dict[str, Dict[str, str]],\n                  secrets: Dict[str, Dict[str, str]]):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required org_name string Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"stop-all-apps\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaoscf.actions\",\n\"func\": \"stop_all_apps\",\n\"arguments\": {\n\"org_name\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: stop-all-apps\nprovider:\narguments:\norg_name: ''\nfunc: stop_all_apps\nmodule: chaoscf.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/cloudfoundry/#stop_app","title":"<code>stop_app</code>","text":"Type action Module chaoscf.actions Name stop_app Return None <p>Stop application</p> <p>See https://apidocs.cloudfoundry.org/280/apps/updating_an_app.html</p> <p>Signature:</p> <pre><code>def stop_app(app_name: str,\n             configuration: Dict[str, Dict[str, str]],\n             secrets: Dict[str, Dict[str, str]],\n             org_name: str = None,\n             space_name: str = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required app_name string Yes org_name string null No space_name string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"stop-app\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaoscf.actions\",\n\"func\": \"stop_app\",\n\"arguments\": {\n\"app_name\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: stop-app\nprovider:\narguments:\napp_name: ''\nfunc: stop_app\nmodule: chaoscf.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/cloudfoundry/#terminate_app_instance","title":"<code>terminate_app_instance</code>","text":"Type action Module chaoscf.actions Name terminate_app_instance Return None <p>Terminate the application\u2019s instance at the given index.</p> <p>See https://apidocs.cloudfoundry.org/280/apps/terminate_the_running_app_instance_at_the_given_index.html</p> <p>Signature:</p> <pre><code>def terminate_app_instance(app_name: str,\n                           instance_index: int,\n                           configuration: Dict[str, Dict[str, str]],\n                           secrets: Dict[str, Dict[str, str]],\n                           org_name: str = None,\n                           space_name: str = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required app_name string Yes instance_index integer Yes org_name string null No space_name string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"terminate-app-instance\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaoscf.actions\",\n\"func\": \"terminate_app_instance\",\n\"arguments\": {\n\"app_name\": \"\",\n\"instance_index\": 0\n}\n}\n}\n</code></pre> <pre><code>name: terminate-app-instance\nprovider:\narguments:\napp_name: ''\ninstance_index: 0\nfunc: terminate_app_instance\nmodule: chaoscf.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/cloudfoundry/#terminate_some_random_instance","title":"<code>terminate_some_random_instance</code>","text":"Type action Module chaoscf.actions Name terminate_some_random_instance Return None <p>Terminate a random application\u2019s instance.</p> <p>See https://apidocs.cloudfoundry.org/280/apps/terminate_the_running_app_instance_at_the_given_index.html</p> <p>Signature:</p> <pre><code>def terminate_some_random_instance(app_name: str,\n                                   configuration: Dict[str, Dict[str, str]],\n                                   secrets: Dict[str, Dict[str, str]],\n                                   org_name: str = None,\n                                   space_name: str = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required app_name string Yes org_name string null No space_name string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"terminate-some-random-instance\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaoscf.actions\",\n\"func\": \"terminate_some_random_instance\",\n\"arguments\": {\n\"app_name\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: terminate-some-random-instance\nprovider:\narguments:\napp_name: ''\nfunc: terminate_some_random_instance\nmodule: chaoscf.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/cloudfoundry/#unbind_service_from_app","title":"<code>unbind_service_from_app</code>","text":"Type action Module chaoscf.actions Name unbind_service_from_app Return None <p>Unbind the service from the given application.</p> <p>See https://apidocs.cloudfoundry.org/280/service_bindings/delete_a_particular_service_binding.html</p> <p>Signature:</p> <pre><code>def unbind_service_from_app(app_name: str,\n                            bind_name: str,\n                            configuration: Dict[str, Dict[str, str]],\n                            secrets: Dict[str, Dict[str, str]],\n                            org_name: str = None,\n                            space_name: str = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required app_name string Yes bind_name string Yes org_name string null No space_name string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"unbind-service-from-app\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaoscf.actions\",\n\"func\": \"unbind_service_from_app\",\n\"arguments\": {\n\"app_name\": \"\",\n\"bind_name\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: unbind-service-from-app\nprovider:\narguments:\napp_name: ''\nbind_name: ''\nfunc: unbind_service_from_app\nmodule: chaoscf.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/cloudfoundry/#unmap_route_from_app","title":"<code>unmap_route_from_app</code>","text":"Type action Module chaoscf.actions Name unmap_route_from_app Return None <p>Unmap a specific route from a given application.</p> <p>As Domains are deprecated in the Cloud Foundry API, they are not specified here. See https://apidocs.cloudfoundry.org/280/#domains--deprecated- See https://www.cloudfoundry.org/blog/coming-changes-app-manifest-simplification/</p> <p>See https://apidocs.cloudfoundry.org/280/apps/remove_route_from_the_app.html</p> <p>Signature:</p> <pre><code>def unmap_route_from_app(app_name: str,\n                         host_name: str,\n                         configuration: Dict[str, Dict[str, str]],\n                         secrets: Dict[str, Dict[str, str]],\n                         org_name: str = None,\n                         space_name: str = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required app_name string Yes host_name string Yes org_name string null No space_name string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"unmap-route-from-app\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaoscf.actions\",\n\"func\": \"unmap_route_from_app\",\n\"arguments\": {\n\"app_name\": \"\",\n\"host_name\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: unmap-route-from-app\nprovider:\narguments:\napp_name: ''\nhost_name: ''\nfunc: unmap_route_from_app\nmodule: chaoscf.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/cloudfoundry/#api","title":"api","text":""},{"location":"drivers/cloudfoundry/#call_api","title":"<code>call_api</code>","text":"Type Module chaoscf.api Name call_api Return requests.models.Response <p>Perform a Cloud Foundry API call and return the full response to the caller.</p> <p>Signature:</p> <pre><code>def call_api(path: str,\n             configuration: Dict[str, Dict[str, str]],\n             secrets: Dict[str, Dict[str, str]],\n             query: Dict[str, Any] = None,\n             body: Dict[str, Any] = None,\n             method: str = 'GET',\n             headers: Dict[str, str] = None) -&gt; requests.models.Response:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required path string Yes query mapping null No body mapping null No method string \u201cGET\u201d No headers mapping null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"call-api\",\n\"type\": \"\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaoscf.api\",\n\"func\": \"call_api\",\n\"arguments\": {\n\"path\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: call-api\nprovider:\narguments:\npath: ''\nfunc: call_api\nmodule: chaoscf.api\ntype: python\ntype: ''\n</code></pre>"},{"location":"drivers/cloudfoundry/#get_app_by_name","title":"<code>get_app_by_name</code>","text":"Type Module chaoscf.api Name get_app_by_name Return mapping <p>Get the application with the given name.</p> <p>You may restrict the search by organization and/or space by providing the various according parameters. When passing the names, the function performs a lookup for each of them to fetch their GUID.</p> <p>See https://apidocs.cloudfoundry.org/280/apps/list_all_apps.html</p> <p>Signature:</p> <pre><code>def get_app_by_name(app_name: str,\n                    configuration: Dict[str, Dict[str, str]],\n                    secrets: Dict[str, Dict[str, str]],\n                    space_name: str = None,\n                    space_guid: str = None,\n                    org_name: str = None,\n                    org_guid: str = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required app_name string Yes space_name string null No space_guid string null No org_name string null No org_guid string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"get-app-by-name\",\n\"type\": \"\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaoscf.api\",\n\"func\": \"get_app_by_name\",\n\"arguments\": {\n\"app_name\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: get-app-by-name\nprovider:\narguments:\napp_name: ''\nfunc: get_app_by_name\nmodule: chaoscf.api\ntype: python\ntype: ''\n</code></pre>"},{"location":"drivers/cloudfoundry/#get_app_instances","title":"<code>get_app_instances</code>","text":"Type Module chaoscf.api Name get_app_instances Return mapping <p>Get all the instances of a started application.</p> <p>See https://apidocs.cloudfoundry.org/280/apps/get_the_instance_information_for_a_started_app.html</p> <p>Signature:</p> <pre><code>def get_app_instances(app_name: str,\n                      configuration: Dict[str, Dict[str, str]],\n                      secrets: Dict[str, Dict[str, str]],\n                      space_name: str = None,\n                      space_guid: str = None,\n                      org_name: str = None,\n                      org_guid: str = None) -&gt; Dict[str, Dict[str, Any]]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required app_name string Yes space_name string null No space_guid string null No org_name string null No org_guid string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"get-app-instances\",\n\"type\": \"\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaoscf.api\",\n\"func\": \"get_app_instances\",\n\"arguments\": {\n\"app_name\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: get-app-instances\nprovider:\narguments:\napp_name: ''\nfunc: get_app_instances\nmodule: chaoscf.api\ntype: python\ntype: ''\n</code></pre>"},{"location":"drivers/cloudfoundry/#get_app_routes_by_host","title":"<code>get_app_routes_by_host</code>","text":"Type Module chaoscf.api Name get_app_routes_by_host Return list <p>Get all routes associated with the provided app and the given host.</p> <p>See https://apidocs.cloudfoundry.org/280/routes/list_all_routes.html</p> <p>Signature:</p> <pre><code>def get_app_routes_by_host(app_name: str,\n                           route_host: str,\n                           configuration: Dict[str, Dict[str, str]],\n                           secrets: Dict[str, Dict[str, str]],\n                           space_name: str = None,\n                           space_guid: str = None,\n                           org_name: str = None,\n                           org_guid: str = None) -&gt; List[Dict[str, Any]]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required app_name string Yes route_host string Yes space_name string null No space_guid string null No org_name string null No org_guid string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"get-app-routes-by-host\",\n\"type\": \"\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaoscf.api\",\n\"func\": \"get_app_routes_by_host\",\n\"arguments\": {\n\"app_name\": \"\",\n\"route_host\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: get-app-routes-by-host\nprovider:\narguments:\napp_name: ''\nroute_host: ''\nfunc: get_app_routes_by_host\nmodule: chaoscf.api\ntype: python\ntype: ''\n</code></pre>"},{"location":"drivers/cloudfoundry/#get_apps_for_org","title":"<code>get_apps_for_org</code>","text":"Type Module chaoscf.api Name get_apps_for_org Return None <p>List all applications available in the specified CF org name.</p> <p>See https://apidocs.cloudfoundry.org/280/apps/list_all_apps.html to understand the content of the response.</p> <p>Signature:</p> <pre><code>def get_apps_for_org(org_name: str, configuration: Dict[str, Dict[str, str]],\n                     secrets: Dict[str, Dict[str, str]]):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required org_name string Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"get-apps-for-org\",\n\"type\": \"\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaoscf.api\",\n\"func\": \"get_apps_for_org\",\n\"arguments\": {\n\"org_name\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: get-apps-for-org\nprovider:\narguments:\norg_name: ''\nfunc: get_apps_for_org\nmodule: chaoscf.api\ntype: python\ntype: ''\n</code></pre>"},{"location":"drivers/cloudfoundry/#get_bind_by_name","title":"<code>get_bind_by_name</code>","text":"Type Module chaoscf.api Name get_bind_by_name Return mapping <p>Get the service bind with the given name.</p> <p>You may restrict the search by organization and/or space by providing the various according parameters. When passing the names, the function performs a lookup for each of them to fetch their GUID.</p> <p>See https://apidocs.cloudfoundry.org/280/apps/list_all_apps.html</p> <p>Signature:</p> <pre><code>def get_bind_by_name(bind_name: str,\n                     configuration: Dict[str, Dict[str, str]],\n                     secrets: Dict[str, Dict[str, str]],\n                     app_name: str = None,\n                     space_name: str = None,\n                     space_guid: str = None,\n                     org_name: str = None,\n                     org_guid: str = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required bind_name string Yes app_name string null No space_name string null No space_guid string null No org_name string null No org_guid string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"get-bind-by-name\",\n\"type\": \"\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaoscf.api\",\n\"func\": \"get_bind_by_name\",\n\"arguments\": {\n\"bind_name\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: get-bind-by-name\nprovider:\narguments:\nbind_name: ''\nfunc: get_bind_by_name\nmodule: chaoscf.api\ntype: python\ntype: ''\n</code></pre>"},{"location":"drivers/cloudfoundry/#get_org_by_name","title":"<code>get_org_by_name</code>","text":"Type Module chaoscf.api Name get_org_by_name Return mapping <p>Get the organization with the given name.</p> <p>Signature:</p> <pre><code>def get_org_by_name(org_name: str, configuration: Dict[str, Dict[str, str]],\n                    secrets: Dict[str, Dict[str, str]]) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required org_name string Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"get-org-by-name\",\n\"type\": \"\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaoscf.api\",\n\"func\": \"get_org_by_name\",\n\"arguments\": {\n\"org_name\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: get-org-by-name\nprovider:\narguments:\norg_name: ''\nfunc: get_org_by_name\nmodule: chaoscf.api\ntype: python\ntype: ''\n</code></pre>"},{"location":"drivers/cloudfoundry/#get_routes_by_host","title":"<code>get_routes_by_host</code>","text":"Type Module chaoscf.api Name get_routes_by_host Return mapping <p>Get all routes with given host.</p> <p>See https://apidocs.cloudfoundry.org/280/routes/list_all_routes.html</p> <p>Signature:</p> <pre><code>def get_routes_by_host(route_host: str,\n                       configuration: Dict[str, Dict[str, str]],\n                       secrets: Dict[str, Dict[str, str]],\n                       org_name: str = None,\n                       org_guid: str = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required route_host string Yes org_name string null No org_guid string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"get-routes-by-host\",\n\"type\": \"\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaoscf.api\",\n\"func\": \"get_routes_by_host\",\n\"arguments\": {\n\"route_host\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: get-routes-by-host\nprovider:\narguments:\nroute_host: ''\nfunc: get_routes_by_host\nmodule: chaoscf.api\ntype: python\ntype: ''\n</code></pre>"},{"location":"drivers/cloudfoundry/#get_space_by_name","title":"<code>get_space_by_name</code>","text":"Type Module chaoscf.api Name get_space_by_name Return mapping <p>Get the space with the given name.</p> <p>You may restrict the search by organization by providing the various according parameters. When passing the name, the function performs a lookup for the org to fetch its GUID.</p> <p>Signature:</p> <pre><code>def get_space_by_name(space_name: str,\n                      configuration: Dict[str, Dict[str, str]],\n                      secrets: Dict[str, Dict[str, str]],\n                      org_name: str = None,\n                      org_guid=None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required space_name string Yes org_name string null No org_guid null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"get-space-by-name\",\n\"type\": \"\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaoscf.api\",\n\"func\": \"get_space_by_name\",\n\"arguments\": {\n\"space_name\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: get-space-by-name\nprovider:\narguments:\nspace_name: ''\nfunc: get_space_by_name\nmodule: chaoscf.api\ntype: python\ntype: ''\n</code></pre>"},{"location":"drivers/cloudfoundry/#probes","title":"probes","text":""},{"location":"drivers/cloudfoundry/#get_app_stats","title":"<code>get_app_stats</code>","text":"Type probe Module chaoscf.probes Name get_app_stats Return mapping <p>Fetch the metrics of the given application.</p> <p>See https://apidocs.cloudfoundry.org/280/apps/get_detailed_stats_for_a_started_app.html for more information.</p> <p>Signature:</p> <pre><code>def get_app_stats(app_name: str,\n                  configuration: Dict[str, Dict[str, str]],\n                  secrets: Dict[str, Dict[str, str]],\n                  org_name: str = None,\n                  space_name: str = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required app_name string Yes org_name string null No space_name string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"get-app-stats\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaoscf.probes\",\n\"func\": \"get_app_stats\",\n\"arguments\": {\n\"app_name\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: get-app-stats\nprovider:\narguments:\napp_name: ''\nfunc: get_app_stats\nmodule: chaoscf.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/cloudfoundry/#list_apps","title":"<code>list_apps</code>","text":"Type probe Module chaoscf.probes Name list_apps Return mapping <p>List all applications available to the authorized user.</p> <p>See https://apidocs.cloudfoundry.org/280/apps/list_all_apps.html to understand the content of the response.</p> <p>Signature:</p> <pre><code>def list_apps(configuration: Dict[str, Dict[str, str]],\n              secrets: Dict[str, Dict[str, str]]) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"list-apps\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaoscf.probes\",\n\"func\": \"list_apps\"\n}\n}\n</code></pre> <pre><code>name: list-apps\nprovider:\nfunc: list_apps\nmodule: chaoscf.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/datadog/","title":"Extension <code>chaosdatadog</code>","text":"Version 0.1.1 Repository https://github.com/chaostoolkit-incubator/chaostoolkit-datadog <p>This project contains Chaos Toolkit activities and tolerances to work with DataDog.</p>"},{"location":"drivers/datadog/#install","title":"Install","text":"<p>This package requires Python 3.7+</p> <p>To be used from your experiment, this package must be installed in the Python environment where chaostoolkit already lives.</p> <pre><code>$ pip install chaostoolkit-datadog\n</code></pre>"},{"location":"drivers/datadog/#usage","title":"Usage","text":"<p>A typical experiment using this extension would look like this:</p> <pre><code>{\n\"version\": \"1.0.0\",\n\"title\": \"Run a, experiment using a DataDog SLO to verify our system\",\n\"description\": \"n/a\",\n\"configuration\": {\n\"datadog_host\": \"https://datadoghq.eu\"\n},\n\"steady-state-hypothesis\": {\n\"title\": \"n/a\",\n\"probes\": [\n{\n\"type\": \"probe\",\n\"name\": \"read-slo\",\n\"tolerance\": {\n\"type\": \"probe\",\n\"name\": \"check-slo\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosdatadog.slo.tolerances\",\n\"func\": \"slo_must_be_met\",\n\"arguments\": {\n\"threshold\": \"7d\"\n}\n}\n},\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosdatadog.slo.probes\",\n\"func\": \"get_slo\",\n\"arguments\": {\n\"slo_id\": \"...\"\n}\n}\n}\n]\n},\n\"method\": []\n}\n</code></pre> <p>That\u2019s it!</p> <p>Please explore the code to see existing probes and actions.</p>"},{"location":"drivers/datadog/#configuration","title":"Configuration","text":"<p>In the <code>configuration</code> block you may want to specify the DataDog host you are targetting:</p> <pre><code>    \"configuration\": {\n\"datadog_host\": \"https://datadoghq.eu\"\n},\n</code></pre> <p>The authentication can be set using the typical DataDog environment variables, notably:</p> <ul> <li><code>DD_API_KEY</code>: the API key</li> <li><code>DD_APP_KEY</code>: the application key</li> </ul>"},{"location":"drivers/datadog/#test","title":"Test","text":"<p>To run the tests for the project execute the following:</p> <pre><code>$ pytest\n</code></pre>"},{"location":"drivers/datadog/#formatting-and-linting","title":"Formatting and Linting","text":"<p>We use a combination of <code>black</code>, <code>flake8</code>, and <code>isort</code> to both lint and format this repositories code.</p> <p>Before raising a Pull Request, we recommend you run formatting against your code with:</p> <pre><code>$ make format\n</code></pre> <p>This will automatically format any code that doesn\u2019t adhere to the formatting standards.</p> <p>As some things are not picked up by the formatting, we also recommend you run:</p> <pre><code>$ make lint\n</code></pre> <p>To ensure that any unused import statements/strings that are too long, etc. are also picked up.</p>"},{"location":"drivers/datadog/#contribute","title":"Contribute","text":"<p>If you wish to contribute more functions to this package, you are more than welcome to do so. Please, fork this project, make your changes following the usual PEP 8 code style, sprinkling with tests and submit a PR for review.</p>"},{"location":"drivers/datadog/#exported-activities","title":"Exported Activities","text":""},{"location":"drivers/datadog/#slo","title":"slo","text":""},{"location":"drivers/datadog/#get_slo","title":"<code>get_slo</code>","text":"Type probe Module chaosdatadog.slo.probes Name get_slo Return mapping <p>Get a SLO\u2019s history for the given period.</p> <p>Periods should be given relative to each other. If <code>end_period</code> isn\u2019t provided it will resolve to now (UTC). <code>start_period</code> is always relative to <code>end_period</code>. You can use a format such as: <code>\"X minutes ago\"</code> for both.</p> <p>Please visit https://docs.datadoghq.com/api/latest/service-level-objectives/#get-an-slos-history for more information on the response payload, which is returned as a dictionary.</p> <p>Signature:</p> <pre><code>def get_slo(slo_id: str,\n            start_period: str = '2 minutes ago',\n            end_period: str = None,\n            configuration: Dict[str, Dict[str, str]] = None,\n            secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required slo_id string Yes start_period string \u201c2 minutes ago\u201d No end_period string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"get-slo\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosdatadog.slo.probes\",\n\"func\": \"get_slo\",\n\"arguments\": {\n\"slo_id\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: get-slo\nprovider:\narguments:\nslo_id: ''\nfunc: get_slo\nmodule: chaosdatadog.slo.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/datadog/#get_slo_details","title":"<code>get_slo_details</code>","text":"Type probe Module chaosdatadog.slo.probes Name get_slo_details Return mapping <p>Get a SLO\u2019s details.</p> <p>Please visit https://docs.datadoghq.com/api/latest/service-level-objectives/#get-an-slos-details for more information on the response payload, which is returned as a dictionary.</p> <p>Signature:</p> <pre><code>def get_slo_details(\n        slo_id: str,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required slo_id string Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"get-slo-details\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosdatadog.slo.probes\",\n\"func\": \"get_slo_details\",\n\"arguments\": {\n\"slo_id\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: get-slo-details\nprovider:\narguments:\nslo_id: ''\nfunc: get_slo_details\nmodule: chaosdatadog.slo.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/datadog/#slo_must_be_met","title":"<code>slo_must_be_met</code>","text":"Type tolerance Module chaosdatadog.slo.tolerances Name slo_must_be_met Return boolean <p>Checks that the current SLI value of a SLO is higher than its target for a given threshold period (<code>\"7d\"</code>, <code>\"30d\"</code>, <code>\"90d\"</code>, <code>\"custom\"</code>).</p> <p>Signature:</p> <pre><code>def slo_must_be_met(threshold: str = '7d',\n                    value: Dict[str, Any] = None) -&gt; bool:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required threshold string \u201c7d\u201d No value mapping null No <p>Tolerances declare the <code>value</code> argument which is automatically injected by Chaos Toolkit as the output of the probe they are evaluating.</p> <p>Usage:</p> JSONYAML <pre><code>{\n\"steady-state-hypothesis\": {\n\"title\": \"...\",\n\"probes\": [\n{\n\"type\": \"probe\",\n\"tolerance\": {\n\"name\": \"slo-must-be-met\",\n\"type\": \"tolerance\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosdatadog.slo.tolerances\",\n\"func\": \"slo_must_be_met\"\n}\n},\n\"...\": \"...\"\n}\n]\n}\n}\n</code></pre> <pre><code>steady-state-hypothesis:\nprobes:\n- '...': '...'\ntolerance:\nname: slo-must-be-met\nprovider:\nfunc: slo_must_be_met\nmodule: chaosdatadog.slo.tolerances\ntype: python\ntype: tolerance\ntype: probe\ntitle: '...'\n</code></pre>"},{"location":"drivers/dynatrace/","title":"Extension <code>chaosdynatrace</code>","text":"Version 0.2.0 Repository https://github.com/chaostoolkit-incubator/chaostoolkit-dynatrace <p>Dynatrace support for the Chaos Toolkit.</p>"},{"location":"drivers/dynatrace/#install","title":"Install","text":"<p>To be used from your experiment, this package must be installed in the Python environment where chaostoolkit already lives.</p> <pre><code>$ pip install chaostoolkit-dynatrace\n</code></pre>"},{"location":"drivers/dynatrace/#usage","title":"Usage","text":"<p>To use this package, you must  have access to a Dynatrace instance via DynatraceApi  and be allowed to connect to it.</p> <p>the access credentials to the api must be specified in the configuration section</p> <pre><code>{\n\n\"configuration\": {\n\"dynatrace_base_url\": \"https://{your-environment-id}.live.dynatrace.com\"\n},\n\"secrets\": {\n\"dynatrace\": {\n\"token\": \"...\"\n}\n}\n}\n</code></pre> <p>Here is an example of how to get the failure rate of a service in Dynatrace. for this example, the api for validate de failure rate is Metric-v1</p> <pre><code>{\n\"type\": \"probe\",\n\"name\": \"get-failure-rate-services\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosdynatrace.timeseries.v1.probes\",\n\"func\": \"failure_rate\",\n\"secrets\": [\"dynatrace\"],\n\"arguments\": {\n\"entity\": \"SERVICE-665B05BC92550119\",\n\"relative_time\": \"30mins\",\n\"failed_percentage\": 1\n}\n}\n}\n</code></pre> <p>The probe returns <code>true</code> if the api request failure percentage is less than  the <code>failed_percentage</code> value or return <code>false</code>.</p> <p>The extension also exports a control to send events to Dynatrace. For instance:</p> <pre><code>{\n\"controls\": [\n{\n\"name\": \"dynatrace\",\n\"provider\": {\n\"type\": \"python\",\n\"secrets\": [\"dynatrace\"],\n\"module\": \"chaosdynatrace.events.v2.control\"\n}\n}\n]\n}\n</code></pre> <p>This will send start/stop logs of the experiment events.</p> <p>You can correlate them to traces using the Open Telemetry extension.</p> <pre><code>{\n\"configuration\": {\n\"dynatrace_base_url\": \"https://{your-environment-id}.live.dynatrace.com\",\n\"tracing_provider\": \"opentelemetry\",\n\"tracing_opentelemetry_exporter\": \"oltp-http\",\n\"tracing_opentelemetry_collector_endpoint\": \"https://{your-environment-id}.live.dynatrace.com/api/v2/otlp/v1/traces\",\n\"tracing_opentelemetry_collector_headers\": {\n\"Authorization\": \"Api-Token &lt;TOKEN&gt;\"\n}\n},\n\"controls\": [\n{\n\"name\": \"opentracing\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaostracing.control\"\n}\n}\n]\n</code></pre> <p>The logs and traces will be automatically correlated.</p>"},{"location":"drivers/dynatrace/#contribute","title":"Contribute","text":"<p>If you wish to contribute more functions to this package, you are more than welcome to do so. Please, fork this project, make your changes following the usual PEP 8 code style, sprinkling with tests and submit a PR for review.</p>"},{"location":"drivers/dynatrace/#develop","title":"Develop","text":"<p>If you wish to develop on this project, make sure to install the development dependencies. But first, create a virtual environment and then install those dependencies.</p> <pre><code>$ pip install -r requirements-dev.txt -r requirements.txt </code></pre> <p>Then, point your environment to this directory:</p> <pre><code>$ pip install -e .\n</code></pre> <p>Now, you can edit the files and they will be automatically be seen by your environment, even when running from the <code>chaos</code> command locally.</p>"},{"location":"drivers/dynatrace/#test","title":"Test","text":"<p>To run the tests for the project execute the following:</p> <pre><code>$ pytest\n</code></pre>"},{"location":"drivers/dynatrace/#exported-controls","title":"Exported Controls","text":""},{"location":"drivers/dynatrace/#control","title":"control","text":"<p>This module exports controls covering the following phases of the execution of an experiment:</p> Level Before After Experiment Loading False False Experiment False True Steady-state Hypothesis True True Method True True Rollback True True Activities True True <p>In addition, the controls may define the followings:</p> Level Enabled Validate Control False Configure Control True Cleanup Control True <p>To use this control module, please add the following section to your experiment:</p> JSONYAML <pre><code>{\n\"controls\": [\n{\n\"name\": \"chaosdynatrace\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosdynatrace.events.v2.control\"\n}\n}\n]\n}\n</code></pre> <pre><code>controls:\n- name: chaosdynatrace\nprovider:\nmodule: chaosdynatrace.events.v2.control\ntype: python\n</code></pre> <p>This block may also be enabled at any other level (steady-state hypothesis or activity) to focus only on that level.</p> <p>When enabled at the experiment level, by default, all sub-levels are also applied unless you set the <code>automatic</code> properties to <code>false</code>.</p>"},{"location":"drivers/dynatrace/#exported-activities","title":"Exported Activities","text":""},{"location":"drivers/dynatrace/#v2","title":"v2","text":""},{"location":"drivers/dynatrace/#get_aggregate_logs","title":"<code>get_aggregate_logs</code>","text":"Type probe Module chaosdynatrace.logs.v2.probes Name get_aggregate_logs Return mapping <p>Query the aggregate logs v2 endpoint matching the criteria.</p> <p>Returns a list such as:</p> <p>https://www.dynatrace.com/support/help/dynatrace-api/environment-api/log-monitoring-v2/get-search-logs</p> <p>Signature:</p> <pre><code>def get_aggregate_logs(\n        from_time: str = 'now',\n        to_time: str = None,\n        query: str = None,\n        time_buckets: int = 1,\n        max_group_values: int = 10,\n        group_by: Union[str, List[str]] = None,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required from_time string \u201cnow\u201d No to_time string null No query string null No time_buckets integer 1 No max_group_values integer 10 No group_by object null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"get-aggregate-logs\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosdynatrace.logs.v2.probes\",\n\"func\": \"get_aggregate_logs\"\n}\n}\n</code></pre> <pre><code>name: get-aggregate-logs\nprovider:\nfunc: get_aggregate_logs\nmodule: chaosdynatrace.logs.v2.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/dynatrace/#get_search_logs","title":"<code>get_search_logs</code>","text":"Type probe Module chaosdynatrace.logs.v2.probes Name get_search_logs Return list <p>Query the search logs v2 endpoint matching the criteria.</p> <p>Returns a list such as:</p> <p>https://www.dynatrace.com/support/help/dynatrace-api/environment-api/log-monitoring-v2/get-search-logs</p> <p>Signature:</p> <pre><code>def get_search_logs(\n        from_time: str = 'now',\n        to_time: str = None,\n        query: str = None,\n        limit: int = 1000,\n        sort: str = None,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; List[Dict[str, Any]]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required from_time string \u201cnow\u201d No to_time string null No query string null No limit integer 1000 No sort string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"get-search-logs\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosdynatrace.logs.v2.probes\",\n\"func\": \"get_search_logs\"\n}\n}\n</code></pre> <pre><code>name: get-search-logs\nprovider:\nfunc: get_search_logs\nmodule: chaosdynatrace.logs.v2.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/dynatrace/#query_data_points","title":"<code>query_data_points</code>","text":"Type probe Module chaosdynatrace.metrics.v2.probes Name query_data_points Return list <p>Query the metrics v2 endpoint for any data point matching the various parameters.</p> <p>Returns a list such as:</p> <pre><code>[\n    {\n   'metricId': 'builtin:tech.generic.network.bytesRx:splitBy():avg:auto:sort(value(avg,descending)):limit(10)',\n   'data': [\n  {\n 'dimensions': [],\n 'dimensionMap': {},\n 'timestamps': [\n1647545100000,\n1647545400000,\n1647545700000,\n1647546000000,\n1647546300000,\n1647546600000,\n1647546900000\n ],\n 'values': [\nNone,\n9272.911109076605,\n3565.171102555593,\n3441.491649373372,\n48242.974005126955,\n8055.613537597656,\nNone\n ]\n  }\n   ]\n    }\n]\n</code></pre> <p>https://www.dynatrace.com/support/help/dynatrace-api/environment-api/metric-v2/get-data-points</p> <p>Signature:</p> <pre><code>def query_data_points(\n        metrics_selector: Union[str, List[str]] = '*',\n        entity_selector: Union[str, List[str]] = None,\n        resolution: str = '5m',\n        from_time: str = 'now',\n        to_time: str = None,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; List[Dict[str, Any]]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required metrics_selector object \u201d*\u201d No entity_selector object null No resolution string \u201c5m\u201d No from_time string \u201cnow\u201d No to_time string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"query-data-points\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosdynatrace.metrics.v2.probes\",\n\"func\": \"query_data_points\"\n}\n}\n</code></pre> <pre><code>name: query-data-points\nprovider:\nfunc: query_data_points\nmodule: chaosdynatrace.metrics.v2.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/dynatrace/#v1","title":"v1","text":""},{"location":"drivers/dynatrace/#failure_rate","title":"<code>failure_rate</code>","text":"Type probe Module chaosdynatrace.timeseries.v1.probes Name failure_rate Return boolean <p>Validates the failure rate of a specific service. Returns true if the failure rate is less than the expected failure rate For more information check the api documentation. https://www.dynatrace.com/support/help/dynatrace-api/environment-api/metric-v1/</p> <p>Signature:</p> <pre><code>def failure_rate(entity: str,\n                 relative_time: str,\n                 failed_percentage: int,\n                 configuration: Dict[str, Dict[str, str]],\n                 secrets: Dict[str, Dict[str, str]] = None) -&gt; bool:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required entity string Yes relative_time string Yes failed_percentage integer Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"failure-rate\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosdynatrace.timeseries.v1.probes\",\n\"func\": \"failure_rate\",\n\"arguments\": {\n\"entity\": \"\",\n\"relative_time\": \"\",\n\"failed_percentage\": 0\n}\n}\n}\n</code></pre> <pre><code>name: failure-rate\nprovider:\narguments:\nentity: ''\nfailed_percentage: 0\nrelative_time: ''\nfunc: failure_rate\nmodule: chaosdynatrace.timeseries.v1.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/gandi/","title":"Extension <code>chaosgandi</code>","text":"Version 0.2.0 Repository https://github.com/chaostoolkit-incubator/chaostoolkit-gandi <p>This project is a collection of actions and probes, gathered as an extension to the Chaos Toolkit.</p>"},{"location":"drivers/gandi/#install","title":"Install","text":"<p>This package requires Python 3.5+</p> <p>To be used from your experiment, this package must be installed in the Python environment where chaostoolkit already lives.</p> <pre><code>$ pip install -U chaostoolkit-gandi\n</code></pre>"},{"location":"drivers/gandi/#usage","title":"Usage","text":"<p>To use the probes and actions from this package, add the following to your experiment file:</p> <pre><code>{\n\"version\": \"1.0.0\",\n\"title\": \"Our domains are not going expiring within a month\",\n\"description\": \"We need time to renew.\",\n\"secrets\": {\n\"gandi\": {\n\"apikey\": {\n\"type\": \"env\",\n\"key\": \"GANDI_API_KEY\"\n}\n}\n},\n\"steady-state-hypothesis\": {\n\"title\": \"Check domains are all more than 1 month away from expiring\",\n\"probes\": [\n{\n\"type\": \"probe\",\n\"name\": \"list-my-domains\",\n\"tolerance\": {\n\"type\": \"probe\",\n\"name\": \"validate-domain-expire-date\",\n\"provider\": {\n\"type\": \"python\",\n\"secrets\": [\"gandi\"],\n\"module\": \"chaosgandi.domains.tolerances\",\n\"func\": \"domains_should_not_expire_in\",\n\"arguments\": {\n\"when\": \"1 month\"\n}\n}\n},\n\"provider\": {\n\"type\": \"python\",\n\"secrets\": [\"gandi\"],\n\"module\": \"chaosgandi.domains.probes\",\n\"func\": \"list_domains\"\n}\n}\n]\n},\n\"method\": []\n}\n</code></pre> <p>That\u2019s it!</p> <p>Set the <code>GANDI_API_KEY</code> environment variable to your Gandi API Key.</p> <p>Please explore the code to see existing probes and actions.</p>"},{"location":"drivers/gandi/#contribute","title":"Contribute","text":"<p>If you wish to contribute more functions to this package, you are more than welcome to do so. Please, fork this project, make your changes following the usual PEP 8 code style, sprinkling with tests and submit a PR for review.</p> <p>The Chaos Toolkit projects require all contributors must sign a Developer Certificate of Origin on each commit they would like to merge into the master branch of the repository. Please, make sure you can abide by the rules of the DCO before submitting a PR.</p>"},{"location":"drivers/gandi/#develop","title":"Develop","text":"<p>If you wish to develop on this project, make sure to install the development dependencies. But first, create a virtual environment and then install those dependencies.</p> <pre><code>$ pip install -r requirements-dev.txt -r requirements.txt\n</code></pre> <p>Then, point your environment to this directory:</p> <pre><code>$ pip install -e .\n</code></pre> <p>Now, you can edit the files and they will be automatically be seen by your environment, even when running from the <code>chaos</code> command locally.</p>"},{"location":"drivers/gandi/#test","title":"Test","text":"<p>To run the tests for the project execute the following:</p> <pre><code>$ pytest\n</code></pre>"},{"location":"drivers/gandi/#exported-activities","title":"Exported Activities","text":""},{"location":"drivers/gandi/#domains","title":"domains","text":""},{"location":"drivers/gandi/#domains_should_not_expire_in","title":"<code>domains_should_not_expire_in</code>","text":"Type tolerance Module chaosgandi.domains.tolerances Name domains_should_not_expire_in Return boolean <p>Go through the list of Gandi domains and fails if any expires before the given date threshold as a relative time to now.</p> <p>Signature:</p> <pre><code>def domains_should_not_expire_in(value: List[Dict[str, Any]] = None,\n                                 when: str = '1 month') -&gt; bool:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required value list null No when string \u201c1 month\u201d No <p>Tolerances declare the <code>value</code> argument which is automatically injected by Chaos Toolkit as the output of the probe they are evaluating.</p> <p>Usage:</p> JSONYAML <pre><code>{\n\"steady-state-hypothesis\": {\n\"title\": \"...\",\n\"probes\": [\n{\n\"type\": \"probe\",\n\"tolerance\": {\n\"name\": \"domains-should-not-expire-in\",\n\"type\": \"tolerance\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosgandi.domains.tolerances\",\n\"func\": \"domains_should_not_expire_in\"\n}\n},\n\"...\": \"...\"\n}\n]\n}\n}\n</code></pre> <pre><code>steady-state-hypothesis:\nprobes:\n- '...': '...'\ntolerance:\nname: domains-should-not-expire-in\nprovider:\nfunc: domains_should_not_expire_in\nmodule: chaosgandi.domains.tolerances\ntype: python\ntype: tolerance\ntype: probe\ntitle: '...'\n</code></pre>"},{"location":"drivers/gandi/#list_domains","title":"<code>list_domains</code>","text":"Type probe Module chaosgandi.domains.probes Name list_domains Return list <p>List all domains or those matching the given TLD or FQDN filters and return the list as-is.</p> <p>See https://api.gandi.net/docs/domains/#v5-domain-domains</p> <p>Signature:</p> <pre><code>def list_domains(\n        fqdn_filter: str = None,\n        tld_filter: str = None,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; List[Dict[str, Any]]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required fqdn_filter string null No tld_filter string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"list-domains\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosgandi.domains.probes\",\n\"func\": \"list_domains\"\n}\n}\n</code></pre> <pre><code>name: list-domains\nprovider:\nfunc: list_domains\nmodule: chaosgandi.domains.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/gandi/#list_nameservers","title":"<code>list_nameservers</code>","text":"Type probe Module chaosgandi.domains.probes Name list_nameservers Return list <p>List nameservers set for this domain and return them as a list of strings.</p> <p>See https://api.gandi.net/docs/domains/#v5-domain-domains-domain-nameservers</p> <p>Signature:</p> <pre><code>def list_nameservers(domain: str,\n                     configuration: Dict[str, Dict[str, str]] = None,\n                     secrets: Dict[str, Dict[str, str]] = None) -&gt; List[str]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required domain string Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"list-nameservers\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosgandi.domains.probes\",\n\"func\": \"list_nameservers\",\n\"arguments\": {\n\"domain\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: list-nameservers\nprovider:\narguments:\ndomain: ''\nfunc: list_nameservers\nmodule: chaosgandi.domains.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/gcp/","title":"Extension <code>chaosgcp</code>","text":"Version 0.8.2 Repository https://github.com/chaostoolkit-incubator/chaostoolkit-google-cloud-platform <p>This project is a collection of actions and probes, gathered as an extension to the Chaos Toolkit. It targets the Google Cloud Platform.</p>"},{"location":"drivers/gcp/#install","title":"Install","text":"<p>This package requires Python 3.7+</p> <p>To be used from your experiment, this package must be installed in the Python environment where chaostoolkit already lives.</p> <pre><code>$ pip install --prefer-binary -U chaostoolkit-google-cloud-platform\n</code></pre>"},{"location":"drivers/gcp/#usage","title":"Usage","text":"<p>To use the probes and actions from this package, add the following to your experiment file:</p> <pre><code>{\n\"version\": \"1.0.0\",\n\"title\": \"create and delete a cloud run service\",\n\"description\": \"n/a\",\n\"secrets\": {\n\"gcp\": {\n\"service_account_file\": \"service_account.json\"\n}\n},\n\"method\": [\n{\n\"name\": \"create-cloud-run-service\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosgcp.cloudrun.actions\",\n\"func\": \"create_service\",\n\"secrets\": [\"gcp\"],\n\"arguments\": {\n\"parent\": \"projects/.../locations/...\",\n\"service_id\": \"demo\",\n\"container\": {\n\"name\": \"demo\",\n\"image\": \"gcr.io/google-samples/hello-app:1.0\"\n}\n}\n}\n},\n{\n\"name\": \"delete-cloud-run-service\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosgcp.cloudrun.actions\",\n\"func\": \"delete_service\",\n\"secrets\": [\"gcp\"],\n\"arguments\": {\n\"parent\": \"projects/.../locations/.../services/demo\"\n}\n}\n}\n]\n}\n</code></pre> <p>That\u2019s it!</p> <p>Please explore the code to see existing probes and actions.</p>"},{"location":"drivers/gcp/#configuration","title":"Configuration","text":""},{"location":"drivers/gcp/#project-and-cluster-information","title":"Project and Cluster Information","text":"<p>You can pass the context via the <code>configuration</code> section of your experiment:</p> <pre><code>{\n\"configuration\": {\n\"gcp_project_id\": \"...\",\n\"gcp_gke_cluster_name\": \"...\",\n\"gcp_region\": \"...\",\n\"gcp_zone\": \"...\"\n}\n}\n</code></pre> <p>This is only valuable when you want to reuse the same context everywhere. A finer approach is to set the the <code>parent</code> argument on activities that support it. It should be of the form <code>projects/*/locations/*</code> or <code>projects/*/locations/*/clusters/*</code>, where <code>location</code> is either a region or a zone, depending on the context and defined by the GCP API.</p> <p>When provided, this takes precedence over the context defined in the configuration. In some cases, it also means you do not need to pass the values in the configuration at all as the extension will derive the context from the <code>parent</code> value.</p>"},{"location":"drivers/gcp/#credentials","title":"Credentials","text":"<p>This extension expects a service account with enough permissions to perform its operations. Please create such a service account manually (do not use the default one for your cluster if you can, so you\u2019ll be able to delete that service account if need be).</p> <p>Once you have created your service account, either keep the file on the same machine where you will be running the experiment from. Or, pass its content as part of the <code>secrets</code> section, although this is not recommended because your sensitive data will be quite visible.</p> <p>Here is the first way:</p> <pre><code>{\n\"secrets\": {\n\"gcp\": {\n\"service_account_file\": \"/path/to/sa.json\"\n}\n}\n}\n</code></pre> <p>You can also use the well-known <code>GOOGLE_APPLICATION_CREDENTIALS</code> environment variables. iI that case, you do not need to set any secrets in the experiment.</p> <p>While the embedded way looks like this:</p> <pre><code>{\n\"secrets\": {\n\"k8s\": {\n\"KUBERNETES_CONTEXT\": \"...\"\n},\n\"gcp\": {\n\"service_account_info\": {\n\"type\": \"service_account\",\n\"project_id\": \"...\",\n\"private_key_id\": \"...\",\n\"private_key\": \"...\",\n\"client_email\": \"...\",\n\"client_id\": \"...\",\n\"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n\"token_uri\": \"https://accounts.google.com/o/oauth2/token\",\n\"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\",\n\"client_x509_cert_url\": \"https://www.googleapis.com/robot/v1/metadata/x509/....\"\n}\n}\n}\n}\n</code></pre> <p>Notice also how we provided here the <code>k8s</code> entry. This is only because, in our example we use the <code>swap_nodepool</code> action which drains the Kubernetes nodes and it requires the Kubernetes cluster credentials to work. These are documented in the Kubernetes extension for Chaos Toolkit. This is the only action that requires such a secret payload, others only speak to the GCP API.</p>"},{"location":"drivers/gcp/#putting-it-all-together","title":"Putting it all together","text":"<p>Here is a full example which creates a node pool then swap it for a new one.</p> <pre><code>{\n\"version\": \"1.0.0\",\n\"title\": \"do stuff ye\",\n\"description\": \"n/a\",\n\"secrets\": {\n\"k8s\": {\n\"KUBERNETES_CONTEXT\": \"gke_...\"\n},\n\"gcp\": {\n\"service_account_file\": \"service-account.json\"\n}\n},\n\"method\": [\n{\n\"name\": \"create-our-nodepool\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosgcp.gke.nodepool.actions\",\n\"func\": \"create_new_nodepool\",\n\"secrets\": [\"gcp\"],\n\"arguments\": {\n\"parent\": \"projects/.../locations/.../clusters/...\",\n\"body\": {\n\"config\": { \"oauth_scopes\": [\n\"gke-version-default\",\n\"https://www.googleapis.com/auth/devstorage.read_only\",\n\"https://www.googleapis.com/auth/logging.write\",\n\"https://www.googleapis.com/auth/monitoring\",\n\"https://www.googleapis.com/auth/service.management.readonly\",\n\"https://www.googleapis.com/auth/servicecontrol\",\n\"https://www.googleapis.com/auth/trace.append\"\n]\n},\n\"initial_node_count\": 1,\n\"name\": \"default-pool\"\n}\n}\n}\n},\n{\n\"name\": \"fetch-our-nodepool\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosgcp.gke.nodepool.probes\",\n\"func\": \"get_nodepool\",\n\"secrets\": [\"gcp\"],\n\"arguments\": {\n\"parent\": \"projects/.../locations/.../clusters/.../nodePools/default-pool\"\n}\n}\n},\n{\n\"name\": \"swap-our-nodepool\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosgcp.gke.nodepool.actions\",\n\"func\": \"swap_nodepool\",\n\"secrets\": [\"gcp\", \"k8s\"],\n\"arguments\": {\n\"parent\": \"projects/.../locations/.../clusters/...\",\n\"delete_old_node_pool\": true,\n\"old_node_pool_id\": \"default-pool\",\n\"new_nodepool_body\": {\n\"config\": { \"oauth_scopes\": [\n\"gke-version-default\",\n\"https://www.googleapis.com/auth/devstorage.read_only\",\n\"https://www.googleapis.com/auth/logging.write\",\n\"https://www.googleapis.com/auth/monitoring\",\n\"https://www.googleapis.com/auth/service.management.readonly\",\n\"https://www.googleapis.com/auth/servicecontrol\",\n\"https://www.googleapis.com/auth/trace.append\"\n]\n},\n\"initial_node_count\": 1,\n\"name\": \"default-pool-1\"\n}\n}\n}\n}\n]\n}\n</code></pre>"},{"location":"drivers/gcp/#migrate-from-gce-extension","title":"Migrate from GCE extension","text":"<p>If you previously used the deprecated GCE extension, here is a quick recap of changes you\u2019ll need to go through to update your experiments.</p> <ul> <li>The module <code>chaosgce.nodepool.actions</code> has been replaced by     <code>chaosgcp.gke.nodepool.actions</code>.     You will need to update the <code>module</code> key for the python providers.</li> <li>The configuration keys in the <code>configuration</code> section have been     renamed accordingly:<ul> <li><code>\"gce_project_id\"</code> -&gt; <code>\"gcp_project_id\"</code></li> <li><code>\"gce_region\"</code> -&gt; <code>\"gcp_region\"</code></li> <li><code>\"gce_zone\"</code> -&gt; <code>\"gcp_zone\"</code></li> <li><code>\"gce_cluster_name\"</code> -&gt; <code>\"gcp_gke_cluster_name\"</code></li> </ul> </li> </ul>"},{"location":"drivers/gcp/#contribute","title":"Contribute","text":"<p>If you wish to contribute more functions to this package, you are more than welcome to do so. Please, fork this project, make your changes following the usual PEP 8 code style, sprinkling with tests and submit a PR for review.</p> <p>The Chaos Toolkit projects require all contributors must sign a Developer Certificate of Origin on each commit they would like to merge into the master branch of the repository. Please, make sure you can abide by the rules of the DCO before submitting a PR.</p> <p>If you wish to add a new function to this extension, that is related to a  Google Cloud product that is not available yet in this package, please use  the product short name or acronym as a first level subpackage (eg. iam, gke,  sql, storage, \u2026). See the list of [GCP products and services][gcp_products].</p> <p>[gcp_products] https://cloud.google.com/products/</p>"},{"location":"drivers/gcp/#develop","title":"Develop","text":"<p>If you wish to develop on this project, make sure to install the development dependencies. But first, create a virtual environment and then install those dependencies.</p> <pre><code>$ pip install -r requirements-dev.txt -r requirements.txt </code></pre> <p>Then, point your environment to this directory:</p> <pre><code>$ python setup.py develop\n</code></pre> <p>Now, you can edit the files and they will be automatically be seen by your environment, even when running from the <code>chaos</code> command locally.</p>"},{"location":"drivers/gcp/#test","title":"Test","text":"<p>To run the tests for the project execute the following:</p> <pre><code>$ pytest\n</code></pre>"},{"location":"drivers/gcp/#exported-activities","title":"Exported Activities","text":""},{"location":"drivers/gcp/#cloudbuild","title":"cloudbuild","text":""},{"location":"drivers/gcp/#get_trigger","title":"<code>get_trigger</code>","text":"Type probe Module chaosgcp.cloudbuild.probes Name get_trigger Return None <p>Returns information about a BuildTrigger.</p> <p>See: https://cloud.google.com/cloud-build/docs/api/reference/rest/v1/projects.triggers/get</p> <p>:param name: name of the trigger :param configuration: :param secrets: :return:</p> <p>Signature:</p> <pre><code>def get_trigger(name: str,\n                configuration: Dict[str, Dict[str, str]] = None,\n                secrets: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required name string Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"get-trigger\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosgcp.cloudbuild.probes\",\n\"func\": \"get_trigger\",\n\"arguments\": {\n\"name\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: get-trigger\nprovider:\narguments:\nname: ''\nfunc: get_trigger\nmodule: chaosgcp.cloudbuild.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/gcp/#list_trigger_names","title":"<code>list_trigger_names</code>","text":"Type probe Module chaosgcp.cloudbuild.probes Name list_trigger_names Return None <p>List only the trigger names of a project</p> <p>:param configuration: :param secrets:</p> <p>:return:</p> <p>Signature:</p> <pre><code>def list_trigger_names(configuration: Dict[str, Dict[str, str]] = None,\n                       secrets: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"list-trigger-names\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosgcp.cloudbuild.probes\",\n\"func\": \"list_trigger_names\"\n}\n}\n</code></pre> <pre><code>name: list-trigger-names\nprovider:\nfunc: list_trigger_names\nmodule: chaosgcp.cloudbuild.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/gcp/#list_triggers","title":"<code>list_triggers</code>","text":"Type probe Module chaosgcp.cloudbuild.probes Name list_triggers Return None <p>Lists existing BuildTriggers.</p> <p>See: https://cloud.google.com/cloud-build/docs/api/reference/rest/v1/projects.triggers/list</p> <p>:param configuration: :param secrets:</p> <p>:return:</p> <p>Signature:</p> <pre><code>def list_triggers(configuration: Dict[str, Dict[str, str]] = None,\n                  secrets: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"list-triggers\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosgcp.cloudbuild.probes\",\n\"func\": \"list_triggers\"\n}\n}\n</code></pre> <pre><code>name: list-triggers\nprovider:\nfunc: list_triggers\nmodule: chaosgcp.cloudbuild.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/gcp/#run_trigger","title":"<code>run_trigger</code>","text":"Type action Module chaosgcp.cloudbuild.actions Name run_trigger Return None <p>Runs a BuildTrigger at a particular source revision.</p> <p>NB: The trigger must exist in the targeted project.</p> <p>See: https://cloud.google.com/cloud-build/docs/api/reference/rest/v1/projects.triggers/run</p> <p>:param name: name of the trigger :param source: location of the source in a Google Cloud Source Repository :param configuration: :param secrets:</p> <p>:return:</p> <p>Signature:</p> <pre><code>def run_trigger(name: str,\n                source: Dict[Any, Any],\n                configuration: Dict[str, Dict[str, str]] = None,\n                secrets: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required name string Yes source mapping Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"run-trigger\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosgcp.cloudbuild.actions\",\n\"func\": \"run_trigger\",\n\"arguments\": {\n\"name\": \"\",\n\"source\": {}\n}\n}\n}\n</code></pre> <pre><code>name: run-trigger\nprovider:\narguments:\nname: ''\nsource: {}\nfunc: run_trigger\nmodule: chaosgcp.cloudbuild.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/gcp/#cloudrun","title":"cloudrun","text":""},{"location":"drivers/gcp/#create_service","title":"<code>create_service</code>","text":"Type action Module chaosgcp.cloudrun.actions Name create_service Return None <p>Deletes a Cloud Run service and all its revisions. Cannot be undone.</p> <p>See: https://cloud.google.com/python/docs/reference/run/latest/google.cloud.run_v2.services.services.ServicesClient#google_cloud_run_v2_services_services_ServicesClient_delete_service</p> <p>:param parent: the path to the location in the project \u2018projects/PROJECT_ID/locations/LOC :param service_id: unique identifier for the service :param container: definition of the container as per https://cloud.google.com/python/docs/reference/run/latest/google.cloud.run_v2.types.Container :param description: optional text description of the service :param max_instance_request_concurrency: optional maximum number of requests that each serving instance can receive :param labels: optional labels to set on the service :param annotations: optional annotations to set on the service :param configuration: :param secrets:</p> <p>:return:</p> <p>Signature:</p> <pre><code>def create_service(parent: str,\n                   service_id: str,\n                   container: Dict[str, Any],\n                   description: str = None,\n                   max_instance_request_concurrency: int = 0,\n                   service_account: str = None,\n                   encryption_key: str = None,\n                   traffic: List[Dict[str, Any]] = None,\n                   labels: Dict[str, str] = None,\n                   annotations: Dict[str, str] = None,\n                   configuration: Dict[str, Dict[str, str]] = None,\n                   secrets: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required parent string Yes service_id string Yes container mapping Yes description string null No max_instance_request_concurrency integer 0 No service_account string null No encryption_key string null No traffic list null No labels mapping null No annotations mapping null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"create-service\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosgcp.cloudrun.actions\",\n\"func\": \"create_service\",\n\"arguments\": {\n\"parent\": \"\",\n\"service_id\": \"\",\n\"container\": {}\n}\n}\n}\n</code></pre> <pre><code>name: create-service\nprovider:\narguments:\ncontainer: {}\nparent: ''\nservice_id: ''\nfunc: create_service\nmodule: chaosgcp.cloudrun.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/gcp/#delete_service","title":"<code>delete_service</code>","text":"Type action Module chaosgcp.cloudrun.actions Name delete_service Return None <p>Deletes a Cloud Run service and all its revisions. Cannot be undone.</p> <p>See: https://cloud.google.com/python/docs/reference/run/latest/google.cloud.run_v2.services.services.ServicesClient#google_cloud_run_v2_services_services_ServicesClient_delete_service</p> <p>:param parent: the path to the service \u2018projects/PROJECT_ID/locations/LOC/services/SVC :param configuration: :param secrets:</p> <p>:return:</p> <p>Signature:</p> <pre><code>def delete_service(parent: str,\n                   configuration: Dict[str, Dict[str, str]] = None,\n                   secrets: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required parent string Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"delete-service\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosgcp.cloudrun.actions\",\n\"func\": \"delete_service\",\n\"arguments\": {\n\"parent\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: delete-service\nprovider:\narguments:\nparent: ''\nfunc: delete_service\nmodule: chaosgcp.cloudrun.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/gcp/#get_service","title":"<code>get_service</code>","text":"Type probe Module chaosgcp.cloudrun.probes Name get_service Return mapping <p>Retrieve a single cloud run service</p> <p>See: https://cloud.google.com/python/docs/reference/run/latest/google.cloud.run_v2.services.services.ServicesClient#google_cloud_run_v2_services_services_ServicesClient_get_service</p> <p>:param name: the path to the service \u2018projects/PROJECT_ID/locations/LOC/services/SVC :param configuration: :param secrets:</p> <p>:return:</p> <p>Signature:</p> <pre><code>def get_service(name: str,\n                configuration: Dict[str, Dict[str, str]] = None,\n                secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required name string Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"get-service\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosgcp.cloudrun.probes\",\n\"func\": \"get_service\",\n\"arguments\": {\n\"name\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: get-service\nprovider:\narguments:\nname: ''\nfunc: get_service\nmodule: chaosgcp.cloudrun.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/gcp/#list_service_revisions","title":"<code>list_service_revisions</code>","text":"Type probe Module chaosgcp.cloudrun.probes Name list_service_revisions Return list <p>List all Cloud Run service revisions for a specific service.</p> <p>See: https://cloud.google.com/python/docs/reference/run/latest/google.cloud.run_v2.services.revisions.RevisionsClient#google_cloud_run_v2_services_revisions_RevisionsClient_list_revisions</p> <p>:param parent: the path to the service \u2018projects/PROJECT_ID/locations/LOC/service/SVC :param configuration: :param secrets:</p> <p>:return:</p> <p>Signature:</p> <pre><code>def list_service_revisions(\n        parent: str,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; List[Dict[str, Any]]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required parent string Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"list-service-revisions\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosgcp.cloudrun.probes\",\n\"func\": \"list_service_revisions\",\n\"arguments\": {\n\"parent\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: list-service-revisions\nprovider:\narguments:\nparent: ''\nfunc: list_service_revisions\nmodule: chaosgcp.cloudrun.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/gcp/#list_services","title":"<code>list_services</code>","text":"Type probe Module chaosgcp.cloudrun.probes Name list_services Return list <p>List all Cloud Run services</p> <p>See: https://cloud.google.com/python/docs/reference/run/latest/google.cloud.run_v2.services.services.ServicesClient#google_cloud_run_v2_services_services_ServicesClient_list_services</p> <p>:param parent: the path to the service \u2018projects/PROJECT_ID/locations/LOC :param configuration: :param secrets:</p> <p>:return:</p> <p>Signature:</p> <pre><code>def list_services(\n        parent: str,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; List[Dict[str, Any]]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required parent string Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"list-services\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosgcp.cloudrun.probes\",\n\"func\": \"list_services\",\n\"arguments\": {\n\"parent\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: list-services\nprovider:\narguments:\nparent: ''\nfunc: list_services\nmodule: chaosgcp.cloudrun.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/gcp/#update_service","title":"<code>update_service</code>","text":"Type action Module chaosgcp.cloudrun.actions Name update_service Return None <p>Updates a Cloud Run service.</p> <p>For example:</p> <pre><code>{\n\"name\": \"route-traffic-two-latest-and-older-revision\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": chaosgcp.cloudrun.actions\",\n   \"func\": \"update_service\",\n   \"arguments\": {\n  \"parent\": \"projects/${gcp_project_id}/locations/${gcp_location}/services/${service_name}\",\n  \"container\": {\n \"image\": \"eu.gcr.io/${gcp_project_id}/demo\"\n  },\n  \"traffic\": [{\n \"type_\": 1,\n \"percent\": 50\n  }, {\n \"type_\": 2,\n \"revision\": \"whatever-w788x\",\n \"percent\": 50\n  }],\n   }\n    }\n}\n</code></pre> <p>See: https://cloud.google.com/python/docs/reference/run/latest/google.cloud.run_v2.services.services.ServicesClient#google_cloud_run_v2_services_services_ServicesClient_delete_service</p> <p>:param container: definition of the container as per https://cloud.google.com/python/docs/reference/run/latest/google.cloud.run_v2.types.Container :param labels: optional labels to set on the service :param annotations: optional annotations to set on the service :param configuration: :param secrets: :param vpc_access_config: optional value for vpc_connect</p> <p>:return:</p> <p>Signature:</p> <pre><code>def update_service(parent: str,\n                   container: Dict[str, Any] = None,\n                   max_instance_request_concurrency: int = 100,\n                   service_account: str = None,\n                   encryption_key: str = None,\n                   traffic: List[Dict[str, Any]] = None,\n                   labels: Dict[str, str] = None,\n                   annotations: Dict[str, str] = None,\n                   vpc_access_config: Dict[str, str] = None,\n                   configuration: Dict[str, Dict[str, str]] = None,\n                   secrets: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required parent string Yes container mapping null No max_instance_request_concurrency integer 100 No service_account string null No encryption_key string null No traffic list null No labels mapping null No annotations mapping null No vpc_access_config mapping null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"update-service\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosgcp.cloudrun.actions\",\n\"func\": \"update_service\",\n\"arguments\": {\n\"parent\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: update-service\nprovider:\narguments:\nparent: ''\nfunc: update_service\nmodule: chaosgcp.cloudrun.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/gcp/#nodepool","title":"nodepool","text":""},{"location":"drivers/gcp/#create_new_nodepool","title":"<code>create_new_nodepool</code>","text":"Type action Module chaosgcp.gke.nodepool.actions Name create_new_nodepool Return mapping <p>Create a new node pool in the given cluster/zone of the provided project.</p> <p>The node pool config must be passed a mapping to the <code>body</code> parameter and respect the REST API.</p> <p>If <code>wait_until_complete</code> is set to <code>True</code> (the default), the function will block until the node pool is ready. Otherwise, will return immediatly with the operation information.</p> <p>See: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.zones.clusters.nodePools/create</p> <p>Signature:</p> <pre><code>def create_new_nodepool(\n        body: Dict[str, Any],\n        parent: str = None,\n        wait_until_complete: bool = True,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required body mapping Yes parent string null No wait_until_complete boolean true No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"create-new-nodepool\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosgcp.gke.nodepool.actions\",\n\"func\": \"create_new_nodepool\",\n\"arguments\": {\n\"body\": {}\n}\n}\n}\n</code></pre> <pre><code>name: create-new-nodepool\nprovider:\narguments:\nbody: {}\nfunc: create_new_nodepool\nmodule: chaosgcp.gke.nodepool.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/gcp/#delete_nodepool","title":"<code>delete_nodepool</code>","text":"Type action Module chaosgcp.gke.nodepool.actions Name delete_nodepool Return mapping <p>Delete node pool from the given cluster/zone of the provided project.</p> <p>If <code>wait_until_complete</code> is set to <code>True</code> (the default), the function will block until the node pool is deleted. Otherwise, will return immediatly with the operation information.</p> <p>See: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.zones.clusters.nodePools/create</p> <p>Signature:</p> <pre><code>def delete_nodepool(\n        parent: str = None,\n        node_pool_id: str = None,\n        wait_until_complete: bool = True,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required parent string null No node_pool_id string null No wait_until_complete boolean true No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"delete-nodepool\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosgcp.gke.nodepool.actions\",\n\"func\": \"delete_nodepool\"\n}\n}\n</code></pre> <pre><code>name: delete-nodepool\nprovider:\nfunc: delete_nodepool\nmodule: chaosgcp.gke.nodepool.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/gcp/#get_nodepool","title":"<code>get_nodepool</code>","text":"Type probe Module chaosgcp.gke.nodepool.probes Name get_nodepool Return mapping <p>Get a specific nodepool of a cluster.</p> <p>The <code>parent</code> is following the form <code>projects/*/locations/*/clusters/*/nodePools/*</code> and will override any settings in the configuration block.</p> <pre><code>{\n\"name\": \"retrieve-our-nodepool\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosgcp.gke.nodepool.probes\",\n\"func\": \"get_nodepool\",\n\"secrets\": [\"gcp\"],\n\"arguments\": {\n\"parent\": \"projects/my-project-89/locations/us-east1/clusters/cluster-1/nodePools/default-pool\"\n}\n}\n}\n</code></pre> <p>If not provided this action uses the configuration settings. In that case, make sure to also pass the <code>node_pool_id</code> value.</p> <pre><code>{\n\"name\": \"retrieve-our-nodepool\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosgcp.gke.nodepool.probes\",\n\"func\": \"get_nodepool\",\n\"secrets\": [\"gcp\"],\n\"arguments\": {\n\"node_pool_id\": \"default-pool\"\n}\n}\n}\n</code></pre> <p>See: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.zones.clusters.nodePools/get</p> <p>Signature:</p> <pre><code>def get_nodepool(node_pool_id: str = None,\n                 parent: str = None,\n                 configuration: Dict[str, Dict[str, str]] = None,\n                 secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required node_pool_id string null No parent string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"get-nodepool\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosgcp.gke.nodepool.probes\",\n\"func\": \"get_nodepool\"\n}\n}\n</code></pre> <pre><code>name: get-nodepool\nprovider:\nfunc: get_nodepool\nmodule: chaosgcp.gke.nodepool.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/gcp/#list_nodepools","title":"<code>list_nodepools</code>","text":"Type probe Module chaosgcp.gke.nodepool.probes Name list_nodepools Return mapping <p>List nodepools of a cluster.</p> <p>The <code>parent</code> is following the form <code>projects/*/locations/*/clusters/*</code> and will override any settings in the configuration block. If not provided this action uses the configuration settings.</p> <p>See: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.zones.clusters.nodePools/list</p> <p>Signature:</p> <pre><code>def list_nodepools(\n        parent: str = None,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required parent string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"list-nodepools\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosgcp.gke.nodepool.probes\",\n\"func\": \"list_nodepools\"\n}\n}\n</code></pre> <pre><code>name: list-nodepools\nprovider:\nfunc: list_nodepools\nmodule: chaosgcp.gke.nodepool.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/gcp/#rollback_nodepool","title":"<code>rollback_nodepool</code>","text":"Type action Module chaosgcp.gke.nodepool.actions Name rollback_nodepool Return mapping <p>Rollback a previously Aborted or Failed NodePool upgrade.</p> <p>If <code>wait_until_complete</code> is set to <code>True</code> (the default), the function will block until the node pool is ready. Otherwise, will return immediatly with the operation information.</p> <p>See: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.zones.clusters.nodePools/create</p> <p>Signature:</p> <pre><code>def rollback_nodepool(\n        node_pool_id: str,\n        parent: str = None,\n        wait_until_complete: bool = True,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required node_pool_id string Yes parent string null No wait_until_complete boolean true No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"rollback-nodepool\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosgcp.gke.nodepool.actions\",\n\"func\": \"rollback_nodepool\",\n\"arguments\": {\n\"node_pool_id\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: rollback-nodepool\nprovider:\narguments:\nnode_pool_id: ''\nfunc: rollback_nodepool\nmodule: chaosgcp.gke.nodepool.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/gcp/#swap_nodepool","title":"<code>swap_nodepool</code>","text":"Type action Module chaosgcp.gke.nodepool.actions Name swap_nodepool Return mapping <p>Create a new nodepool, drain the old one so pods can be rescheduled on the new pool. Delete the old nodepool only <code>delete_old_node_pool</code> is set to <code>True</code>, which is not the default. Otherwise, leave the old node pool cordonned so it cannot be scheduled any longer.</p> <p>Please ensure to provide the Kubernetes secrets as well when calling this action. See https://github.com/chaostoolkit/chaostoolkit-kubernetes#configuration</p> <p>Signature:</p> <pre><code>def swap_nodepool(old_node_pool_id: str,\n                  new_nodepool_body: Dict[str, Any],\n                  parent: str = None,\n                  wait_until_complete: bool = True,\n                  delete_old_node_pool: bool = False,\n                  drain_timeout: int = 120,\n                  configuration: Dict[str, Dict[str, str]] = None,\n                  secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required old_node_pool_id string Yes new_nodepool_body mapping Yes parent string null No wait_until_complete boolean true No delete_old_node_pool boolean false No drain_timeout integer 120 No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"swap-nodepool\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosgcp.gke.nodepool.actions\",\n\"func\": \"swap_nodepool\",\n\"arguments\": {\n\"old_node_pool_id\": \"\",\n\"new_nodepool_body\": {}\n}\n}\n}\n</code></pre> <pre><code>name: swap-nodepool\nprovider:\narguments:\nnew_nodepool_body: {}\nold_node_pool_id: ''\nfunc: swap_nodepool\nmodule: chaosgcp.gke.nodepool.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/gcp/#monitoring","title":"monitoring","text":""},{"location":"drivers/gcp/#get_metrics","title":"<code>get_metrics</code>","text":"Type probe Module chaosgcp.monitoring.probes Name get_metrics Return list <p>Query for Cloud Monitoring metrics and returns a list of time series objects for the metric and period.</p> <p>Refer to the documentation https://cloud.google.com/python/docs/reference/monitoring/latest/query to learn about the various flags.</p> <p>Signature:</p> <pre><code>def get_metrics(\n        metric_type: str,\n        metric_labels_filters: Optional[Dict[str, str]] = None,\n        resource_labels_filters: Optional[Dict[str, str]] = None,\n        end_time: str = 'now',\n        window: str = '5 minutes',\n        aligner: int = 0,\n        aligner_minutes: int = 1,\n        reducer: int = 0,\n        reducer_group_by: Optional[List[str]] = None,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; List[Dict[str, Any]]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required metric_type string Yes metric_labels_filters object null No resource_labels_filters object null No end_time string \u201cnow\u201d No window string \u201c5 minutes\u201d No aligner integer 0 No aligner_minutes integer 1 No reducer integer 0 No reducer_group_by object null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"get-metrics\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosgcp.monitoring.probes\",\n\"func\": \"get_metrics\",\n\"arguments\": {\n\"metric_type\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: get-metrics\nprovider:\narguments:\nmetric_type: ''\nfunc: get_metrics\nmodule: chaosgcp.monitoring.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/gcp/#sql","title":"sql","text":""},{"location":"drivers/gcp/#describe_instance","title":"<code>describe_instance</code>","text":"Type probe Module chaosgcp.sql.probes Name describe_instance Return mapping <p>Displays configuration and metadata about a Cloud SQL instance.</p> <p>Information such as instance name, IP address, region, the CA certificate and configuration settings will be displayed.</p> <p>See: https://cloud.google.com/sql/docs/postgres/admin-api/v1/instances/get</p> <p>:param instance_id: Cloud SQL instance ID.</p> <p>Signature:</p> <pre><code>def describe_instance(\n        instance_id: str,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required instance_id string Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"describe-instance\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosgcp.sql.probes\",\n\"func\": \"describe_instance\",\n\"arguments\": {\n\"instance_id\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: describe-instance\nprovider:\narguments:\ninstance_id: ''\nfunc: describe_instance\nmodule: chaosgcp.sql.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/gcp/#disable_replication","title":"<code>disable_replication</code>","text":"Type action Module chaosgcp.sql.actions Name disable_replication Return mapping <p>Disable replication on a read replica.</p> <p>See also: https://cloud.google.com/sql/docs/postgres/replication/manage-replicas#disable_replication</p> <p>Signature:</p> <pre><code>def disable_replication(\n        replica_name: str,\n        project_id: str = None,\n        wait_until_complete: bool = True,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required replica_name string Yes project_id string null No wait_until_complete boolean true No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"disable-replication\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosgcp.sql.actions\",\n\"func\": \"disable_replication\",\n\"arguments\": {\n\"replica_name\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: disable-replication\nprovider:\narguments:\nreplica_name: ''\nfunc: disable_replication\nmodule: chaosgcp.sql.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/gcp/#enable_replication","title":"<code>enable_replication</code>","text":"Type action Module chaosgcp.sql.actions Name enable_replication Return mapping <p>Enable replication on a read replica.</p> <p>See also: https://cloud.google.com/sql/docs/postgres/replication/manage-replicas#enable_replication</p> <p>Signature:</p> <pre><code>def enable_replication(\n        replica_name: str,\n        project_id: str = None,\n        wait_until_complete: bool = True,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required replica_name string Yes project_id string null No wait_until_complete boolean true No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"enable-replication\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosgcp.sql.actions\",\n\"func\": \"enable_replication\",\n\"arguments\": {\n\"replica_name\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: enable-replication\nprovider:\narguments:\nreplica_name: ''\nfunc: enable_replication\nmodule: chaosgcp.sql.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/gcp/#export_data","title":"<code>export_data</code>","text":"Type action Module chaosgcp.sql.actions Name export_data Return mapping <p>Exports data from a Cloud SQL instance to a Cloud Storage bucket as a SQL dump or CSV file.</p> <p>See: https://cloud.google.com/sql/docs/postgres/admin-api/v1/instances/export</p> <p>If <code>project_id</code> is given, it will take precedence over the global project ID defined at the configuration level.</p> <p>Signature:</p> <pre><code>def export_data(instance_id: str,\n                storage_uri: str,\n                project_id: str = None,\n                file_type: str = 'sql',\n                databases: List[str] = None,\n                tables: List[str] = None,\n                export_schema_only: bool = False,\n                wait_until_complete: bool = True,\n                configuration: Dict[str, Dict[str, str]] = None,\n                secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required instance_id string Yes storage_uri string Yes project_id string null No file_type string \u201csql\u201d No databases list null No tables list null No export_schema_only boolean false No wait_until_complete boolean true No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"export-data\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosgcp.sql.actions\",\n\"func\": \"export_data\",\n\"arguments\": {\n\"instance_id\": \"\",\n\"storage_uri\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: export-data\nprovider:\narguments:\ninstance_id: ''\nstorage_uri: ''\nfunc: export_data\nmodule: chaosgcp.sql.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/gcp/#import_data","title":"<code>import_data</code>","text":"Type action Module chaosgcp.sql.actions Name import_data Return mapping <p>Imports data into a Cloud SQL instance from a SQL dump or CSV file in Cloud Storage.</p> <p>See: https://cloud.google.com/sql/docs/postgres/admin-api/v1/instances/import</p> <p>If <code>project_id</code> is given, it will take precedence over the global project ID defined at the configuration level.</p> <p>Signature:</p> <pre><code>def import_data(instance_id: str,\n                storage_uri: str,\n                database: str,\n                project_id: str = None,\n                file_type: str = 'sql',\n                import_user: str = None,\n                table: str = None,\n                columns: List[str] = None,\n                wait_until_complete: bool = True,\n                configuration: Dict[str, Dict[str, str]] = None,\n                secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required instance_id string Yes storage_uri string Yes database string Yes project_id string null No file_type string \u201csql\u201d No import_user string null No table string null No columns list null No wait_until_complete boolean true No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"import-data\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosgcp.sql.actions\",\n\"func\": \"import_data\",\n\"arguments\": {\n\"instance_id\": \"\",\n\"storage_uri\": \"\",\n\"database\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: import-data\nprovider:\narguments:\ndatabase: ''\ninstance_id: ''\nstorage_uri: ''\nfunc: import_data\nmodule: chaosgcp.sql.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/gcp/#list_instances","title":"<code>list_instances</code>","text":"Type probe Module chaosgcp.sql.probes Name list_instances Return mapping <p>Lists Cloud SQL instances in a given project in the alphabetical order of the instance name.</p> <p>See: https://cloud.google.com/sql/docs/postgres/admin-api/v1/instances/list</p> <p>Signature:</p> <pre><code>def list_instances(\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"list-instances\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosgcp.sql.probes\",\n\"func\": \"list_instances\"\n}\n}\n</code></pre> <pre><code>name: list-instances\nprovider:\nfunc: list_instances\nmodule: chaosgcp.sql.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/gcp/#restore_backup","title":"<code>restore_backup</code>","text":"Type action Module chaosgcp.sql.actions Name restore_backup Return mapping <p>Performs a restore of a given backup. If <code>target_instance_id</code> is not set then source and target are the same. If <code>backup_run_id</code> is not set, then it picks the most recent backup automatically.</p> <p>You may wait for the operation to complete, but bear in mind this can take several minutes.</p> <p>Signature:</p> <pre><code>def restore_backup(\n        source_instance_id: str,\n        target_instance_id: Optional[str] = None,\n        backup_run_id: Optional[str] = None,\n        project_id: str = None,\n        wait_until_complete: bool = True,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required source_instance_id string Yes target_instance_id object null No backup_run_id object null No project_id string null No wait_until_complete boolean true No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"restore-backup\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosgcp.sql.actions\",\n\"func\": \"restore_backup\",\n\"arguments\": {\n\"source_instance_id\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: restore-backup\nprovider:\narguments:\nsource_instance_id: ''\nfunc: restore_backup\nmodule: chaosgcp.sql.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/gcp/#trigger_failover","title":"<code>trigger_failover</code>","text":"Type action Module chaosgcp.sql.actions Name trigger_failover Return mapping <p>Causes a high-availability Cloud SQL instance to failover.</p> <p>See: https://cloud.google.com/sql/docs/postgres/admin-api/v1/instances/failover</p> <p>:param instance_id: Cloud SQL instance ID. :param wait_until_complete: wait for the operation in progress to complete. :param settings_version: The current settings version of this instance.</p> <p>:return:</p> <p>Signature:</p> <pre><code>def trigger_failover(\n        instance_id: str,\n        wait_until_complete: bool = True,\n        settings_version: Optional[int] = None,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required instance_id string Yes wait_until_complete boolean true No settings_version object null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"trigger-failover\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosgcp.sql.actions\",\n\"func\": \"trigger_failover\",\n\"arguments\": {\n\"instance_id\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: trigger-failover\nprovider:\narguments:\ninstance_id: ''\nfunc: trigger_failover\nmodule: chaosgcp.sql.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/gcp/#storage","title":"storage","text":""},{"location":"drivers/gcp/#object_exists","title":"<code>object_exists</code>","text":"Type probe Module chaosgcp.storage.probes Name object_exists Return boolean <p>Indicates whether a file in Cloud Storage bucket exists.</p> <p>:param bucket_name: name of the bucket :param object_name: name of the object within the bucket as path :param configuration: :param secrets:</p> <p>Signature:</p> <pre><code>def object_exists(bucket_name: str,\n                  object_name: str,\n                  configuration: Dict[str, Dict[str, str]] = None,\n                  secrets: Dict[str, Dict[str, str]] = None) -&gt; bool:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required bucket_name string Yes object_name string Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"object-exists\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosgcp.storage.probes\",\n\"func\": \"object_exists\",\n\"arguments\": {\n\"bucket_name\": \"\",\n\"object_name\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: object-exists\nprovider:\narguments:\nbucket_name: ''\nobject_name: ''\nfunc: object_exists\nmodule: chaosgcp.storage.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/grafana/","title":"Extension <code>chaosgrafana</code>","text":"Version 0.2.0 Repository https://github.com/chaostoolkit-incubator/chaostoolkit-grafana <p>This project should be used as a starting point to create your own Chaos Toolkit extension.</p>"},{"location":"drivers/grafana/#install","title":"Install","text":"<p>This package requires Python 3.7+</p> <p>To be used from your experiment, this package must be installed in the Python environment where chaostoolkit already lives.</p> <pre><code>$ pip install chaostoolkit-grafana\n</code></pre>"},{"location":"drivers/grafana/#usage","title":"Usage","text":""},{"location":"drivers/grafana/#sending-chaos-toolkit-logs-to-loki","title":"Sending Chaos Toolkit logs to Loki","text":"<p>To send the Chaos Toolkit logs to Loki endpoints, you need to enable the according control as follows:</p> <pre><code>{\n\"secrets\": {\n\"grafana\": {\n\"auth\": [\"admin\", \"admin\"]\n}\n},\n\"controls\": [\n{\n\"name\": \"loki\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosgrafana.controls.loki\",\n\"secrets\": [\"grafana\"],\n\"arguments\": {\n\"loki_endpoint\": \"http://localhost:3100\",\n\"tags\": {\"service\": \"something\"}\n}\n}\n}\n]\n}\n</code></pre> <p>You can set two other arguments to the control:</p> <ul> <li><code>trace_id</code>: This must be a string which will identify this run uniquely in   your logs. If none is a provided, a random string is generated.</li> <li><code>experiment_ref</code>: Sometimes it\u2019s useful to identify a particular experiment,   not just its run, throughout many runs. This is the string to do that. If   none is provided, a hash of the experiment is performed and used. The hash   is not stable across changes of the experiment of course.</li> </ul> <p>These are particularly useful when you cpuple this extension with others like Prometheus where you want to cross-reference between logs and metrics.</p>"},{"location":"drivers/grafana/#test","title":"Test","text":"<p>To run the tests for the project execute the following:</p> <pre><code>$ make tests\n</code></pre>"},{"location":"drivers/grafana/#formatting-and-linting","title":"Formatting and Linting","text":"<p>We use a combination of <code>black</code>, <code>flake8</code>, and <code>isort</code> to both lint and format this repositories code.</p> <p>Before raising a Pull Request, we recommend you run formatting against your code with:</p> <pre><code>$ make format\n</code></pre> <p>This will automatically format any code that doesn\u2019t adhere to the formatting standards.</p> <p>As some things are not picked up by the formatting, we also recommend you run:</p> <pre><code>$ make lint\n</code></pre> <p>To ensure that any unused import statements/strings that are too long, etc. are also picked up.</p>"},{"location":"drivers/grafana/#contribute","title":"Contribute","text":"<p>If you wish to contribute more functions to this package, you are more than welcome to do so. Please, fork this project, make your changes following the usual PEP 8 code style, sprinkling with tests and submit a PR for review.</p>"},{"location":"drivers/grafana/#exported-controls","title":"Exported Controls","text":""},{"location":"drivers/grafana/#loki","title":"loki","text":"<p>This module exports controls covering the following phases of the execution of an experiment:</p> Level Before After Experiment Loading False False Experiment False False Steady-state Hypothesis False False Method False False Rollback False False Activities False False <p>In addition, the controls may define the followings:</p> Level Enabled Validate Control False Configure Control True Cleanup Control False <p>To use this control module, please add the following section to your experiment:</p> JSONYAML <pre><code>{\n\"controls\": [\n{\n\"name\": \"chaosgrafana\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosgrafana.controls.loki\"\n}\n}\n]\n}\n</code></pre> <pre><code>controls:\n- name: chaosgrafana\nprovider:\nmodule: chaosgrafana.controls.loki\ntype: python\n</code></pre> <p>This block may also be enabled at any other level (steady-state hypothesis or activity) to focus only on that level.</p> <p>When enabled at the experiment level, by default, all sub-levels are also applied unless you set the <code>automatic</code> properties to <code>false</code>.</p>"},{"location":"drivers/grafana/#exported-activities","title":"Exported Activities","text":""},{"location":"drivers/grafana/#controls","title":"controls","text":""},{"location":"drivers/humio/","title":"Extension <code>chaoshumio</code>","text":"Version 0.6.0 Repository https://github.com/chaostoolkit-incubator/chaostoolkit-humio <p>This project is an extension for the Chaos Toolkit to target Humio.</p>"},{"location":"drivers/humio/#install","title":"Install","text":"<p>This package requires Python 3.7+</p> <p>To be used from your experiment, this package must be installed in the Python environment where chaostoolkit already lives.</p> <pre><code>$ pip install -U chaostoolkit-humio\n</code></pre>"},{"location":"drivers/humio/#humio-token","title":"Humio Token","text":"<p>To use this extension, you will need one piece of information from Humio, the API token for a user.</p>"},{"location":"drivers/humio/#usage","title":"Usage","text":"<p>This extension can be used a control on the experiment or a notification plugin of the Chaos Toolkit CLI itself. Usually, only one of these two methods is used at any given time as they serve similar purpose but feel free to combine them. The control approach is deeper because it logs down to the activity whereas notifications are much higher level.</p> <p>This extension can also be used as a probe to fetch information from Humio.</p>"},{"location":"drivers/humio/#query-log-events","title":"Query Log Events","text":"<p>To use this extension as a probe as part of your experiment, use it as follows:</p> <pre><code>{\n\"configuration\": {\n\"humio_url\": {\n\"type\": \"env\",\n\"key\": \"HUMIO_URL\",\n\"default\": \"https://cloud.humio.com\"\n},\n\"humio_repository\": {\n\"type\": \"env\",\n\"key\": \"HUMIO_REPOSITORY\",\n\"default\": \"sandbox\"\n}\n},\n\"secrets\": {\n\"humio\": {\n\"token\": {\n\"type\": \"env\",\n\"key\": \"HUMIO_TOKEN\"\n}\n}\n},\n\"steady-state-hypothesis\": {\n\"title\": \"Running experiment\",\n\"probes\": [\n{\n\"name\": \"run-humio-search-query\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaoshumio.probes\",\n\"func\": \"search_query\",\n\"secrets\": [\n\"humio\"\n],\n\"arguments\": {\n\"qs\": \"count(as=_count)\",\n\"start\": \"24hours\",\n\"end\": \"now\"\n}\n},\n\"tolerance\": {\n\"name\": \"humio-query-result-value-greater-than\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaoshumio.tolerances\",\n\"func\": \"field_value_above\",\n\"arguments\": {\n\"field\": \"_count\",\n\"lower\": 1\n}\n}\n}\n}\n]\n}\n}\n</code></pre> <p>In this example, we are using the <code>search_query</code> probe and validate it with a specific tolerance that can inspect the returned payload from Humio and ensure each value matches the required expectations.</p>"},{"location":"drivers/humio/#notification","title":"Notification","text":"<p>To use this extension to push notifications, edit your chaostoolkit settings by adding the following payload:</p> <pre><code>notifications:\n-\ntype: plugin\nmodule: chaoshumio.notification\nhumio_url: https://myhumio.company.com\ntoken: my-token\n</code></pre> <p>By default all events will be forwarded to that channel. You may filter only those events you care for:</p> <pre><code>notifications:\n-\ntype: plugin\nmodule: chaoshumio.notification\nhumio_url: https://myhumio.company.com\ntoken: my-token\nevents:\n- run-failed\n- run-started\n</code></pre> <p>Only sends those two events.</p>"},{"location":"drivers/humio/#control","title":"Control","text":"<p>To use this extension as a control over the experiment and send logs during the execution of the experiment to <code>https://cloud.humio.com</code>, add the following payload to your experiment:</p> <pre><code>{\n\"secrets\": {\n\"humio\": {\n\"ingest_token\": {\n\"type\": \"env\",\n\"key\": \"HUMIO_INGEST_TOKEN\"\n}\n}\n},\n\"controls\": [\n{\n\"name\": \"humio-logger\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaoshumio.control\"\n}\n}\n]\n}\n</code></pre> <p>You do not need to set the <code>secrets</code> property in the <code>provider</code> block. In a control, all secrets are passed directly to each control asking for it.</p> <p>If you want to send logs to a different Humio URL endpoint, specify the <code>humio_url</code> configuration parameter. The following shows how this parameter:</p> <pre><code>{\n\"secrets\": {\n\"humio\": {\n\"ingest_token\": {\n\"type\": \"env\",\n\"key\": \"HUMIO_INGEST_TOKEN\"\n}\n}\n},\n\"configuration\": {\n\"humio_url\": \"https://myhumio.company.com\"\n},\n\"controls\": [\n{\n\"name\": \"humio-logger\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaoshumio.control\"\n}\n}\n]\n}\n</code></pre> <p>This will ensure the results of the experiment, steady-state, method, rollbacks and each activity are sent to Humio. The experiment itself will also be send initially.</p>"},{"location":"drivers/humio/#contribute","title":"Contribute","text":"<p>If you wish to contribute more functions to this package, you are more than welcome to do so. Please, fork this project, make your changes following the usual PEP 8 code style, sprinkling with tests and submit a PR for review.</p> <p>The Chaos Toolkit projects require all contributors must sign a Developer Certificate of Origin on each commit they would like to merge into the master branch of the repository. Please, make sure you can abide by the rules of the DCO before submitting a PR.</p>"},{"location":"drivers/humio/#develop","title":"Develop","text":"<p>If you wish to develop on this project, make sure to install the development dependencies. But first, create a virtual environment and then install those dependencies.</p> <pre><code>$ pip install .[dev]\n</code></pre> <p>Then, point your environment to this directory:</p> <pre><code>$ pip install -e .\n</code></pre> <p>Now, you can edit the files and they will be automatically be seen by your environment, even when running from the <code>chaos</code> command locally.</p>"},{"location":"drivers/humio/#test","title":"Test","text":"<p>To run the tests for the project execute the following:</p> <pre><code>$ pytest\n</code></pre>"},{"location":"drivers/humio/#lint","title":"Lint","text":"<p>Ensure your code is properly linted:</p> <pre><code>$ make format\n$ make lint\n</code></pre>"},{"location":"drivers/humio/#exported-controls","title":"Exported Controls","text":""},{"location":"drivers/humio/#control_1","title":"control","text":"<p>This module exports controls covering the following phases of the execution of an experiment:</p> Level Before After Experiment Loading False False Experiment True True Steady-state Hypothesis False True Method False True Rollback False True Activities False True <p>In addition, the controls may define the followings:</p> Level Enabled Validate Control False Configure Control True Cleanup Control False <p>To use this control module, please add the following section to your experiment:</p> JSONYAML <pre><code>{\n\"controls\": [\n{\n\"name\": \"chaoshumio\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaoshumio.control\"\n}\n}\n]\n}\n</code></pre> <pre><code>controls:\n- name: chaoshumio\nprovider:\nmodule: chaoshumio.control\ntype: python\n</code></pre> <p>This block may also be enabled at any other level (steady-state hypothesis or activity) to focus only on that level.</p> <p>When enabled at the experiment level, by default, all sub-levels are also applied unless you set the <code>automatic</code> properties to <code>false</code>.</p>"},{"location":"drivers/humio/#exported-activities","title":"Exported Activities","text":""},{"location":"drivers/humio/#control_2","title":"control","text":""},{"location":"drivers/humio/#notification_1","title":"notification","text":""},{"location":"drivers/humio/#notify","title":"<code>notify</code>","text":"Type Module chaoshumio.notification Name notify Return null <p>Send a log message to the Humio ingest endpoint.</p> <p>The settings must contain:</p> <ul> <li><code>\"token\"</code>: a slack API token</li> <li><code>\"humio_url\"</code>: the Humio endpoint to send the event to</li> </ul> <p>If token is missing, no notification is sent. If humio_url is not specified then the default, https://cloud.humio.com, will be used.</p> <p>Signature:</p> <pre><code>def notify(settings: Dict[str, Any], event: Dict[str, Any]) -&gt; None:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required settings mapping Yes event mapping Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"notify\",\n\"type\": \"\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaoshumio.notification\",\n\"func\": \"notify\",\n\"arguments\": {\n\"settings\": {},\n\"event\": {}\n}\n}\n}\n</code></pre> <pre><code>name: notify\nprovider:\narguments:\nevent: {}\nsettings: {}\nfunc: notify\nmodule: chaoshumio.notification\ntype: python\ntype: ''\n</code></pre>"},{"location":"drivers/humio/#probes","title":"probes","text":""},{"location":"drivers/humio/#search_query","title":"<code>search_query</code>","text":"Type probe Module chaoshumio.probes Name search_query Return Any <p>Perform a search query against the Humio API and returns its result as-is.</p> <p>Set <code>result_as_text</code> to <code>true</code> to get the result as a raw string, otherwise the probe returns a JSON payload.</p> <p>Make sure to set the Humio token as part of the experiment secrets and the repository name as part of its configuration section using the <code>humio_repository</code> key.</p> <p>See https://docs.humio.com/api/using-the-search-api-with-humio/#query</p> <p>Signature:</p> <pre><code>def search_query(qs: str,\n                 start: Union[int, str] = '24hours',\n                 end: Union[int, str] = 'now',\n                 tz_offset: int = 0,\n                 params: Union[str, Dict[str, str], NoneType] = None,\n                 result_as_text: Optional[bool] = False,\n                 configuration: Optional[Dict[str, Dict[str, str]]] = None,\n                 secrets: Optional[Dict[str, Dict[str, str]]] = None) -&gt; Any:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required qs string Yes start object \u201c24hours\u201d No end object \u201cnow\u201d No tz_offset integer 0 No params object null No result_as_text object false No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"search-query\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaoshumio.probes\",\n\"func\": \"search_query\",\n\"arguments\": {\n\"qs\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: search-query\nprovider:\narguments:\nqs: ''\nfunc: search_query\nmodule: chaoshumio.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/humio/#tolerances","title":"tolerances","text":""},{"location":"drivers/humio/#field_value_above","title":"<code>field_value_above</code>","text":"Type tolerance Module chaoshumio.tolerances Name field_value_above Return boolean <p>Validate value at the given field to be above the given lower limit.</p> <p>Signature:</p> <pre><code>def field_value_above(value: Any = None,\n                      field: Optional[str] = None,\n                      lower: float = 0.0) -&gt; bool:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required value object null No field object null No lower number 0.0 No <p>Tolerances declare the <code>value</code> argument which is automatically injected by Chaos Toolkit as the output of the probe they are evaluating.</p> <p>Usage:</p> JSONYAML <pre><code>{\n\"steady-state-hypothesis\": {\n\"title\": \"...\",\n\"probes\": [\n{\n\"type\": \"probe\",\n\"tolerance\": {\n\"name\": \"field-value-above\",\n\"type\": \"tolerance\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaoshumio.tolerances\",\n\"func\": \"field_value_above\"\n}\n},\n\"...\": \"...\"\n}\n]\n}\n}\n</code></pre> <pre><code>steady-state-hypothesis:\nprobes:\n- '...': '...'\ntolerance:\nname: field-value-above\nprovider:\nfunc: field_value_above\nmodule: chaoshumio.tolerances\ntype: python\ntype: tolerance\ntype: probe\ntitle: '...'\n</code></pre>"},{"location":"drivers/humio/#field_value_between","title":"<code>field_value_between</code>","text":"Type tolerance Module chaoshumio.tolerances Name field_value_between Return boolean <p>Validate value at the given field to be between the lower/upper boundaries.</p> <p>Signature:</p> <pre><code>def field_value_between(value: Any = None,\n                        field: Optional[str] = None,\n                        lower: float = 0.0,\n                        upper: float = 0.0) -&gt; bool:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required value object null No field object null No lower number 0.0 No upper number 0.0 No <p>Tolerances declare the <code>value</code> argument which is automatically injected by Chaos Toolkit as the output of the probe they are evaluating.</p> <p>Usage:</p> JSONYAML <pre><code>{\n\"steady-state-hypothesis\": {\n\"title\": \"...\",\n\"probes\": [\n{\n\"type\": \"probe\",\n\"tolerance\": {\n\"name\": \"field-value-between\",\n\"type\": \"tolerance\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaoshumio.tolerances\",\n\"func\": \"field_value_between\"\n}\n},\n\"...\": \"...\"\n}\n]\n}\n}\n</code></pre> <pre><code>steady-state-hypothesis:\nprobes:\n- '...': '...'\ntolerance:\nname: field-value-between\nprovider:\nfunc: field_value_between\nmodule: chaoshumio.tolerances\ntype: python\ntype: tolerance\ntype: probe\ntitle: '...'\n</code></pre>"},{"location":"drivers/humio/#field_value_under","title":"<code>field_value_under</code>","text":"Type tolerance Module chaoshumio.tolerances Name field_value_under Return boolean <p>Validate value at the given field to be under the given upper limit.</p> <p>Signature:</p> <pre><code>def field_value_under(value: Any = None,\n                      field: Optional[str] = None,\n                      upper: float = 0.0) -&gt; bool:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required value object null No field object null No upper number 0.0 No <p>Tolerances declare the <code>value</code> argument which is automatically injected by Chaos Toolkit as the output of the probe they are evaluating.</p> <p>Usage:</p> JSONYAML <pre><code>{\n\"steady-state-hypothesis\": {\n\"title\": \"...\",\n\"probes\": [\n{\n\"type\": \"probe\",\n\"tolerance\": {\n\"name\": \"field-value-under\",\n\"type\": \"tolerance\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaoshumio.tolerances\",\n\"func\": \"field_value_under\"\n}\n},\n\"...\": \"...\"\n}\n]\n}\n}\n</code></pre> <pre><code>steady-state-hypothesis:\nprobes:\n- '...': '...'\ntolerance:\nname: field-value-under\nprovider:\nfunc: field_value_under\nmodule: chaoshumio.tolerances\ntype: python\ntype: tolerance\ntype: probe\ntitle: '...'\n</code></pre>"},{"location":"drivers/istio/","title":"Extension <code>chaosistio</code>","text":"Version 0.3.0 Repository https://github.com/chaostoolkit-incubator/chaostoolkit-istio <p>This project is a collection of actions and probes, gathered as an extension to the Chaos Toolkit.</p>"},{"location":"drivers/istio/#install","title":"Install","text":"<p>This package requires Python 3.6+</p> <p>To be used from your experiment, this package must be installed in the Python environment where chaostoolkit already lives.</p> <pre><code>$ pip install -U chaostoolkit-istio\n</code></pre>"},{"location":"drivers/istio/#usage","title":"Usage","text":"<p>Below is an example of using this extension to inject a delay of 5 seconds to a specific user.</p> <p>Note this example can be applied against the bookinfo Istio sample application.</p> <p>To run it, simple set the <code>KUBERNETES_CONTEXT</code> environment variable to the target cluster and ensure your local kubeconfig is properly populated for that context. Set also the <code>PRODUCT_PAGE_SERVICE_BASE_URL</code> to the address of the Istio gateway.</p> <p>For instance:</p> <pre><code>$ export PRODUCT_PAGE_SERVICE_BASE_URL=$(kubectl get po -l istio=ingressgateway -n istio-system -o 'jsonpath={.items[0].status.hostIP}'):$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name==\"http2\")].nodePort}')\n</code></pre> <pre><code>{\n\"title\": \"Network latency does not impact our users\",\n\"description\": \"Using Istio fault injection capability, let's explore how latency impacts a single user\",\n\"configuration\": {\n\"product_page_url\": {\n\"type\": \"env\",\n\"key\": \"PRODUCT_PAGE_SERVICE_BASE_URL\"\n}\n},\n\"secrets\": {\n\"istio\": {\n\"KUBERNETES_CONTEXT\": {\n\"type\": \"env\",\n\"key\": \"KUBERNETES_CONTEXT\"\n}\n}\n},\n\"steady-state-hypothesis\": {\n\"title\": \"Our service should respond under 1 second\",\n\"probes\": [\n{\n\"type\": \"probe\",\n\"name\": \"sign-in-as-jason\",\n\"tolerance\": 0,\n\"provider\": {\n\"type\": \"process\",\n\"path\": \"curl\",\n\"arguments\": \"-v -X POST -d 'username=jason&amp;passwd=' -c /tmp/cookie.txt --silent ${product_page_url}/login\"\n}\n},\n{\n\"type\": \"probe\",\n\"name\": \"fetch-productpage-for-jason-in-due-time\",\n\"tolerance\": 0,\n\"provider\": {\n\"type\": \"process\",\n\"path\": \"curl\",\n\"arguments\": \"-v --connect-timeout 1 --max-time 1 -b /tmp/cookie.txt --silent ${product_page_url}/productpage\"\n}\n}\n]\n},\n\"method\": [\n{\n\"type\": \"action\",\n\"name\": \"inject-fault-for-jason-only\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosistio.fault.actions\",\n\"func\": \"add_delay_fault\",\n\"secrets\": [\"istio\"],\n\"arguments\": {\n\"virtual_service_name\": \"reviews\",\n\"fixed_delay\": \"5s\",\n\"percentage\": {\n\"value\":  100.0\n},\n\"routes\": [\n{\n\"destination\": {\n\"host\": \"reviews\",\n\"subset\": \"v2\"\n}\n}\n]\n}\n},\n\"pauses\": {\n\"after\": 2\n}\n}\n],\n\"rollbacks\": [\n{\n\"type\": \"action\",\n\"name\": \"remove-fault-for-jason-only\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosistio.fault.actions\",\n\"func\": \"remove_delay_fault\",\n\"secrets\": [\"istio\"],\n\"arguments\": {\n\"virtual_service_name\": \"reviews\",\n\"routes\": [\n{\n\"destination\": {\n\"host\": \"reviews\",\n\"subset\": \"v2\"\n}\n}\n]\n}\n}\n}\n]\n}\n</code></pre> <p>That\u2019s it!</p> <p>Please explore the code to see existing probes and actions.</p>"},{"location":"drivers/istio/#configuration","title":"Configuration","text":"<p>This extension needs you specify how to connect to the Kubernetes cluster. This can be done by setting the <code>KUBERNETES_CONTEXT</code> in the <code>secrets</code> payload.</p>"},{"location":"drivers/istio/#contribute","title":"Contribute","text":"<p>If you wish to contribute more functions to this package, you are more than welcome to do so. Please, fork this project, make your changes following the usual PEP 8 code style, sprinkling with tests and submit a PR for review.</p> <p>The Chaos Toolkit projects require all contributors must sign a Developer Certificate of Origin on each commit they would like to merge into the master branch of the repository. Please, make sure you can abide by the rules of the DCO before submitting a PR.</p>"},{"location":"drivers/istio/#develop","title":"Develop","text":"<p>If you wish to develop on this project, make sure to install the development dependencies. But first, create a virtual environment and then install those dependencies.</p> <pre><code>$ pip install -r requirements-dev.txt -r requirements.txt\n</code></pre> <p>Then, point your environment to this directory:</p> <pre><code>$ python setup.py develop\n</code></pre> <p>Now, you can edit the files and they will be automatically be seen by your environment, even when running from the <code>chaos</code> command locally.</p>"},{"location":"drivers/istio/#test","title":"Test","text":"<p>To run the tests for the project execute the following:</p> <pre><code>$ pytest\n</code></pre>"},{"location":"drivers/istio/#exported-activities","title":"Exported Activities","text":""},{"location":"drivers/istio/#fault","title":"fault","text":""},{"location":"drivers/istio/#add_abort_fault","title":"<code>add_abort_fault</code>","text":"Type action Module chaosistio.fault.actions Name add_abort_fault Return mapping <p>Abort requests early by the virtual service identified by <code>name</code></p> <p>See https://istio.io/docs/reference/config/istio.networking.v1alpha3/#HTTPFaultInjection-Abort</p> <p>Signature:</p> <pre><code>def add_abort_fault(\n        virtual_service_name: str,\n        http_status: int,\n        routes: List[Dict[str, str]],\n        percentage: float = None,\n        ns: str = 'default',\n        version: str = 'networking.istio.io/v1alpha3',\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required virtual_service_name string Yes http_status integer Yes routes list Yes percentage number null No ns string \u201cdefault\u201d No version string \u201cnetworking.istio.io/v1alpha3\u201d No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"add-abort-fault\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosistio.fault.actions\",\n\"func\": \"add_abort_fault\",\n\"arguments\": {\n\"virtual_service_name\": \"\",\n\"http_status\": 0,\n\"routes\": []\n}\n}\n}\n</code></pre> <pre><code>name: add-abort-fault\nprovider:\narguments:\nhttp_status: 0\nroutes: []\nvirtual_service_name: ''\nfunc: add_abort_fault\nmodule: chaosistio.fault.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/istio/#add_delay_fault","title":"<code>add_delay_fault</code>","text":"Type action Module chaosistio.fault.actions Name add_delay_fault Return mapping <p>Add delay to the virtual service identified by <code>name</code></p> <p>See https://istio.io/docs/reference/config/istio.networking.v1alpha3/#HTTPFaultInjection-Delay</p> <p>Signature:</p> <pre><code>def add_delay_fault(\n        virtual_service_name: str,\n        fixed_delay: str,\n        routes: List[Dict[str, str]],\n        percentage: float = None,\n        ns: str = 'default',\n        version: str = 'networking.istio.io/v1alpha3',\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required virtual_service_name string Yes fixed_delay string Yes routes list Yes percentage number null No ns string \u201cdefault\u201d No version string \u201cnetworking.istio.io/v1alpha3\u201d No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"add-delay-fault\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosistio.fault.actions\",\n\"func\": \"add_delay_fault\",\n\"arguments\": {\n\"virtual_service_name\": \"\",\n\"fixed_delay\": \"\",\n\"routes\": []\n}\n}\n}\n</code></pre> <pre><code>name: add-delay-fault\nprovider:\narguments:\nfixed_delay: ''\nroutes: []\nvirtual_service_name: ''\nfunc: add_delay_fault\nmodule: chaosistio.fault.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/istio/#get_virtual_service","title":"<code>get_virtual_service</code>","text":"Type probe Module chaosistio.fault.probes Name get_virtual_service Return mapping <p>Get a virtual service identified by <code>name</code></p> <p>See https://istio.io/docs/reference/config/istio.networking.v1alpha3/#VirtualService</p> <p>Signature:</p> <pre><code>def get_virtual_service(\n        virtual_service_name: str,\n        ns: str = 'default',\n        version: str = 'networking.istio.io/v1alpha3',\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required virtual_service_name string Yes ns string \u201cdefault\u201d No version string \u201cnetworking.istio.io/v1alpha3\u201d No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"get-virtual-service\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosistio.fault.probes\",\n\"func\": \"get_virtual_service\",\n\"arguments\": {\n\"virtual_service_name\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: get-virtual-service\nprovider:\narguments:\nvirtual_service_name: ''\nfunc: get_virtual_service\nmodule: chaosistio.fault.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/istio/#remove_abort_fault","title":"<code>remove_abort_fault</code>","text":"Type action Module chaosistio.fault.actions Name remove_abort_fault Return mapping <p>Remove abort request faults from the virtual service identified by <code>name</code></p> <p>See https://istio.io/docs/reference/config/istio.networking.v1alpha3/#HTTPFaultInjection-Abort</p> <p>Signature:</p> <pre><code>def remove_abort_fault(\n        virtual_service_name: str,\n        routes: List[Dict[str, str]],\n        ns: str = 'default',\n        version: str = 'networking.istio.io/v1alpha3',\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required virtual_service_name string Yes routes list Yes ns string \u201cdefault\u201d No version string \u201cnetworking.istio.io/v1alpha3\u201d No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"remove-abort-fault\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosistio.fault.actions\",\n\"func\": \"remove_abort_fault\",\n\"arguments\": {\n\"virtual_service_name\": \"\",\n\"routes\": []\n}\n}\n}\n</code></pre> <pre><code>name: remove-abort-fault\nprovider:\narguments:\nroutes: []\nvirtual_service_name: ''\nfunc: remove_abort_fault\nmodule: chaosistio.fault.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/istio/#remove_delay_fault","title":"<code>remove_delay_fault</code>","text":"Type action Module chaosistio.fault.actions Name remove_delay_fault Return mapping <p>Remove delay from the virtual service identified by <code>name</code></p> <p>See https://istio.io/docs/reference/config/istio.networking.v1alpha3/#HTTPFaultInjection-Delay</p> <p>Signature:</p> <pre><code>def remove_delay_fault(\n        virtual_service_name: str,\n        routes: List[Dict[str, str]],\n        ns: str = 'default',\n        version: str = 'networking.istio.io/v1alpha3',\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required virtual_service_name string Yes routes list Yes ns string \u201cdefault\u201d No version string \u201cnetworking.istio.io/v1alpha3\u201d No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"remove-delay-fault\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosistio.fault.actions\",\n\"func\": \"remove_delay_fault\",\n\"arguments\": {\n\"virtual_service_name\": \"\",\n\"routes\": []\n}\n}\n}\n</code></pre> <pre><code>name: remove-delay-fault\nprovider:\narguments:\nroutes: []\nvirtual_service_name: ''\nfunc: remove_delay_fault\nmodule: chaosistio.fault.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/istio/#set_fault","title":"<code>set_fault</code>","text":"Type action Module chaosistio.fault.actions Name set_fault Return mapping <p>Setfault injection on the virtual service identified by <code>name</code></p> <p>The <code>fault</code> argument must be the object passed as the <code>spec</code> property of a virtual service resource.</p> <p>If a fault already exists, it is updated with the new specification.</p> <p>See https://istio.io/docs/reference/config/istio.networking.v1alpha3/#HTTPFaultInjection</p> <p>Signature:</p> <pre><code>def set_fault(virtual_service_name: str,\n              routes: List[Dict[str, str]],\n              fault: Dict[str, Any],\n              ns: str = 'default',\n              version: str = 'networking.istio.io/v1alpha3',\n              configuration: Dict[str, Dict[str, str]] = None,\n              secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required virtual_service_name string Yes routes list Yes fault mapping Yes ns string \u201cdefault\u201d No version string \u201cnetworking.istio.io/v1alpha3\u201d No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"set-fault\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosistio.fault.actions\",\n\"func\": \"set_fault\",\n\"arguments\": {\n\"virtual_service_name\": \"\",\n\"routes\": [],\n\"fault\": {}\n}\n}\n}\n</code></pre> <pre><code>name: set-fault\nprovider:\narguments:\nfault: {}\nroutes: []\nvirtual_service_name: ''\nfunc: set_fault\nmodule: chaosistio.fault.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/istio/#unset_fault","title":"<code>unset_fault</code>","text":"Type action Module chaosistio.fault.actions Name unset_fault Return mapping <p>Unset fault injection from the virtual service identified by <code>name</code></p> <p>The <code>fault</code> argument must be the object passed as the <code>spec</code> property of a virtual service resource.</p> <p>See https://istio.io/docs/reference/config/istio.networking.v1alpha3/#HTTPFaultInjection</p> <p>Signature:</p> <pre><code>def unset_fault(virtual_service_name: str,\n                routes: List[Dict[str, str]],\n                ns: str = 'default',\n                version: str = 'networking.istio.io/v1alpha3',\n                configuration: Dict[str, Dict[str, str]] = None,\n                secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required virtual_service_name string Yes routes list Yes ns string \u201cdefault\u201d No version string \u201cnetworking.istio.io/v1alpha3\u201d No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"unset-fault\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosistio.fault.actions\",\n\"func\": \"unset_fault\",\n\"arguments\": {\n\"virtual_service_name\": \"\",\n\"routes\": []\n}\n}\n}\n</code></pre> <pre><code>name: unset-fault\nprovider:\narguments:\nroutes: []\nvirtual_service_name: ''\nfunc: unset_fault\nmodule: chaosistio.fault.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/k6/","title":"Extension <code>chaosk6</code>","text":"Version 0.2.0 Repository https://github.com/k6io/chaostoolkit-k6 <p>N/A</p>"},{"location":"drivers/k6/#exported-activities","title":"Exported Activities","text":""},{"location":"drivers/k6/#actions","title":"actions","text":""},{"location":"drivers/k6/#run_script","title":"<code>run_script</code>","text":"Type action Module chaosk6.actions Name run_script Return None <p>Run an arbitrary k6 script with a configurable amount of VUs and duration. Depending on the specs of the attacking machine, possible VU amount may vary. For a non-customized 2019 Macbook Pro, it will cap around 250 \u00b1 50.</p> <p>\u2013 scriptPath : str   Full path to the k6 test script vus : int   Amount of virtual users to run the test with duration : str   Duration, written as a string, ie: <code>1h2m3s</code> etc</p> <p>Signature:</p> <pre><code>def run_script(scriptPath: str = None, vus: int = 1, duration: str = '1s'):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required scriptPath string null No vus integer 1 No duration string \u201c1s\u201d No <p>Usage:</p> <pre><code>{\n\"name\": \"run-script\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosk6.actions\",\n\"func\": \"run_script\"\n}\n}\n</code></pre> <pre><code>name: run-script\nprovider:\nfunc: run_script\nmodule: chaosk6.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/k6/#stress_endpoint","title":"<code>stress_endpoint</code>","text":"Type action Module chaosk6.actions Name stress_endpoint Return None <p>Stress a single endpoint with a configurable amount of VUs and duration. Depending on the specs of the attacking machine, possible VU amount may vary. For a non-customized 2019 Macbook Pro, it will cap around 250 \u00b1 50.</p> <p>\u2013 endpoint : str   The URL to the endpoint you want to stress, including the scheme prefix. vus : int   Amount of virtual users to run the test with duration : str   Duration, written as a string, ie: <code>1h2m3s</code> etc</p> <p>Signature:</p> <pre><code>def stress_endpoint(endpoint: str = None, vus: int = 1, duration: str = '1s'):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required endpoint string null No vus integer 1 No duration string \u201c1s\u201d No <p>Usage:</p> <pre><code>{\n\"name\": \"stress-endpoint\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosk6.actions\",\n\"func\": \"stress_endpoint\"\n}\n}\n</code></pre> <pre><code>name: stress-endpoint\nprovider:\nfunc: stress_endpoint\nmodule: chaosk6.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/k6/#probes","title":"probes","text":""},{"location":"drivers/k6/#http","title":"<code>http</code>","text":"Type probe Module chaosk6.probes Name http Return boolean <p>Probe an endpoint to make sure it responds to an http request with the expected HTTP status code. Depending on the endpoint and your payload, this action might be destructive. Use with caution.</p> <p>\u2013 endpoint : str     The URL to the endpoint to probe method : str     A valid http request method name, like GET, POST, PUT, DELETE, OPTIONS, or PATCH status : int     The expected HTTP Response status code. vus : int     The amount of concurrent virtual users accessing the endpoint duration : str     How long to probe the endpoint. Expressed as a duration string,     i.e \u201c20s\u201d, \u201c1m\u201d, \u201c1h\u201d etc. timeout : int     Timeout duration for http requests. Defaults to 1 second</p> <p>Signature:</p> <pre><code>def http(endpoint: str,\n         method: str = 'GET',\n         status: int = 200,\n         body: str = '',\n         headers: dict = {},\n         vus: int = 1,\n         duration: str = '',\n         debug: bool = False,\n         timeout: int = 1) -&gt; bool:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required endpoint string Yes method string \u201cGET\u201d No status integer 200 No body string \u201d\u201c No headers mapping {} No vus integer 1 No duration string \u201d\u201c No debug boolean false No timeout integer 1 No <p>Usage:</p> <pre><code>{\n\"name\": \"http\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosk6.probes\",\n\"func\": \"http\",\n\"arguments\": {\n\"endpoint\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: http\nprovider:\narguments:\nendpoint: ''\nfunc: http\nmodule: chaosk6.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/kubernetes/","title":"Extension <code>chaosk8s</code>","text":"Version 0.26.4 Repository https://github.com/chaostoolkit/chaostoolkit-kubernetes <p>This project contains activities, such as probes and actions, you can call from your experiment through the Chaos Toolkit to perform Chaos Engineering against the Kubernetes API: killing a pod, removing a statefulset or node\u2026</p>"},{"location":"drivers/kubernetes/#install","title":"Install","text":"<p>To be used from your experiment, this package must be installed in the Python environment where chaostoolkit already lives.</p> <pre><code>$ pip install chaostoolkit-kubernetes\n</code></pre>"},{"location":"drivers/kubernetes/#usage","title":"Usage","text":"<p>To use the probes and actions from this package, add the following to your experiment file:</p> <pre><code>{\n\"title\": \"Do we remain available in face of pod going down?\",\n\"description\": \"We expect Kubernetes to handle the situation gracefully when a pod goes down\",\n\"tags\": [\"kubernetes\"],\n\"steady-state-hypothesis\": {\n\"title\": \"Verifying service remains healthy\",\n\"probes\": [\n{\n\"name\": \"all-our-microservices-should-be-healthy\",\n\"type\": \"probe\",\n\"tolerance\": true,\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosk8s.probes\",\n\"func\": \"microservice_available_and_healthy\",\n\"arguments\": {\n\"name\": \"myapp\"\n}\n}\n}\n]\n},\n\"method\": [\n{\n\"type\": \"action\",\n\"name\": \"terminate-db-pod\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosk8s.pod.actions\",\n\"func\": \"terminate_pods\",\n\"arguments\": {\n\"label_selector\": \"app=my-app\",\n\"name_pattern\": \"my-app-[0-9]$\",\n\"rand\": true\n}\n},\n\"pauses\": {\n\"after\": 5\n}\n}\n]\n}\n</code></pre> <p>That\u2019s it! Notice how the action gives you the way to kill one pod randomly.</p> <p>Please explore the documentation to see existing probes and actions.</p>"},{"location":"drivers/kubernetes/#configuration","title":"Configuration","text":""},{"location":"drivers/kubernetes/#use-kubeconfig","title":"Use ~/.kube/config","text":"<p>If you have a valid entry in your <code>~/.kube/config</code> file for the cluster you want to target, then there is nothing to be done.</p> <p>You may specify <code>KUBECONFIG</code> to specify a different location.</p> <pre><code>$ export KUBECONFIG=/tmp/my-config\n</code></pre>"},{"location":"drivers/kubernetes/#specify-the-kubernetes-context","title":"Specify the Kubernetes context","text":"<p>Quite often, your Kubernetes configuration contains several entries and you need to define the one to use as a default context when not it isn\u2019t explicitely provided.</p> <p>You may of course change your default using <code>kubectl config use-context KUBERNETES_CONTEXT</code> but you can also be explicit in your experiment as follows:</p> <pre><code>{\n\"title\": \"Do we remain available in face of pod going down?\",\n\"description\": \"We expect Kubernetes to handle the situation gracefully when a pod goes down\",\n\"tags\": [\"kubernetes\"],\n\"secrets\": {\n\"k8s\": {\n\"KUBERNETES_CONTEXT\": \"...\"\n}\n},\n\"steady-state-hypothesis\": {\n\"title\": \"Verifying service remains healthy\",\n\"probes\": [\n{\n\"name\": \"all-our-microservices-should-be-healthy\",\n\"type\": \"probe\",\n\"tolerance\": true,\n\"secrets\": [\"k8s\"],\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosk8s.probes\",\n\"func\": \"microservice_available_and_healthy\",\n\"arguments\": {\n\"name\": \"myapp\"\n}\n}\n}\n]\n},\n\"method\": [\n{\n\"type\": \"action\",\n\"name\": \"terminate-db-pod\",\n\"secrets\": [\"k8s\"],\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosk8s.pod.actions\",\n\"func\": \"terminate_pods\",\n\"arguments\": {\n\"label_selector\": \"app=my-app\",\n\"name_pattern\": \"my-app-[0-9]$\",\n\"rand\": true\n}\n},\n\"pauses\": {\n\"after\": 5\n}\n}\n]\n}\n</code></pre> <p>You need to specify the <code>KUBERNETES_CONTEXT</code> secret key to the name of the context you want the experiment to use. Make sure to also inform the actions and probes about the secret entries they should be passed <code>\"secrets\": [\"k8s\"]</code>.</p>"},{"location":"drivers/kubernetes/#use-a-pods-service-account","title":"Use a Pod\u2019s service account","text":"<p>When running from a pod (not your local machine or a CI for instance), the  <code>./.kube/config</code> file does not exist. Instead, the credentials can be found  at /var/run/secrets/kubernetes.io/serviceaccount/token.</p> <p>To let the extension know about this, simply set <code>CHAOSTOOLKIT_IN_POD</code> from the  environment variable of the pod specification:</p> <pre><code>env:\n- name: CHAOSTOOLKIT_IN_POD\nvalue: \"true\"\n</code></pre>"},{"location":"drivers/kubernetes/#pass-all-credentials-in-the-experiment","title":"Pass all credentials in the experiment","text":"<p>Finally, you may pass explicitely all required credentials information to the experiment as follows:</p>"},{"location":"drivers/kubernetes/#using-an-api-key","title":"Using an API key","text":"<pre><code>{\n\"secrets\": {\n\"kubernetes\": {\n\"KUBERNETES_HOST\": \"http://somehost\",\n\"KUBERNETES_API_KEY\": {\n\"type\": \"env\",\n\"key\": \"SOME_ENV_VAR\"\n}\n}\n}\n}\n</code></pre>"},{"location":"drivers/kubernetes/#using-a-usernamepassword","title":"Using a username/password","text":"<pre><code>{\n\"secrets\": {\n\"kubernetes\": {\n\"KUBERNETES_HOST\": \"http://somehost\",\n\"KUBERNETES_USERNAME\": {\n\"type\": \"env\",\n\"key\": \"SOME_ENV_VAR\"\n},\n\"KUBERNETES_PASSWORD\": {\n\"type\": \"env\",\n\"key\": \"SOME_ENV_VAR\"\n}\n}\n}\n}\n</code></pre>"},{"location":"drivers/kubernetes/#using-a-tls-keycertificate","title":"Using a TLS key/certificate","text":"<pre><code>{\n\"secrets\": {\n\"kubernetes\": {\n\"KUBERNETES_HOST\": \"http://somehost\",\n\"KUBERNETES_CERT_FILE\": {\n\"type\": \"env\",\n\"key\": \"SOME_ENV_VAR\"\n},\n\"KUBERNETES_KEY_FILE\": {\n\"type\": \"env\",\n\"key\": \"SOME_ENV_VAR\"\n}\n}\n}\n}\n</code></pre>"},{"location":"drivers/kubernetes/#managed-kubernetes-clusters-authentication","title":"Managed Kubernetes Clusters Authentication","text":"<p>On some managed Kubernetes clusters, you also need to authenticate against the platform itself because the Kubernetes authentication is delegated to it.</p>"},{"location":"drivers/kubernetes/#google-cloud-platform","title":"Google Cloud Platform","text":"<p>In addition to your Kubernetes credentials (via the <code>~/.kube/config</code> file), you need to authenticate against the Google Cloud Platform itself. Usually this is done via:</p> <pre><code>$ gcloud auth login\n</code></pre> <p>But can also be achieved by defining the <code>GOOGLE_APPLICATION_CREDENTIALS</code> environment variable.</p>"},{"location":"drivers/kubernetes/#contribute","title":"Contribute","text":"<p>If you wish to contribute more functions to this package, you are more than welcome to do so. Please, fork this project, write unit tests to cover the proposed changes, implement the changes, ensure they meet the formatting standards set out by <code>black</code>, <code>flake8</code>, and <code>isort</code>, and then raise a PR to the repository for review.</p> <p>Please refer to the formatting section for more information on the formatting standards.</p> <p>The Chaos Toolkit projects require all contributors must sign a Developer Certificate of Origin on each commit they would like to merge into the master branch of the repository. Please, make sure you can abide by the rules of the DCO before submitting a PR.</p>"},{"location":"drivers/kubernetes/#develop","title":"Develop","text":"<p>If you wish to develop on this project, make sure to install the development dependencies. But first, create a virtual environment and then install those dependencies.</p> <pre><code>$ make install-dev\n</code></pre> <p>Now, you can edit the files and they will be automatically be seen by your environment, even when running from the <code>chaos</code> command locally.</p>"},{"location":"drivers/kubernetes/#tests","title":"Tests","text":"<p>To run the tests for the project execute the following:</p> <pre><code>$ make tests\n</code></pre>"},{"location":"drivers/kubernetes/#formatting-and-linting","title":"Formatting and Linting","text":"<p>We use a combination of <code>black</code>, <code>flake8</code>, and <code>isort</code> to both lint and format this repositories code.</p> <p>Before raising a Pull Request, we recommend you run formatting against your code with:</p> <pre><code>$ make format\n</code></pre> <p>This will automatically format any code that doesn\u2019t adhere to the formatting standards.</p> <p>As some things are not picked up by the formatting, we also recommend you run:</p> <pre><code>$ make lint\n</code></pre> <p>To ensure that any unused import statements/strings that are too long, etc. are also picked up.</p>"},{"location":"drivers/kubernetes/#exported-activities","title":"Exported Activities","text":""},{"location":"drivers/kubernetes/#actions","title":"actions","text":""},{"location":"drivers/kubernetes/#kill_microservice","title":"<code>kill_microservice</code>","text":"Type action Module chaosk8s.actions Name kill_microservice Return None <p>!!!DEPRECATED!!!</p> <p>Signature:</p> <pre><code>def kill_microservice(name: str,\n                      ns: str = 'default',\n                      label_selector: str = 'name in ({name})',\n                      secrets: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required name string Yes ns string \u201cdefault\u201d No label_selector string \u201cname in ({name})\u201d No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"kill-microservice\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosk8s.actions\",\n\"func\": \"kill_microservice\",\n\"arguments\": {\n\"name\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: kill-microservice\nprovider:\narguments:\nname: ''\nfunc: kill_microservice\nmodule: chaosk8s.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/kubernetes/#remove_service_endpoint","title":"<code>remove_service_endpoint</code>","text":"Type action Module chaosk8s.actions Name remove_service_endpoint Return None <p>!!!DEPRECATED!!!</p> <p>Signature:</p> <pre><code>def remove_service_endpoint(name: str,\n                            ns: str = 'default',\n                            secrets: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required name string Yes ns string \u201cdefault\u201d No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"remove-service-endpoint\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosk8s.actions\",\n\"func\": \"remove_service_endpoint\",\n\"arguments\": {\n\"name\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: remove-service-endpoint\nprovider:\narguments:\nname: ''\nfunc: remove_service_endpoint\nmodule: chaosk8s.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/kubernetes/#scale_microservice","title":"<code>scale_microservice</code>","text":"Type action Module chaosk8s.actions Name scale_microservice Return None <p>!!!DEPRECATED!!!</p> <p>Signature:</p> <pre><code>def scale_microservice(name: str,\n                       replicas: int,\n                       ns: str = 'default',\n                       secrets: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required name string Yes replicas integer Yes ns string \u201cdefault\u201d No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"scale-microservice\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosk8s.actions\",\n\"func\": \"scale_microservice\",\n\"arguments\": {\n\"name\": \"\",\n\"replicas\": 0\n}\n}\n}\n</code></pre> <pre><code>name: scale-microservice\nprovider:\narguments:\nname: ''\nreplicas: 0\nfunc: scale_microservice\nmodule: chaosk8s.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/kubernetes/#start_microservice","title":"<code>start_microservice</code>","text":"Type action Module chaosk8s.actions Name start_microservice Return None <p>!!!DEPRECATED!!!</p> <p>Signature:</p> <pre><code>def start_microservice(spec_path: str,\n                       ns: str = 'default',\n                       secrets: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required spec_path string Yes ns string \u201cdefault\u201d No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"start-microservice\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosk8s.actions\",\n\"func\": \"start_microservice\",\n\"arguments\": {\n\"spec_path\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: start-microservice\nprovider:\narguments:\nspec_path: ''\nfunc: start_microservice\nmodule: chaosk8s.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/kubernetes/#crd","title":"crd","text":""},{"location":"drivers/kubernetes/#create_cluster_custom_object","title":"<code>create_cluster_custom_object</code>","text":"Type action Module chaosk8s.crd.actions Name create_cluster_custom_object Return mapping <p>Delete a custom object in the given namespace.</p> <p>Read more about custom resources here: https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/</p> <p>Signature:</p> <pre><code>def create_cluster_custom_object(\n        group: str,\n        version: str,\n        plural: str,\n        resource: Dict[str, Any] = None,\n        resource_as_yaml_file: str = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required group string Yes version string Yes plural string Yes resource mapping null No resource_as_yaml_file string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"create-cluster-custom-object\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosk8s.crd.actions\",\n\"func\": \"create_cluster_custom_object\",\n\"arguments\": {\n\"group\": \"\",\n\"version\": \"\",\n\"plural\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: create-cluster-custom-object\nprovider:\narguments:\ngroup: ''\nplural: ''\nversion: ''\nfunc: create_cluster_custom_object\nmodule: chaosk8s.crd.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/kubernetes/#create_custom_object","title":"<code>create_custom_object</code>","text":"Type action Module chaosk8s.crd.actions Name create_custom_object Return mapping <p>Create a custom object in the given namespace. Its custom resource definition must already exists or this will fail with a 404.</p> <p>Read more about custom resources here: https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/</p> <p>Signature:</p> <pre><code>def create_custom_object(\n        group: str,\n        version: str,\n        plural: str,\n        ns: str = 'default',\n        resource: Dict[str, Any] = None,\n        resource_as_yaml_file: str = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required group string Yes version string Yes plural string Yes ns string \u201cdefault\u201d No resource mapping null No resource_as_yaml_file string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"create-custom-object\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosk8s.crd.actions\",\n\"func\": \"create_custom_object\",\n\"arguments\": {\n\"group\": \"\",\n\"version\": \"\",\n\"plural\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: create-custom-object\nprovider:\narguments:\ngroup: ''\nplural: ''\nversion: ''\nfunc: create_custom_object\nmodule: chaosk8s.crd.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/kubernetes/#delete_cluster_custom_object","title":"<code>delete_cluster_custom_object</code>","text":"Type action Module chaosk8s.crd.actions Name delete_cluster_custom_object Return mapping <p>Delete a custom object cluster wide.</p> <p>Read more about custom resources here: https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/</p> <p>Signature:</p> <pre><code>def delete_cluster_custom_object(\n        group: str,\n        version: str,\n        plural: str,\n        name: str,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required group string Yes version string Yes plural string Yes name string Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"delete-cluster-custom-object\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosk8s.crd.actions\",\n\"func\": \"delete_cluster_custom_object\",\n\"arguments\": {\n\"group\": \"\",\n\"version\": \"\",\n\"plural\": \"\",\n\"name\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: delete-cluster-custom-object\nprovider:\narguments:\ngroup: ''\nname: ''\nplural: ''\nversion: ''\nfunc: delete_cluster_custom_object\nmodule: chaosk8s.crd.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/kubernetes/#delete_custom_object","title":"<code>delete_custom_object</code>","text":"Type action Module chaosk8s.crd.actions Name delete_custom_object Return mapping <p>Create a custom object cluster wide. Its custom resource definition must already exists or this will fail with a 404.</p> <p>Read more about custom resources here: https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/</p> <p>Signature:</p> <pre><code>def delete_custom_object(\n        group: str,\n        version: str,\n        plural: str,\n        name: str,\n        ns: str = 'default',\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required group string Yes version string Yes plural string Yes name string Yes ns string \u201cdefault\u201d No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"delete-custom-object\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosk8s.crd.actions\",\n\"func\": \"delete_custom_object\",\n\"arguments\": {\n\"group\": \"\",\n\"version\": \"\",\n\"plural\": \"\",\n\"name\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: delete-custom-object\nprovider:\narguments:\ngroup: ''\nname: ''\nplural: ''\nversion: ''\nfunc: delete_custom_object\nmodule: chaosk8s.crd.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/kubernetes/#get_cluster_custom_object","title":"<code>get_cluster_custom_object</code>","text":"Type probe Module chaosk8s.crd.probes Name get_cluster_custom_object Return mapping <p>Get a custom object cluster-wide.</p> <p>Read more about custom resources here: https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/</p> <p>Signature:</p> <pre><code>def get_cluster_custom_object(\n        group: str,\n        version: str,\n        plural: str,\n        name: str,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required group string Yes version string Yes plural string Yes name string Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"get-cluster-custom-object\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosk8s.crd.probes\",\n\"func\": \"get_cluster_custom_object\",\n\"arguments\": {\n\"group\": \"\",\n\"version\": \"\",\n\"plural\": \"\",\n\"name\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: get-cluster-custom-object\nprovider:\narguments:\ngroup: ''\nname: ''\nplural: ''\nversion: ''\nfunc: get_cluster_custom_object\nmodule: chaosk8s.crd.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/kubernetes/#get_custom_object","title":"<code>get_custom_object</code>","text":"Type probe Module chaosk8s.crd.probes Name get_custom_object Return mapping <p>Get a custom object in the given namespace.</p> <p>Read more about custom resources here: https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/</p> <p>Signature:</p> <pre><code>def get_custom_object(\n        group: str,\n        version: str,\n        plural: str,\n        name: str,\n        ns: str = 'default',\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required group string Yes version string Yes plural string Yes name string Yes ns string \u201cdefault\u201d No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"get-custom-object\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosk8s.crd.probes\",\n\"func\": \"get_custom_object\",\n\"arguments\": {\n\"group\": \"\",\n\"version\": \"\",\n\"plural\": \"\",\n\"name\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: get-custom-object\nprovider:\narguments:\ngroup: ''\nname: ''\nplural: ''\nversion: ''\nfunc: get_custom_object\nmodule: chaosk8s.crd.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/kubernetes/#list_cluster_custom_objects","title":"<code>list_cluster_custom_objects</code>","text":"Type probe Module chaosk8s.crd.probes Name list_cluster_custom_objects Return list <p>List custom objects cluster-wide.</p> <p>Read more about custom resources here: https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/</p> <p>Signature:</p> <pre><code>def list_cluster_custom_objects(\n        group: str,\n        version: str,\n        plural: str,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; List[Dict[str, Any]]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required group string Yes version string Yes plural string Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"list-cluster-custom-objects\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosk8s.crd.probes\",\n\"func\": \"list_cluster_custom_objects\",\n\"arguments\": {\n\"group\": \"\",\n\"version\": \"\",\n\"plural\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: list-cluster-custom-objects\nprovider:\narguments:\ngroup: ''\nplural: ''\nversion: ''\nfunc: list_cluster_custom_objects\nmodule: chaosk8s.crd.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/kubernetes/#list_custom_objects","title":"<code>list_custom_objects</code>","text":"Type probe Module chaosk8s.crd.probes Name list_custom_objects Return list <p>List custom objects in the given namespace.</p> <p>Read more about custom resources here: https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/</p> <p>Signature:</p> <pre><code>def list_custom_objects(\n        group: str,\n        version: str,\n        plural: str,\n        ns: str = 'default',\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; List[Dict[str, Any]]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required group string Yes version string Yes plural string Yes ns string \u201cdefault\u201d No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"list-custom-objects\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosk8s.crd.probes\",\n\"func\": \"list_custom_objects\",\n\"arguments\": {\n\"group\": \"\",\n\"version\": \"\",\n\"plural\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: list-custom-objects\nprovider:\narguments:\ngroup: ''\nplural: ''\nversion: ''\nfunc: list_custom_objects\nmodule: chaosk8s.crd.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/kubernetes/#patch_cluster_custom_object","title":"<code>patch_cluster_custom_object</code>","text":"Type action Module chaosk8s.crd.actions Name patch_cluster_custom_object Return mapping <p>Patch a custom object cluster-wide. The resource must be the updated version to apply. Force will re-acquire conflicting fields owned by others.</p> <p>Read more about custom resources here: https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/</p> <p>Signature:</p> <pre><code>def patch_cluster_custom_object(\n        group: str,\n        version: str,\n        plural: str,\n        name: str,\n        force: bool = False,\n        resource: Dict[str, Any] = None,\n        resource_as_yaml_file: str = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required group string Yes version string Yes plural string Yes name string Yes force boolean false No resource mapping null No resource_as_yaml_file string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"patch-cluster-custom-object\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosk8s.crd.actions\",\n\"func\": \"patch_cluster_custom_object\",\n\"arguments\": {\n\"group\": \"\",\n\"version\": \"\",\n\"plural\": \"\",\n\"name\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: patch-cluster-custom-object\nprovider:\narguments:\ngroup: ''\nname: ''\nplural: ''\nversion: ''\nfunc: patch_cluster_custom_object\nmodule: chaosk8s.crd.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/kubernetes/#patch_custom_object","title":"<code>patch_custom_object</code>","text":"Type action Module chaosk8s.crd.actions Name patch_custom_object Return mapping <p>Patch a custom object in the given namespace. The resource must be the updated version to apply. Force will re-acquire conflicting fields owned by others.</p> <p>Read more about custom resources here: https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/</p> <p>Signature:</p> <pre><code>def patch_custom_object(\n        group: str,\n        version: str,\n        plural: str,\n        name: str,\n        ns: str = 'default',\n        force: bool = False,\n        resource: Dict[str, Any] = None,\n        resource_as_yaml_file: str = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required group string Yes version string Yes plural string Yes name string Yes ns string \u201cdefault\u201d No force boolean false No resource mapping null No resource_as_yaml_file string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"patch-custom-object\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosk8s.crd.actions\",\n\"func\": \"patch_custom_object\",\n\"arguments\": {\n\"group\": \"\",\n\"version\": \"\",\n\"plural\": \"\",\n\"name\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: patch-custom-object\nprovider:\narguments:\ngroup: ''\nname: ''\nplural: ''\nversion: ''\nfunc: patch_custom_object\nmodule: chaosk8s.crd.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/kubernetes/#replace_cluster_custom_object","title":"<code>replace_cluster_custom_object</code>","text":"Type action Module chaosk8s.crd.actions Name replace_cluster_custom_object Return mapping <p>Replace a custom object in the given namespace. The resource must be the new version to apply.</p> <p>Read more about custom resources here: https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/</p> <p>Signature:</p> <pre><code>def replace_cluster_custom_object(\n        group: str,\n        version: str,\n        plural: str,\n        name: str,\n        force: bool = False,\n        resource: Dict[str, Any] = None,\n        resource_as_yaml_file: str = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required group string Yes version string Yes plural string Yes name string Yes force boolean false No resource mapping null No resource_as_yaml_file string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"replace-cluster-custom-object\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosk8s.crd.actions\",\n\"func\": \"replace_cluster_custom_object\",\n\"arguments\": {\n\"group\": \"\",\n\"version\": \"\",\n\"plural\": \"\",\n\"name\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: replace-cluster-custom-object\nprovider:\narguments:\ngroup: ''\nname: ''\nplural: ''\nversion: ''\nfunc: replace_cluster_custom_object\nmodule: chaosk8s.crd.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/kubernetes/#replace_custom_object","title":"<code>replace_custom_object</code>","text":"Type action Module chaosk8s.crd.actions Name replace_custom_object Return mapping <p>Replace a custom object in the given namespace. The resource must be the new version to apply.</p> <p>Read more about custom resources here: https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/</p> <p>Signature:</p> <pre><code>def replace_custom_object(\n        group: str,\n        version: str,\n        plural: str,\n        name: str,\n        ns: str = 'default',\n        force: bool = False,\n        resource: Dict[str, Any] = None,\n        resource_as_yaml_file: str = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required group string Yes version string Yes plural string Yes name string Yes ns string \u201cdefault\u201d No force boolean false No resource mapping null No resource_as_yaml_file string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"replace-custom-object\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosk8s.crd.actions\",\n\"func\": \"replace_custom_object\",\n\"arguments\": {\n\"group\": \"\",\n\"version\": \"\",\n\"plural\": \"\",\n\"name\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: replace-custom-object\nprovider:\narguments:\ngroup: ''\nname: ''\nplural: ''\nversion: ''\nfunc: replace_custom_object\nmodule: chaosk8s.crd.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/kubernetes/#deployment","title":"deployment","text":""},{"location":"drivers/kubernetes/#create_deployment","title":"<code>create_deployment</code>","text":"Type action Module chaosk8s.deployment.actions Name create_deployment Return None <p>Create a deployment described by the deployment config, which must be the path to the JSON or YAML representation of the deployment.</p> <p>Signature:</p> <pre><code>def create_deployment(spec_path: str,\n                      ns: str = 'default',\n                      secrets: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required spec_path string Yes ns string \u201cdefault\u201d No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"create-deployment\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosk8s.deployment.actions\",\n\"func\": \"create_deployment\",\n\"arguments\": {\n\"spec_path\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: create-deployment\nprovider:\narguments:\nspec_path: ''\nfunc: create_deployment\nmodule: chaosk8s.deployment.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/kubernetes/#delete_deployment","title":"<code>delete_deployment</code>","text":"Type action Module chaosk8s.deployment.actions Name delete_deployment Return None <p>Delete a deployment by <code>name</code> or <code>label_selector</code> in the namespace <code>ns</code>.</p> <p>The deployment is deleted without a graceful period to trigger an abrupt termination.</p> <p>If neither <code>name</code> nor <code>label_selector</code> is specified, all the deployments will be deleted in the namespace.</p> <p>Signature:</p> <pre><code>def delete_deployment(name: str = None,\n                      ns: str = 'default',\n                      label_selector: str = None,\n                      secrets: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required name string null No ns string \u201cdefault\u201d No label_selector string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"delete-deployment\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosk8s.deployment.actions\",\n\"func\": \"delete_deployment\"\n}\n}\n</code></pre> <pre><code>name: delete-deployment\nprovider:\nfunc: delete_deployment\nmodule: chaosk8s.deployment.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/kubernetes/#deployment_available_and_healthy","title":"<code>deployment_available_and_healthy</code>","text":"Type probe Module chaosk8s.deployment.probes Name deployment_available_and_healthy Return Optional[bool] <p>Lookup a deployment by <code>name</code> in the namespace <code>ns</code>.</p> <p>The selected resources are matched by the given <code>label_selector</code>.</p> <p>Raises :exc:<code>chaoslib.exceptions.ActivityFailed</code> when the state is not as expected.</p> <p>Signature:</p> <pre><code>def deployment_available_and_healthy(\n        name: str,\n        ns: str = 'default',\n        label_selector: str = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Optional[bool]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required name string Yes ns string \u201cdefault\u201d No label_selector string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"deployment-available-and-healthy\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosk8s.deployment.probes\",\n\"func\": \"deployment_available_and_healthy\",\n\"arguments\": {\n\"name\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: deployment-available-and-healthy\nprovider:\narguments:\nname: ''\nfunc: deployment_available_and_healthy\nmodule: chaosk8s.deployment.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/kubernetes/#deployment_fully_available","title":"<code>deployment_fully_available</code>","text":"Type probe Module chaosk8s.deployment.probes Name deployment_fully_available Return Optional[bool] <p>Wait until all the deployment expected replicas are available. Once this state is reached, return <code>True</code>. If the state is not reached after <code>timeout</code> seconds, a :exc:<code>chaoslib.exceptions.ActivityFailed</code> exception is raised.</p> <p>Signature:</p> <pre><code>def deployment_fully_available(\n        name: str,\n        ns: str = 'default',\n        label_selector: str = None,\n        timeout: int = 30,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Optional[bool]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required name string Yes ns string \u201cdefault\u201d No label_selector string null No timeout integer 30 No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"deployment-fully-available\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosk8s.deployment.probes\",\n\"func\": \"deployment_fully_available\",\n\"arguments\": {\n\"name\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: deployment-fully-available\nprovider:\narguments:\nname: ''\nfunc: deployment_fully_available\nmodule: chaosk8s.deployment.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/kubernetes/#deployment_not_fully_available","title":"<code>deployment_not_fully_available</code>","text":"Type probe Module chaosk8s.deployment.probes Name deployment_not_fully_available Return Optional[bool] <p>Wait until the deployment gets into an intermediate state where not all expected replicas are available. Once this state is reached, return <code>True</code>. If the state is not reached after <code>timeout</code> seconds, a :exc:<code>chaoslib.exceptions.ActivityFailed</code> exception is raised.</p> <p>Signature:</p> <pre><code>def deployment_not_fully_available(\n        name: str,\n        ns: str = 'default',\n        label_selector: str = None,\n        timeout: int = 30,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Optional[bool]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required name string Yes ns string \u201cdefault\u201d No label_selector string null No timeout integer 30 No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"deployment-not-fully-available\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosk8s.deployment.probes\",\n\"func\": \"deployment_not_fully_available\",\n\"arguments\": {\n\"name\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: deployment-not-fully-available\nprovider:\narguments:\nname: ''\nfunc: deployment_not_fully_available\nmodule: chaosk8s.deployment.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/kubernetes/#deployment_partially_available","title":"<code>deployment_partially_available</code>","text":"Type probe Module chaosk8s.deployment.probes Name deployment_partially_available Return Optional[bool] <p>Check whether if the given deployment state is ready or at-least partially ready. Raises :exc:<code>chaoslib.exceptions.ActivityFailed</code> when the state is not as expected.</p> <p>Signature:</p> <pre><code>def deployment_partially_available(\n        name: str,\n        ns: str = 'default',\n        label_selector: str = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Optional[bool]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required name string Yes ns string \u201cdefault\u201d No label_selector string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"deployment-partially-available\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosk8s.deployment.probes\",\n\"func\": \"deployment_partially_available\",\n\"arguments\": {\n\"name\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: deployment-partially-available\nprovider:\narguments:\nname: ''\nfunc: deployment_partially_available\nmodule: chaosk8s.deployment.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/kubernetes/#scale_deployment","title":"<code>scale_deployment</code>","text":"Type action Module chaosk8s.deployment.actions Name scale_deployment Return None <p>Scale a deployment up or down. The <code>name</code> is the name of the deployment.</p> <p>Signature:</p> <pre><code>def scale_deployment(name: str,\n                     replicas: int,\n                     ns: str = 'default',\n                     secrets: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required name string Yes replicas integer Yes ns string \u201cdefault\u201d No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"scale-deployment\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosk8s.deployment.actions\",\n\"func\": \"scale_deployment\",\n\"arguments\": {\n\"name\": \"\",\n\"replicas\": 0\n}\n}\n}\n</code></pre> <pre><code>name: scale-deployment\nprovider:\narguments:\nname: ''\nreplicas: 0\nfunc: scale_deployment\nmodule: chaosk8s.deployment.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/kubernetes/#networking","title":"networking","text":""},{"location":"drivers/kubernetes/#allow_dns_access","title":"<code>allow_dns_access</code>","text":"Type action Module chaosk8s.networking.actions Name allow_dns_access Return None <p>Convenient helper rule to DNS access from all pods in a namespace, unless `label_selectors, in which case, only matching pods will be impacted.</p> <p>Signature:</p> <pre><code>def allow_dns_access(label_selectors: Dict[str, Any] = None,\n                     ns: str = 'default',\n                     secrets: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required label_selectors mapping null No ns string \u201cdefault\u201d No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"allow-dns-access\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosk8s.networking.actions\",\n\"func\": \"allow_dns_access\"\n}\n}\n</code></pre> <pre><code>name: allow-dns-access\nprovider:\nfunc: allow_dns_access\nmodule: chaosk8s.networking.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/kubernetes/#create_network_policy","title":"<code>create_network_policy</code>","text":"Type action Module chaosk8s.networking.actions Name create_network_policy Return None <p>Create a network policy in the given namespace eitehr from the definition as <code>spec</code> or from a file containing the definition at <code>spec_path</code>.</p> <p>Signature:</p> <pre><code>def create_network_policy(spec: Dict[str, Any] = None,\n                          spec_path: str = None,\n                          ns: str = 'default',\n                          secrets: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required spec mapping null No spec_path string null No ns string \u201cdefault\u201d No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"create-network-policy\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosk8s.networking.actions\",\n\"func\": \"create_network_policy\"\n}\n}\n</code></pre> <pre><code>name: create-network-policy\nprovider:\nfunc: create_network_policy\nmodule: chaosk8s.networking.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/kubernetes/#deny_all_egress","title":"<code>deny_all_egress</code>","text":"Type action Module chaosk8s.networking.actions Name deny_all_egress Return None <p>Convenient helper rule to deny all egress network from all pods in a namespace, unless `label_selectors, in which case, only matching pods will be impacted.</p> <p>Signature:</p> <pre><code>def deny_all_egress(label_selectors: Dict[str, Any] = None,\n                    ns: str = 'default',\n                    secrets: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required label_selectors mapping null No ns string \u201cdefault\u201d No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"deny-all-egress\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosk8s.networking.actions\",\n\"func\": \"deny_all_egress\"\n}\n}\n</code></pre> <pre><code>name: deny-all-egress\nprovider:\nfunc: deny_all_egress\nmodule: chaosk8s.networking.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/kubernetes/#deny_all_ingress","title":"<code>deny_all_ingress</code>","text":"Type action Module chaosk8s.networking.actions Name deny_all_ingress Return None <p>Convenient helper policy to deny ingress network to all pods in a namespace, unless `label_selectors, in which case, only matching pods will be impacted.</p> <p>Signature:</p> <pre><code>def deny_all_ingress(label_selectors: Dict[str, Any] = None,\n                     ns: str = 'default',\n                     secrets: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required label_selectors mapping null No ns string \u201cdefault\u201d No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"deny-all-ingress\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosk8s.networking.actions\",\n\"func\": \"deny_all_ingress\"\n}\n}\n</code></pre> <pre><code>name: deny-all-ingress\nprovider:\nfunc: deny_all_ingress\nmodule: chaosk8s.networking.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/kubernetes/#remove_allow_dns_access","title":"<code>remove_allow_dns_access</code>","text":"Type action Module chaosk8s.networking.actions Name remove_allow_dns_access Return None <p>Remove the rule set by the <code>allow_dns_access</code> action.</p> <p>Signature:</p> <pre><code>def remove_allow_dns_access(ns: str = 'default',\n                            secrets: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required ns string \u201cdefault\u201d No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"remove-allow-dns-access\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosk8s.networking.actions\",\n\"func\": \"remove_allow_dns_access\"\n}\n}\n</code></pre> <pre><code>name: remove-allow-dns-access\nprovider:\nfunc: remove_allow_dns_access\nmodule: chaosk8s.networking.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/kubernetes/#remove_deny_all_egress","title":"<code>remove_deny_all_egress</code>","text":"Type action Module chaosk8s.networking.actions Name remove_deny_all_egress Return None <p>Remove the rule set by the <code>deny_all_egress</code> action.</p> <p>Signature:</p> <pre><code>def remove_deny_all_egress(ns: str = 'default',\n                           secrets: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required ns string \u201cdefault\u201d No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"remove-deny-all-egress\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosk8s.networking.actions\",\n\"func\": \"remove_deny_all_egress\"\n}\n}\n</code></pre> <pre><code>name: remove-deny-all-egress\nprovider:\nfunc: remove_deny_all_egress\nmodule: chaosk8s.networking.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/kubernetes/#remove_deny_all_ingress","title":"<code>remove_deny_all_ingress</code>","text":"Type action Module chaosk8s.networking.actions Name remove_deny_all_ingress Return None <p>Remove the rule set by the <code>deny_all_ingress</code> action.</p> <p>Signature:</p> <pre><code>def remove_deny_all_ingress(ns: str = 'default',\n                            secrets: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required ns string \u201cdefault\u201d No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"remove-deny-all-ingress\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosk8s.networking.actions\",\n\"func\": \"remove_deny_all_ingress\"\n}\n}\n</code></pre> <pre><code>name: remove-deny-all-ingress\nprovider:\nfunc: remove_deny_all_ingress\nmodule: chaosk8s.networking.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/kubernetes/#remove_network_policy","title":"<code>remove_network_policy</code>","text":"Type action Module chaosk8s.networking.actions Name remove_network_policy Return None <p>Create a network policy in the given namespace eitehr from the definition as <code>spec</code> or from a file containing the definition at <code>spec_path</code>.</p> <p>Signature:</p> <pre><code>def remove_network_policy(name: str,\n                          ns: str = 'default',\n                          secrets: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required name string Yes ns string \u201cdefault\u201d No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"remove-network-policy\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosk8s.networking.actions\",\n\"func\": \"remove_network_policy\",\n\"arguments\": {\n\"name\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: remove-network-policy\nprovider:\narguments:\nname: ''\nfunc: remove_network_policy\nmodule: chaosk8s.networking.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/kubernetes/#node","title":"node","text":""},{"location":"drivers/kubernetes/#cordon_node","title":"<code>cordon_node</code>","text":"Type action Module chaosk8s.node.actions Name cordon_node Return None <p>Cordon nodes matching the given label or name, so that no pods are scheduled on them any longer.</p> <p>Signature:</p> <pre><code>def cordon_node(name: str = None,\n                label_selector: str = None,\n                secrets: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required name string null No label_selector string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"cordon-node\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosk8s.node.actions\",\n\"func\": \"cordon_node\"\n}\n}\n</code></pre> <pre><code>name: cordon-node\nprovider:\nfunc: cordon_node\nmodule: chaosk8s.node.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/kubernetes/#create_node","title":"<code>create_node</code>","text":"Type action Module chaosk8s.node.actions Name create_node Return kubernetes.client.models.v1_node.V1Node <p>Create one new node in the cluster.</p> <p>Due to the way things work on certain cloud providers, you won\u2019t be able to use this meaningfully on them. For instance on GCE, this will likely fail.</p> <p>See also: https://github.com/kubernetes/community/blob/master/contributors/devel/api-conventions.md#idempotency</p> <p>Signature:</p> <pre><code>def create_node(\n    meta: Dict[str, Any] = None,\n    spec: Dict[str, Any] = None,\n    secrets: Dict[str, Dict[str, str]] = None\n) -&gt; kubernetes.client.models.v1_node.V1Node:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required meta mapping null No spec mapping null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"create-node\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosk8s.node.actions\",\n\"func\": \"create_node\"\n}\n}\n</code></pre> <pre><code>name: create-node\nprovider:\nfunc: create_node\nmodule: chaosk8s.node.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/kubernetes/#delete_nodes","title":"<code>delete_nodes</code>","text":"Type action Module chaosk8s.node.actions Name delete_nodes Return None <p>Delete nodes gracefully. Select the appropriate nodes by label.</p> <p>Nodes are not drained beforehand so we can see how cluster behaves. Nodes cannot be restarted, they are really deleted. Please be careful when using this action.</p> <p>On certain cloud providers, you also need to delete the underneath VM instance as well afterwards. This is the case on GCE for instance.</p> <p>If <code>all</code> is set to <code>True</code>, all nodes will be terminated. If <code>rand</code> is set to <code>True</code>, one random node will be terminated. If \u0300<code>count</code> is set to a positive number, only a upto <code>count</code> nodes (randomly picked) will be terminated. Otherwise, the first retrieved node will be terminated.</p> <p>Signature:</p> <pre><code>def delete_nodes(label_selector: str = None,\n                 all: bool = False,\n                 rand: bool = False,\n                 count: int = None,\n                 grace_period_seconds: int = None,\n                 secrets: Dict[str, Dict[str, str]] = None,\n                 pod_label_selector: str = None,\n                 pod_namespace: str = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required label_selector string null No all boolean false No rand boolean false No count integer null No grace_period_seconds integer null No pod_label_selector string null No pod_namespace string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"delete-nodes\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosk8s.node.actions\",\n\"func\": \"delete_nodes\"\n}\n}\n</code></pre> <pre><code>name: delete-nodes\nprovider:\nfunc: delete_nodes\nmodule: chaosk8s.node.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/kubernetes/#drain_nodes","title":"<code>drain_nodes</code>","text":"Type action Module chaosk8s.node.actions Name drain_nodes Return boolean <p>Drain nodes matching the given label or name, so that no pods are scheduled on them any longer and running pods are evicted.</p> <p>It does a similar job to <code>kubectl drain --ignore-daemonsets</code> or <code>kubectl drain --delete-local-data --ignore-daemonsets</code> if <code>delete_pods_with_local_storage</code> is set to <code>True</code>. There is no equivalent to the <code>kubectl drain --force</code> flag.</p> <p>You probably want to call <code>uncordon</code> from in your experiment\u2019s rollbacks.</p> <p>Signature:</p> <pre><code>def drain_nodes(name: str = None,\n                label_selector: str = None,\n                delete_pods_with_local_storage: bool = False,\n                timeout: int = 120,\n                secrets: Dict[str, Dict[str, str]] = None,\n                count: int = None,\n                pod_label_selector: str = None,\n                pod_namespace: str = None) -&gt; bool:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required name string null No label_selector string null No delete_pods_with_local_storage boolean false No timeout integer 120 No count integer null No pod_label_selector string null No pod_namespace string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"drain-nodes\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosk8s.node.actions\",\n\"func\": \"drain_nodes\"\n}\n}\n</code></pre> <pre><code>name: drain-nodes\nprovider:\nfunc: drain_nodes\nmodule: chaosk8s.node.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/kubernetes/#get_nodes","title":"<code>get_nodes</code>","text":"Type probe Module chaosk8s.node.probes Name get_nodes Return None <p>List all Kubernetes worker nodes in your cluster. You may filter nodes by specifying a label selector.</p> <p>Signature:</p> <pre><code>def get_nodes(label_selector: str = None,\n              configuration: Dict[str, Dict[str, str]] = None,\n              secrets: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required label_selector string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"get-nodes\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosk8s.node.probes\",\n\"func\": \"get_nodes\"\n}\n}\n</code></pre> <pre><code>name: get-nodes\nprovider:\nfunc: get_nodes\nmodule: chaosk8s.node.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/kubernetes/#uncordon_node","title":"<code>uncordon_node</code>","text":"Type action Module chaosk8s.node.actions Name uncordon_node Return None <p>Uncordon nodes matching the given label name, so that pods can be scheduled on them again.</p> <p>Signature:</p> <pre><code>def uncordon_node(name: str = None,\n                  label_selector: str = None,\n                  secrets: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required name string null No label_selector string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"uncordon-node\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosk8s.node.actions\",\n\"func\": \"uncordon_node\"\n}\n}\n</code></pre> <pre><code>name: uncordon-node\nprovider:\nfunc: uncordon_node\nmodule: chaosk8s.node.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/kubernetes/#pod","title":"pod","text":""},{"location":"drivers/kubernetes/#count_min_pods","title":"<code>count_min_pods</code>","text":"Type probe Module chaosk8s.pod.probes Name count_min_pods Return boolean <p>Check if minimum number of pods are running.</p> <p>Signature:</p> <pre><code>def count_min_pods(label_selector: str,\n                   phase: str = 'Running',\n                   min_count: int = 2,\n                   ns: str = 'default',\n                   secrets: Dict[str, Dict[str, str]] = None) -&gt; bool:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required label_selector string Yes phase string \u201cRunning\u201d No min_count integer 2 No ns string \u201cdefault\u201d No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"count-min-pods\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosk8s.pod.probes\",\n\"func\": \"count_min_pods\",\n\"arguments\": {\n\"label_selector\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: count-min-pods\nprovider:\narguments:\nlabel_selector: ''\nfunc: count_min_pods\nmodule: chaosk8s.pod.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/kubernetes/#count_pods","title":"<code>count_pods</code>","text":"Type probe Module chaosk8s.pod.probes Name count_pods Return integer <p>Count the number of pods matching the given selector in a given <code>phase</code>, if one is given.</p> <p>Signature:</p> <pre><code>def count_pods(label_selector: str,\n               phase: str = None,\n               ns: str = 'default',\n               secrets: Dict[str, Dict[str, str]] = None) -&gt; int:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required label_selector string Yes phase string null No ns string \u201cdefault\u201d No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"count-pods\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosk8s.pod.probes\",\n\"func\": \"count_pods\",\n\"arguments\": {\n\"label_selector\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: count-pods\nprovider:\narguments:\nlabel_selector: ''\nfunc: count_pods\nmodule: chaosk8s.pod.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/kubernetes/#exec_in_pods","title":"<code>exec_in_pods</code>","text":"Type action Module chaosk8s.pod.actions Name exec_in_pods Return list <p>Execute the command <code>cmd</code> in the specified pod\u2019s container. Select the appropriate pods by label and/or name patterns. Whenever a pattern is provided for the name, all pods retrieved will be filtered out if their name do not match the given pattern.</p> <p>If neither <code>label_selector</code> nor <code>name_pattern</code> are provided, all pods in the namespace will be selected for termination.</p> <p>If <code>all</code> is set to <code>True</code>, all matching pods will be affected.</p> <p>Value of <code>qty</code> varies based on <code>mode</code>. If <code>mode</code> is set to <code>fixed</code>, then <code>qty</code> refers to number of pods affected. If <code>mode</code> is set to <code>percentage</code>, then <code>qty</code> refers to percentage of pods, from 1 to 100, to be affected. Default <code>mode</code> is <code>fixed</code> and default <code>qty</code> is <code>1</code>.</p> <p>If <code>order</code> is set to <code>oldest</code>, the retrieved pods will be ordered by the pods creation_timestamp, with the oldest pod first in list.</p> <p>If <code>rand</code> is set to <code>True</code>, n random pods will be affected Otherwise, the first retrieved n pods will be used</p> <p>The <code>cmd</code> should be a string or a sequence of program arguments. Providing a sequence of arguments is generally preferred, as it allows the action to take care of any required escaping and quoting (e.g. to permit spaces in the arguments). If passing a single string it will be split automatically.</p> <p>Signature:</p> <pre><code>def exec_in_pods(\n        cmd: Union[str, List[str]],\n        label_selector: str = None,\n        name_pattern: str = None,\n        all: bool = False,\n        rand: bool = False,\n        mode: str = 'fixed',\n        qty: int = 1,\n        ns: str = 'default',\n        order: str = 'alphabetic',\n        container_name: str = None,\n        request_timeout: int = 60,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; List[Dict[str, Any]]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required cmd object Yes label_selector string null No name_pattern string null No all boolean false No rand boolean false No mode string \u201cfixed\u201d No qty integer 1 No ns string \u201cdefault\u201d No order string \u201calphabetic\u201d No container_name string null No request_timeout integer 60 No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"exec-in-pods\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosk8s.pod.actions\",\n\"func\": \"exec_in_pods\",\n\"arguments\": {\n\"cmd\": null\n}\n}\n}\n</code></pre> <pre><code>name: exec-in-pods\nprovider:\narguments:\ncmd: null\nfunc: exec_in_pods\nmodule: chaosk8s.pod.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/kubernetes/#pod_is_not_available","title":"<code>pod_is_not_available</code>","text":"Type probe Module chaosk8s.pod.probes Name pod_is_not_available Return boolean <p>Lookup pods with a <code>name</code> label set to the given <code>name</code> in the specified <code>ns</code>.</p> <p>Raises :exc:<code>chaoslib.exceptions.ActivityFailed</code> when one of the pods with the specified <code>name</code> is in the <code>\"Running\"</code> phase.</p> <p>Signature:</p> <pre><code>def pod_is_not_available(name: str,\n                         ns: str = 'default',\n                         label_selector: str = 'name in ({name})',\n                         secrets: Dict[str, Dict[str, str]] = None) -&gt; bool:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required name string Yes ns string \u201cdefault\u201d No label_selector string \u201cname in ({name})\u201d No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"pod-is-not-available\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosk8s.pod.probes\",\n\"func\": \"pod_is_not_available\",\n\"arguments\": {\n\"name\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: pod-is-not-available\nprovider:\narguments:\nname: ''\nfunc: pod_is_not_available\nmodule: chaosk8s.pod.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/kubernetes/#pods_in_conditions","title":"<code>pods_in_conditions</code>","text":"Type probe Module chaosk8s.pod.probes Name pods_in_conditions Return boolean <p>Lookup a pod by <code>label_selector</code> in the namespace <code>ns</code>.</p> <p>Raises :exc:<code>chaoslib.exceptions.ActivityFailed</code> if one of the given conditions type/status is not as expected</p> <p>Signature:</p> <pre><code>def pods_in_conditions(label_selector: str,\n                       conditions: List[Dict[str, str]],\n                       ns: str = 'default',\n                       secrets: Dict[str, Dict[str, str]] = None) -&gt; bool:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required label_selector string Yes conditions list Yes ns string \u201cdefault\u201d No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"pods-in-conditions\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosk8s.pod.probes\",\n\"func\": \"pods_in_conditions\",\n\"arguments\": {\n\"label_selector\": \"\",\n\"conditions\": []\n}\n}\n}\n</code></pre> <pre><code>name: pods-in-conditions\nprovider:\narguments:\nconditions: []\nlabel_selector: ''\nfunc: pods_in_conditions\nmodule: chaosk8s.pod.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/kubernetes/#pods_in_phase","title":"<code>pods_in_phase</code>","text":"Type probe Module chaosk8s.pod.probes Name pods_in_phase Return boolean <p>Lookup a pod by <code>label_selector</code> in the namespace <code>ns</code>.</p> <p>Raises :exc:<code>chaoslib.exceptions.ActivityFailed</code> when the state is not as expected.</p> <p>Signature:</p> <pre><code>def pods_in_phase(label_selector: str,\n                  phase: str = 'Running',\n                  ns: str = 'default',\n                  secrets: Dict[str, Dict[str, str]] = None) -&gt; bool:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required label_selector string Yes phase string \u201cRunning\u201d No ns string \u201cdefault\u201d No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"pods-in-phase\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosk8s.pod.probes\",\n\"func\": \"pods_in_phase\",\n\"arguments\": {\n\"label_selector\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: pods-in-phase\nprovider:\narguments:\nlabel_selector: ''\nfunc: pods_in_phase\nmodule: chaosk8s.pod.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/kubernetes/#pods_not_in_phase","title":"<code>pods_not_in_phase</code>","text":"Type probe Module chaosk8s.pod.probes Name pods_not_in_phase Return boolean <p>Lookup a pod by <code>label_selector</code> in the namespace <code>ns</code>.</p> <p>Raises :exc:<code>chaoslib.exceptions.ActivityFailed</code> when the pod is in the given phase and should not have.</p> <p>Signature:</p> <pre><code>def pods_not_in_phase(label_selector: str,\n                      phase: str = 'Running',\n                      ns: str = 'default',\n                      secrets: Dict[str, Dict[str, str]] = None) -&gt; bool:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required label_selector string Yes phase string \u201cRunning\u201d No ns string \u201cdefault\u201d No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"pods-not-in-phase\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosk8s.pod.probes\",\n\"func\": \"pods_not_in_phase\",\n\"arguments\": {\n\"label_selector\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: pods-not-in-phase\nprovider:\narguments:\nlabel_selector: ''\nfunc: pods_not_in_phase\nmodule: chaosk8s.pod.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/kubernetes/#read_pod_logs","title":"<code>read_pod_logs</code>","text":"Type probe Module chaosk8s.pod.probes Name read_pod_logs Return mapping <p>Fetch logs for all the pods with the label <code>\"name\"</code> set to <code>name</code> and return a dictionary with the keys being the pod\u2019s name and the values the logs of said pod. If <code>name</code> is not provided, use only the <code>label_selector</code> instead.</p> <p>When your pod has several containers, you should also set <code>container_name</code> to clarify which container you want to read logs from.</p> <p>If you provide <code>last</code>, this returns the logs of the last N seconds until now. This can set to a fluent delta such as <code>10 minutes</code>.</p> <p>You may also set <code>from_previous</code> to <code>True</code> to capture the logs of a previous pod\u2019s incarnation, if any.</p> <p>Signature:</p> <pre><code>def read_pod_logs(name: str = None,\n                  last: Optional[str] = None,\n                  ns: str = 'default',\n                  from_previous: bool = False,\n                  label_selector: str = 'name in ({name})',\n                  container_name: str = None,\n                  secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, str]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required name string null No last object null No ns string \u201cdefault\u201d No from_previous boolean false No label_selector string \u201cname in ({name})\u201d No container_name string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"read-pod-logs\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosk8s.pod.probes\",\n\"func\": \"read_pod_logs\"\n}\n}\n</code></pre> <pre><code>name: read-pod-logs\nprovider:\nfunc: read_pod_logs\nmodule: chaosk8s.pod.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/kubernetes/#terminate_pods","title":"<code>terminate_pods</code>","text":"Type action Module chaosk8s.pod.actions Name terminate_pods Return None <p>Terminate a pod gracefully. Select the appropriate pods by label and/or name patterns. Whenever a pattern is provided for the name, all pods retrieved will be filtered out if their name do not match the given pattern.</p> <p>If neither <code>label_selector</code> nor <code>name_pattern</code> are provided, all pods in the namespace will be selected for termination.</p> <p>If <code>all</code> is set to <code>True</code>, all matching pods will be terminated.</p> <p>Value of <code>qty</code> varies based on <code>mode</code>. If <code>mode</code> is set to <code>fixed</code>, then <code>qty</code> refers to number of pods to be terminated. If <code>mode</code> is set to <code>percentage</code>, then <code>qty</code> refers to percentage of pods, from 1 to 100, to be terminated. Default <code>mode</code> is <code>fixed</code> and default <code>qty</code> is <code>1</code>.</p> <p>If <code>order</code> is set to <code>oldest</code>, the retrieved pods will be ordered by the pods creation_timestamp, with the oldest pod first in list.</p> <p>If <code>rand</code> is set to <code>True</code>, n random pods will be terminated Otherwise, the first retrieved n pods will be terminated.</p> <p>If <code>grace_period</code> is greater than or equal to 0, it will be used as the grace period (in seconds) to terminate the pods. Otherwise, the default pod\u2019s grace period will be used.</p> <p>Signature:</p> <pre><code>def terminate_pods(label_selector: str = None,\n                   name_pattern: str = None,\n                   all: bool = False,\n                   rand: bool = False,\n                   mode: str = 'fixed',\n                   qty: int = 1,\n                   grace_period: int = -1,\n                   ns: str = 'default',\n                   order: str = 'alphabetic',\n                   secrets: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required label_selector string null No name_pattern string null No all boolean false No rand boolean false No mode string \u201cfixed\u201d No qty integer 1 No grace_period integer -1 No ns string \u201cdefault\u201d No order string \u201calphabetic\u201d No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"terminate-pods\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosk8s.pod.actions\",\n\"func\": \"terminate_pods\"\n}\n}\n</code></pre> <pre><code>name: terminate-pods\nprovider:\nfunc: terminate_pods\nmodule: chaosk8s.pod.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/kubernetes/#probes","title":"probes","text":""},{"location":"drivers/kubernetes/#all_microservices_healthy","title":"<code>all_microservices_healthy</code>","text":"Type probe Module chaosk8s.probes Name all_microservices_healthy Return Tuple[Dict[str, Any], Dict[str, Any]] <p>!!!DEPRECATED!!!</p> <p>Signature:</p> <pre><code>def all_microservices_healthy(\n    ns: str = 'default',\n    secrets: Dict[str, Dict[str, str]] = None\n) -&gt; Tuple[Dict[str, Any], Dict[str, Any]]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required ns string \u201cdefault\u201d No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"all-microservices-healthy\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosk8s.probes\",\n\"func\": \"all_microservices_healthy\"\n}\n}\n</code></pre> <pre><code>name: all-microservices-healthy\nprovider:\nfunc: all_microservices_healthy\nmodule: chaosk8s.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/kubernetes/#deployment_is_fully_available","title":"<code>deployment_is_fully_available</code>","text":"Type probe Module chaosk8s.probes Name deployment_is_fully_available Return None <p>!!!DEPRECATED!!!</p> <p>Signature:</p> <pre><code>def deployment_is_fully_available(name: str,\n                                  ns: str = 'default',\n                                  label_selector: str = None,\n                                  timeout: int = 30,\n                                  secrets: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required name string Yes ns string \u201cdefault\u201d No label_selector string null No timeout integer 30 No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"deployment-is-fully-available\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosk8s.probes\",\n\"func\": \"deployment_is_fully_available\",\n\"arguments\": {\n\"name\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: deployment-is-fully-available\nprovider:\narguments:\nname: ''\nfunc: deployment_is_fully_available\nmodule: chaosk8s.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/kubernetes/#deployment_is_not_fully_available","title":"<code>deployment_is_not_fully_available</code>","text":"Type probe Module chaosk8s.probes Name deployment_is_not_fully_available Return None <p>!!!DEPRECATED!!!</p> <p>Signature:</p> <pre><code>def deployment_is_not_fully_available(name: str,\n                                      ns: str = 'default',\n                                      label_selector: str = None,\n                                      timeout: int = 30,\n                                      secrets: Dict[str, Dict[str,\n                                                              str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required name string Yes ns string \u201cdefault\u201d No label_selector string null No timeout integer 30 No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"deployment-is-not-fully-available\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosk8s.probes\",\n\"func\": \"deployment_is_not_fully_available\",\n\"arguments\": {\n\"name\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: deployment-is-not-fully-available\nprovider:\narguments:\nname: ''\nfunc: deployment_is_not_fully_available\nmodule: chaosk8s.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/kubernetes/#microservice_available_and_healthy","title":"<code>microservice_available_and_healthy</code>","text":"Type probe Module chaosk8s.probes Name microservice_available_and_healthy Return Optional[bool] <p>!!!DEPRECATED!!!</p> <p>Signature:</p> <pre><code>def microservice_available_and_healthy(\n        name: str,\n        ns: str = 'default',\n        label_selector: str = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Optional[bool]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required name string Yes ns string \u201cdefault\u201d No label_selector string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"microservice-available-and-healthy\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosk8s.probes\",\n\"func\": \"microservice_available_and_healthy\",\n\"arguments\": {\n\"name\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: microservice-available-and-healthy\nprovider:\narguments:\nname: ''\nfunc: microservice_available_and_healthy\nmodule: chaosk8s.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/kubernetes/#microservice_is_not_available","title":"<code>microservice_is_not_available</code>","text":"Type probe Module chaosk8s.probes Name microservice_is_not_available Return boolean <p>!!!DEPRECATED!!!</p> <p>Signature:</p> <pre><code>def microservice_is_not_available(\n        name: str,\n        ns: str = 'default',\n        label_selector: str = 'name in ({name})',\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; bool:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required name string Yes ns string \u201cdefault\u201d No label_selector string \u201cname in ({name})\u201d No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"microservice-is-not-available\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosk8s.probes\",\n\"func\": \"microservice_is_not_available\",\n\"arguments\": {\n\"name\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: microservice-is-not-available\nprovider:\narguments:\nname: ''\nfunc: microservice_is_not_available\nmodule: chaosk8s.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/kubernetes/#read_microservices_logs","title":"<code>read_microservices_logs</code>","text":"Type probe Module chaosk8s.probes Name read_microservices_logs Return mapping <p>Fetch logs for all the pods with the label <code>\"name\"</code> set to <code>name</code> and return a dictionary with the keys being the pod\u2019s name and the values the logs of said pod. If <code>name</code> is not provided, use only the <code>label_selector</code> instead.</p> <p>When your pod has several containers, you should also set <code>container_name</code> to clarify which container you want to read logs from.</p> <p>If you provide <code>last</code>, this returns the logs of the last N seconds until now. This can set to a fluent delta such as <code>10 minutes</code>.</p> <p>You may also set <code>from_previous</code> to <code>True</code> to capture the logs of a previous pod\u2019s incarnation, if any.</p> <p>Signature:</p> <pre><code>def read_microservices_logs(\n        name: str = None,\n        last: Optional[str] = None,\n        ns: str = 'default',\n        from_previous: bool = False,\n        label_selector: str = 'name in ({name})',\n        container_name: str = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, str]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required name string null No last object null No ns string \u201cdefault\u201d No from_previous boolean false No label_selector string \u201cname in ({name})\u201d No container_name string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"read-microservices-logs\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosk8s.probes\",\n\"func\": \"read_microservices_logs\"\n}\n}\n</code></pre> <pre><code>name: read-microservices-logs\nprovider:\nfunc: read_microservices_logs\nmodule: chaosk8s.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/kubernetes/#service_endpoint_is_initialized","title":"<code>service_endpoint_is_initialized</code>","text":"Type probe Module chaosk8s.probes Name service_endpoint_is_initialized Return None <p>!!!DEPRECATED!!!</p> <p>Signature:</p> <pre><code>def service_endpoint_is_initialized(name: str,\n                                    ns: str = 'default',\n                                    label_selector: str = 'name in ({name})',\n                                    secrets: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required name string Yes ns string \u201cdefault\u201d No label_selector string \u201cname in ({name})\u201d No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"service-endpoint-is-initialized\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosk8s.probes\",\n\"func\": \"service_endpoint_is_initialized\",\n\"arguments\": {\n\"name\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: service-endpoint-is-initialized\nprovider:\narguments:\nname: ''\nfunc: service_endpoint_is_initialized\nmodule: chaosk8s.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/kubernetes/#replicaset","title":"replicaset","text":""},{"location":"drivers/kubernetes/#delete_replica_set","title":"<code>delete_replica_set</code>","text":"Type action Module chaosk8s.replicaset.actions Name delete_replica_set Return None <p>Delete a replica set by <code>name</code> or <code>label_selector</code> in the namespace <code>ns</code>.</p> <p>The replica set is deleted without a graceful period to trigger an abrupt termination.</p> <p>If neither <code>name</code> nor <code>label_selector</code> is specified, all the replica sets will be deleted in the namespace.</p> <p>Signature:</p> <pre><code>def delete_replica_set(name: str = None,\n                       ns: str = 'default',\n                       label_selector: str = None,\n                       secrets: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required name string null No ns string \u201cdefault\u201d No label_selector string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"delete-replica-set\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosk8s.replicaset.actions\",\n\"func\": \"delete_replica_set\"\n}\n}\n</code></pre> <pre><code>name: delete-replica-set\nprovider:\nfunc: delete_replica_set\nmodule: chaosk8s.replicaset.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/kubernetes/#service","title":"service","text":""},{"location":"drivers/kubernetes/#create_service_endpoint","title":"<code>create_service_endpoint</code>","text":"Type action Module chaosk8s.service.actions Name create_service_endpoint Return None <p>Create a service endpoint described by the service config, which must be the path to the JSON or YAML representation of the service.</p> <p>Signature:</p> <pre><code>def create_service_endpoint(spec_path: str,\n                            ns: str = 'default',\n                            secrets: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required spec_path string Yes ns string \u201cdefault\u201d No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"create-service-endpoint\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosk8s.service.actions\",\n\"func\": \"create_service_endpoint\",\n\"arguments\": {\n\"spec_path\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: create-service-endpoint\nprovider:\narguments:\nspec_path: ''\nfunc: create_service_endpoint\nmodule: chaosk8s.service.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/kubernetes/#delete_service","title":"<code>delete_service</code>","text":"Type action Module chaosk8s.service.actions Name delete_service Return None <p>Remove the given service</p> <p>Signature:</p> <pre><code>def delete_service(name: str,\n                   ns: str = 'default',\n                   secrets: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required name string Yes ns string \u201cdefault\u201d No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"delete-service\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosk8s.service.actions\",\n\"func\": \"delete_service\",\n\"arguments\": {\n\"name\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: delete-service\nprovider:\narguments:\nname: ''\nfunc: delete_service\nmodule: chaosk8s.service.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/kubernetes/#service_is_initialized","title":"<code>service_is_initialized</code>","text":"Type probe Module chaosk8s.service.probes Name service_is_initialized Return boolean <p>Lookup a service endpoint by its name and raises :exc:<code>FailedProbe</code> when the service was not found or not initialized.</p> <p>Signature:</p> <pre><code>def service_is_initialized(name: str = None,\n                           ns: str = 'default',\n                           label_selector: str = None,\n                           secrets: Dict[str, Dict[str, str]] = None) -&gt; bool:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required name string null No ns string \u201cdefault\u201d No label_selector string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"service-is-initialized\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosk8s.service.probes\",\n\"func\": \"service_is_initialized\"\n}\n}\n</code></pre> <pre><code>name: service-is-initialized\nprovider:\nfunc: service_is_initialized\nmodule: chaosk8s.service.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/kubernetes/#statefulset","title":"statefulset","text":""},{"location":"drivers/kubernetes/#create_statefulset","title":"<code>create_statefulset</code>","text":"Type action Module chaosk8s.statefulset.actions Name create_statefulset Return None <p>Create a statefulset described by the service config, which must be the path to the JSON or YAML representation of the statefulset.</p> <p>Signature:</p> <pre><code>def create_statefulset(spec_path: str,\n                       ns: str = 'default',\n                       secrets: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required spec_path string Yes ns string \u201cdefault\u201d No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"create-statefulset\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosk8s.statefulset.actions\",\n\"func\": \"create_statefulset\",\n\"arguments\": {\n\"spec_path\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: create-statefulset\nprovider:\narguments:\nspec_path: ''\nfunc: create_statefulset\nmodule: chaosk8s.statefulset.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/kubernetes/#remove_statefulset","title":"<code>remove_statefulset</code>","text":"Type action Module chaosk8s.statefulset.actions Name remove_statefulset Return None <p>Remove a statefulset by <code>name</code> or <code>label_selector</code> in the namespace <code>ns</code>.</p> <p>The statefulset is removed by deleting it without     a graceful period to trigger an abrupt termination.</p> <p>If neither <code>name</code> nor <code>label_selector</code> is specified, all the statefulsets will be deleted in the namespace.</p> <p>Signature:</p> <pre><code>def remove_statefulset(name: str = None,\n                       ns: str = 'default',\n                       label_selector: str = None,\n                       secrets: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required name string null No ns string \u201cdefault\u201d No label_selector string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"remove-statefulset\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosk8s.statefulset.actions\",\n\"func\": \"remove_statefulset\"\n}\n}\n</code></pre> <pre><code>name: remove-statefulset\nprovider:\nfunc: remove_statefulset\nmodule: chaosk8s.statefulset.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/kubernetes/#scale_statefulset","title":"<code>scale_statefulset</code>","text":"Type action Module chaosk8s.statefulset.actions Name scale_statefulset Return None <p>Scale a stateful set up or down. The <code>name</code> is the name of the stateful set.</p> <p>Signature:</p> <pre><code>def scale_statefulset(name: str,\n                      replicas: int,\n                      ns: str = 'default',\n                      secrets: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required name string Yes replicas integer Yes ns string \u201cdefault\u201d No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"scale-statefulset\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosk8s.statefulset.actions\",\n\"func\": \"scale_statefulset\",\n\"arguments\": {\n\"name\": \"\",\n\"replicas\": 0\n}\n}\n}\n</code></pre> <pre><code>name: scale-statefulset\nprovider:\narguments:\nname: ''\nreplicas: 0\nfunc: scale_statefulset\nmodule: chaosk8s.statefulset.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/kubernetes/#statefulset_fully_available","title":"<code>statefulset_fully_available</code>","text":"Type probe Module chaosk8s.statefulset.probes Name statefulset_fully_available Return None <p>Wait until all the statefulSet expected replicas are available. Once this state is reached, return <code>True</code>. If the state is not reached after <code>timeout</code> seconds, a :exc:<code>chaoslib.exceptions.ActivityFailed</code> exception is raised.</p> <p>Signature:</p> <pre><code>def statefulset_fully_available(name: str,\n                                ns: str = 'default',\n                                label_selector: str = None,\n                                timeout: int = 30,\n                                secrets: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required name string Yes ns string \u201cdefault\u201d No label_selector string null No timeout integer 30 No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"statefulset-fully-available\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosk8s.statefulset.probes\",\n\"func\": \"statefulset_fully_available\",\n\"arguments\": {\n\"name\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: statefulset-fully-available\nprovider:\narguments:\nname: ''\nfunc: statefulset_fully_available\nmodule: chaosk8s.statefulset.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/kubernetes/#statefulset_not_fully_available","title":"<code>statefulset_not_fully_available</code>","text":"Type probe Module chaosk8s.statefulset.probes Name statefulset_not_fully_available Return None <p>Wait until the statefulSet gets into an intermediate state where not all expected replicas are available. Once this state is reached, return <code>True</code>. If the state is not reached after <code>timeout</code> seconds, a :exc:<code>chaoslib.exceptions.ActivityFailed</code> exception is raised.</p> <p>Signature:</p> <pre><code>def statefulset_not_fully_available(name: str,\n                                    ns: str = 'default',\n                                    label_selector: str = None,\n                                    timeout: int = 30,\n                                    secrets: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required name string Yes ns string \u201cdefault\u201d No label_selector string null No timeout integer 30 No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"statefulset-not-fully-available\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosk8s.statefulset.probes\",\n\"func\": \"statefulset_not_fully_available\",\n\"arguments\": {\n\"name\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: statefulset-not-fully-available\nprovider:\narguments:\nname: ''\nfunc: statefulset_not_fully_available\nmodule: chaosk8s.statefulset.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/opentracing/","title":"Extension <code>chaostracing</code>","text":"Version 0.10.0 Repository https://github.com/chaostoolkit-incubator/chaostoolkit-opentracing <p>This project is an extension for the Chaos Toolkit for OpenTracing and OpenTelemetry.</p> <p>Here is an example of what it could look like with the Jaeger backend.</p> <p></p>"},{"location":"drivers/opentracing/#install","title":"Install","text":"<p>This package requires Python 3.6+</p> <p>To be used from your experiment, this package must be installed in the Python environment where chaostoolkit already lives.</p> <pre><code>$ pip install -U chaostoolkit-opentracing\n</code></pre>"},{"location":"drivers/opentracing/#usage","title":"Usage","text":"<p>This extension provides two controls to trace your Chaos Toolkit experiment:</p> <ul> <li>Open Telemetry</li> <li>Open Tracing (legacy)</li> </ul> <p>The only supported one is Open Telemetry as the Open Tracing is no longer maintained.</p>"},{"location":"drivers/opentracing/#open-telemetry","title":"Open Telemetry","text":"<p>To enable Open Telemetry tracing, simply add the following control to your experiment:</p> <pre><code>{\n\"controls\": [\n{\n\"name\": \"opentelemetry\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaostracing.oltp\"\n}\n}\n]\n}\n</code></pre> <p>We suggest you make it the first extension so it runs before and after all other extensions.</p> <p>To configure the various Open Telemetry settings, please use the standard OLTP environment variables:</p> <ul> <li>the sdk variables</li> <li>the exporter variables</li> </ul> <p>Mostly, you should set:</p> <ul> <li><code>OTEL_EXPORTER_OTLP_TRACES_ENDPOINT</code> to point to your collector (for instance: http://localhost:4318/v1/traces)</li> <li><code>OTEL_EXPORTER_OTLP_TRACES_HEADERS</code> to set any headers to pass to the exporter</li> </ul> <p>NOTE: This extension supports OLTP over HTTP but not gRPC.</p> <p>You can also instrument a variety of frameworks like this:</p> <pre><code>{\n\"controls\": [\n{\n\"name\": \"opentelemetry\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaostracing.oltp\",\n\"arguments\": {\n\"trace_httpx\": true,\n\"trace_requests\": true,\n\"trace_botocore\": true\n}\n}\n}\n]\n}\n</code></pre> <p>This will enable the according instrumentation automatically.</p>"},{"location":"drivers/opentracing/#google-cloud-platform-traces","title":"Google Cloud Platform Traces","text":"<p>If you intend on using Google Cloud Platform to export your traces to, please consider also installing the followings:</p> <pre><code>$ pip install opentelemetry-exporter-gcp-trace \\\n    opentelemetry-resourcedetector-gcp \\\n    opentelemetry-propagator-gcp\n</code></pre> <p>To authenticate the client, you can either:</p> <ul> <li>set <code>GOOGLE_APPLICATION_CREDENTIALS</code> environment variable</li> <li>pass the <code>otel_gcp_service_account</code> and <code>otel_gcp_project_id</code> variables   in the configuration block</li> <li>set the <code>CHAOSTOOLKIT_OTEL_GCP_SA</code> and <code>CHAOSTOOLKIT_OTEL_GCP_PROJECT_ID</code> environment variables</li> </ul> <p>In all cases, point to a service account which has the <code>roles/cloudtrace.agent</code> role as nthe name of the target project.</p>"},{"location":"drivers/opentracing/#legacy-open-tracing","title":"Legacy Open Tracing","text":"<p>This extensions supports the Open Tracing export format but highly recommends you to switch to Open Telemetry instead. There will be no support for Open Tracing support.</p> <p>NOTE: Please see at the bottom of the page all the supported clients and exporters this control supports.</p>"},{"location":"drivers/opentracing/#declare-within-the-experiment","title":"Declare within the experiment","text":"<p>To use this control, you can declare it on a per experiment basis like this:</p> <pre><code>{\n\"configuration\": {\n\"tracing_provider\": \"jaeger\",\n\"tracing_host\": \"127.0.0.1\",\n\"tracing_port\": 6831,\n\"tracing_propagation\": \"b3\"\n},\n\"controls\": [\n{\n\"name\": \"opentracing\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaostracing.control\"\n}\n}\n]\n}\n</code></pre> <p>This will automatically create a Jaeger client to emit traces onto the address <code>127.0.0.1:6831</code> (over UDP).</p>"},{"location":"drivers/opentracing/#declare-within-the-settings","title":"Declare within the settings","text":"<p>You may also declare the control to be applied to all experiments by declaring the control from within the Chaos Toolkit settings file. In that case, you do not need to set the configuration or the controls at the experiment level and the control will be applied to every experiments you run.</p> <pre><code>controls:\nopentracing:\nprovider:\ntype: python\nmodule: chaostracing.control\narguments:\nprovider: jaeger\nhost: 127.0.0.1\nport: 6831\npropagation: b3\n</code></pre>"},{"location":"drivers/opentracing/#send-traces-from-other-extensions","title":"Send traces from other extensions","text":"<p>You may also access the tracer from other extensions as follows.</p> <p>For instance, assuming you have an extension that makes a HTTP call you want to trace specifically, you could do this from your extension\u2019s code:</p> <pre><code>from chaoslib import Configuration, Secrets\nimport requests\nimport opentracing\n\ndef some_function(configuration: Configuration, secrets: Secrets):\n    tracer = opentracing.global_tracer()\n    scope = tracer.scope_manager.active\n    parent = scope.span\n\n    with tracer.start_span(\"call-service1\", child_of=parent) as span:\n        span.set_tag('http.method','GET')\n        span.set_tag('http.url', url)\n        span.set_tag('span.kind', 'client')\n        span.tracer.inject(span, 'http_headers', headers)\n\n        r = requests.get(url, headers=headers)\n        span.set_tag('http.status_code', r.status_code)\n</code></pre> <p>Because the opentracing exposes a noop tracer when non has been initialized, it should be safe to have that code in your extensions without having to determine if the extension has been enabled in the experiment.</p> <p>Please note that, Open Tracing scope cannot be shared across threads (while spans can). So, when running this in a background activity, the tracer will not actually be set to the one that was initialized.</p>"},{"location":"drivers/opentracing/#open-tracing-provider-support","title":"Open Tracing Provider Support","text":""},{"location":"drivers/opentracing/#jaeger-tracer","title":"Jaeger tracer","text":"<p>The Jager tracer relies on the OpenTracing protocol which has now be superseded by OpenTelemetry. However, we still provide support for it.</p> <p>To install the necessary dependencies for the Jaeger tracer, please run:</p> <pre><code>$ pip install -U jaeger-client~=4.8\n</code></pre> <p>Use the following configuration:</p> <pre><code>{\n\"configuration\": {\n\"tracing_provider\": \"jaeger\",\n\"tracing_host\": \"127.0.0.1\",\n\"tracing_port\": 6831,\n\"tracing_propagation\": \"b3\"\n},\n\"controls\": [\n{\n\"name\": \"opentracing\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaostracing.control\"\n}\n}\n]\n}\n</code></pre>"},{"location":"drivers/opentracing/#test","title":"Test","text":"<p>To run the tests for the project execute the following:</p> <pre><code>$ pytest\n</code></pre>"},{"location":"drivers/opentracing/#contribute","title":"Contribute","text":"<p>If you wish to contribute more functions to this package, you are more than welcome to do so. Please, fork this project, make your changes following the usual PEP 8 code style, sprinkling with tests and submit a PR for review.</p> <p>The Chaos Toolkit projects require all contributors must sign a Developer Certificate of Origin on each commit they would like to merge into the master branch of the repository. Please, make sure you can abide by the rules of the DCO before submitting a PR.</p>"},{"location":"drivers/opentracing/#exported-controls","title":"Exported Controls","text":""},{"location":"drivers/opentracing/#control","title":"control","text":"<p>This module exports controls covering the following phases of the execution of an experiment:</p> Level Before After Experiment Loading False False Experiment True True Steady-state Hypothesis True True Method True True Rollback True True Activities True True <p>In addition, the controls may define the followings:</p> Level Enabled Validate Control False Configure Control True Cleanup Control True <p>To use this control module, please add the following section to your experiment:</p> JSONYAML <pre><code>{\n\"controls\": [\n{\n\"name\": \"chaostracing\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaostracing.control\"\n}\n}\n]\n}\n</code></pre> <pre><code>controls:\n- name: chaostracing\nprovider:\nmodule: chaostracing.control\ntype: python\n</code></pre> <p>This block may also be enabled at any other level (steady-state hypothesis or activity) to focus only on that level.</p> <p>When enabled at the experiment level, by default, all sub-levels are also applied unless you set the <code>automatic</code> properties to <code>false</code>.</p>"},{"location":"drivers/opentracing/#metrics","title":"metrics","text":"<p>This module exports controls covering the following phases of the execution of an experiment:</p> Level Before After Experiment Loading False False Experiment False True Steady-state Hypothesis False False Method False False Rollback False False Activities False False <p>In addition, the controls may define the followings:</p> Level Enabled Validate Control False Configure Control True Cleanup Control True <p>To use this control module, please add the following section to your experiment:</p> JSONYAML <pre><code>{\n\"controls\": [\n{\n\"name\": \"chaostracing\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaostracing.metrics\"\n}\n}\n]\n}\n</code></pre> <pre><code>controls:\n- name: chaostracing\nprovider:\nmodule: chaostracing.metrics\ntype: python\n</code></pre> <p>This block may also be enabled at any other level (steady-state hypothesis or activity) to focus only on that level.</p> <p>When enabled at the experiment level, by default, all sub-levels are also applied unless you set the <code>automatic</code> properties to <code>false</code>.</p>"},{"location":"drivers/opentracing/#oltp","title":"oltp","text":"<p>This module exports controls covering the following phases of the execution of an experiment:</p> Level Before After Experiment Loading False False Experiment False False Steady-state Hypothesis False False Method False False Rollback False False Activities True True <p>In addition, the controls may define the followings:</p> Level Enabled Validate Control False Configure Control True Cleanup Control False <p>To use this control module, please add the following section to your experiment:</p> JSONYAML <pre><code>{\n\"controls\": [\n{\n\"name\": \"chaostracing\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaostracing.oltp\"\n}\n}\n]\n}\n</code></pre> <pre><code>controls:\n- name: chaostracing\nprovider:\nmodule: chaostracing.oltp\ntype: python\n</code></pre> <p>This block may also be enabled at any other level (steady-state hypothesis or activity) to focus only on that level.</p> <p>When enabled at the experiment level, by default, all sub-levels are also applied unless you set the <code>automatic</code> properties to <code>false</code>.</p>"},{"location":"drivers/opentracing/#exported-activities","title":"Exported Activities","text":""},{"location":"drivers/opentracing/#control_1","title":"control","text":""},{"location":"drivers/opentracing/#metrics_1","title":"metrics","text":""},{"location":"drivers/opentracing/#oltp_1","title":"oltp","text":""},{"location":"drivers/overview/","title":"Drivers Overview","text":"<p>Chaos Toolkit drivers extend the toolkit to be able to cause chaos and probe different types of systems. </p>"},{"location":"drivers/pixie/","title":"Extension <code>chaospixie</code>","text":"Version 0.1.1 Repository https://github.com/chaostoolkit-incubator/chaostoolkit-pixie <p>This extension allows you to run Pixie script during your experiments.</p>"},{"location":"drivers/pixie/#install","title":"Install","text":"<p>This package requires Python 3.8+ as Pixie\u2019s dependency requires it.</p> <p>To be used from your experiment, this package must be installed in the Python environment where chaostoolkit already lives.</p> <pre><code>$ pip install chaostoolkit-pixie\n</code></pre>"},{"location":"drivers/pixie/#usage","title":"Usage","text":"<p>This extension provides two probes to run Pixie scripts, either directly embedded into the experiment or in a file local to the experiment.</p> <p>For instance, a complete script:</p> <pre><code>{\n\"version\": \"1.0.0\",\n\"title\": \"Consumer service remains fast under higher traffic load\",\n\"description\": \"Showcase for how we remain responsive under a certain load. This should help us figure how many replicas we should run\",\n\"secrets\": {\n\"pixie\": {\n\"api_key\": {\n\"type\": \"env\",\n\"key\": \"PIXIE_API_KEY\"\n}\n}\n},\n\"configuration\": {\n\"pixie_cluster_id\": {\n\"type\": \"env\",\n\"key\": \"PIXIE_CLUSTER_ID\"\n}\n},\n\"steady-state-hypothesis\": {\n\"title\": \"Run a Pixie script and evaluate it\",\n\"probes\": [\n{\n\"type\": \"probe\",\n\"name\": \"p99-latency-of-consumer-service-for-past-2m-remained-under-300ms\",\n\"tolerance\": {\n\"type\": \"probe\",\n\"name\": \"compute-median\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaospixie.tolerances\",\n\"func\": \"percentile_should_be_below\",\n\"secrets\": [\"pixie\"],\n\"arguments\": {\n\"column\": \"latency_p99\",\n\"percentile\": 99,\n\"convert_from_nanoseconds\": \"milliseconds\",\n\"treshold\": 300.0\n}\n}\n},\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaospixie.probes\",\n\"func\": \"run_script_from_local_file\",\n\"secrets\": [\"pixie\"],\n\"arguments\": {\n\"script_path\": \"./pixiescript.py\"\n}\n}\n}\n]\n},\n\"method\": [\n{\n\"type\": \"action\",\n\"name\": \"send-10-requests-per-second-for-60s\",\n\"provider\": {\n\"type\": \"process\",\n\"path\": \"ddosify\",\n\"arguments\": \"-d 60 -n 600 -o stdout-json -t http://mydomain.com/consumer\"\n}\n}\n]\n}\n</code></pre> <p>This assumes you have a a service named <code>consumer</code>. Pixie monitors its latency and produces percentiles for it. We then use a probe tolerance to evaluate the returned latency for the past 2 minutes and we measure if the latency was mainly (99-percentile) under 300ms.</p> <p>In this example, we use ddosify to induce the load, but you can use your favourite tooling of course.</p> <p>The Pixie script we run is as follows:</p> <pre><code>import px\n\nns_per_ms = 1000 * 1000\nns_per_s = 1000 * ns_per_ms\nwindow_ns = px.DurationNanos(10 * ns_per_s)\nfilter_unresolved_inbound = True\nfilter_health_checks = True\nfilter_ready_checks = True\n\n\ndef inbound_let_timeseries(start_time: str, service: px.Service):\n''' Compute the let as a timeseries for requests received by `service`.\n\n    Args:\n    @start_time: The timestamp of data to start at.\n    @service: The name of the service to filter on.\n\n    '''\n    df = let_helper(start_time)\n    df = df[px.has_service_name(df.service, service)]\n\n    df = df.groupby(['timestamp']).agg(\n        latency_quantiles=('latency', px.quantiles),\n        error_rate_per_window=('failure', px.mean),\n        throughput_total=('latency', px.count),\n        bytes_total=('resp_body_size', px.sum)\n    )\n\n    # Format the result of LET aggregates into proper scalar formats and\n    # time series.\n    df.latency_p50 = px.DurationNanos(px.floor(px.pluck_float64(df.latency_quantiles, 'p50')))\n    df.latency_p90 = px.DurationNanos(px.floor(px.pluck_float64(df.latency_quantiles, 'p90')))\n    df.latency_p99 = px.DurationNanos(px.floor(px.pluck_float64(df.latency_quantiles, 'p99')))\n    df.request_throughput = df.throughput_total / window_ns\n    df.errors_per_ns = df.error_rate_per_window * df.request_throughput / px.DurationNanos(1)\n    df.error_rate = px.Percent(df.error_rate_per_window)\n    df.bytes_per_ns = df.bytes_total / window_ns\n    df.time_ = df.timestamp\n\n    return df[['time_', 'latency_p50', 'latency_p90', 'latency_p99',\n               'request_throughput', 'errors_per_ns', 'error_rate', 'bytes_per_ns']]\n\n\ndef let_helper(start_time: str):\n''' Compute the initial part of the let for requests.\n        Filtering to inbound/outbound traffic by service is done by the calling function.\n\n    Args:\n    @start_time: The timestamp of data to start at.\n\n    '''\n    df = px.DataFrame(table='http_events', start_time=start_time)\n    # Filter only to inbound service traffic (server-side).\n    # Don't include traffic initiated by this service to an external location.\n    df = df[df.trace_role == 2]\n    df.service = df.ctx['service']\n    df.pod = df.ctx['pod']\n    df.latency = df.latency\n\n    df.timestamp = px.bin(df.time_, window_ns)\n\n    df.failure = df.resp_status &gt;= 400\n    filter_out_conds = ((df.req_path != '/healthz' or not filter_health_checks) and (\n        df.req_path != '/readyz' or not filter_ready_checks)) and (\n        df['remote_addr'] != '-' or not filter_unresolved_inbound)\n\n    df = df[filter_out_conds]\n    return df\n\n\ndf = inbound_let_timeseries(\"-2m\", \"default/consumer\")\npx.display(df)\n</code></pre> <p>This is an abridged script from Pixie itself.</p> <p>That\u2019s it!</p>"},{"location":"drivers/pixie/#configuration","title":"Configuration","text":"<p>"},{"location":"drivers/pixie/#test","title":"Test","text":"<p>To run the tests for the project execute the following:</p> <pre><code>$ pytest\n</code></pre>"},{"location":"drivers/pixie/#formatting-and-linting","title":"Formatting and Linting","text":"<p>We use a combination of <code>black</code>, <code>flake8</code>, and <code>isort</code> to both lint and format this repositories code.</p> <p>Before raising a Pull Request, we recommend you run formatting against your code with:</p> <pre><code>$ make format\n</code></pre> <p>This will automatically format any code that doesn\u2019t adhere to the formatting standards.</p> <p>As some things are not picked up by the formatting, we also recommend you run:</p> <pre><code>$ make lint\n</code></pre> <p>To ensure that any unused import statements/strings that are too long, etc. are also picked up.</p>"},{"location":"drivers/pixie/#contribute","title":"Contribute","text":"<p>If you wish to contribute more functions to this package, you are more than welcome to do so. Please, fork this project, make your changes following the usual PEP 8 code style, sprinkling with tests and submit a PR for review.</p>"},{"location":"drivers/pixie/#exported-activities","title":"Exported Activities","text":""},{"location":"drivers/pixie/#probes","title":"probes","text":""},{"location":"drivers/pixie/#run_script","title":"<code>run_script</code>","text":"Type probe Module chaospixie.probes Name run_script Return string <p>Run a Pixie script.</p> <p>Make sure to provide the name of the table you want to fetch data for. Usually it\u2019s the name given to the <code>px.display()</code> function in your script.</p> <p>Signature:</p> <pre><code>def run_script(script: str,\n               table_name: str = 'output',\n               configuration: Dict[str, Dict[str, str]] = None,\n               secrets: Dict[str, Dict[str, str]] = None) -&gt; str:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required script string Yes table_name string \u201coutput\u201d No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"run-script\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaospixie.probes\",\n\"func\": \"run_script\",\n\"arguments\": {\n\"script\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: run-script\nprovider:\narguments:\nscript: ''\nfunc: run_script\nmodule: chaospixie.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/pixie/#run_script_from_local_file","title":"<code>run_script_from_local_file</code>","text":"Type probe Module chaospixie.probes Name run_script_from_local_file Return list <p>Run a Pixie script loaded from a local file.</p> <p>Make sure to provide the name of the table you want to fetch data for. Usually it\u2019s the name given to the <code>px.display()</code> function in your script.</p> <p>Signature:</p> <pre><code>def run_script_from_local_file(\n        script_path: str,\n        table_name: str = 'output',\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; List[Dict[str, Any]]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required script_path string Yes table_name string \u201coutput\u201d No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"run-script-from-local-file\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaospixie.probes\",\n\"func\": \"run_script_from_local_file\",\n\"arguments\": {\n\"script_path\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: run-script-from-local-file\nprovider:\narguments:\nscript_path: ''\nfunc: run_script_from_local_file\nmodule: chaospixie.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/pixie/#tolerances","title":"tolerances","text":""},{"location":"drivers/pixie/#median_should_be_above","title":"<code>median_should_be_above</code>","text":"Type tolerance Module chaospixie.tolerances Name median_should_be_above Return boolean <p>Compute the median of all the <code>column</code> in the list of results. If you need to limit the computation to a specific dataset within the results, you can provide the <code>target</code> as a tuple such as <code>(key, value)</code>. The <code>value</code> can be a fixed value or a regular expression to match many.</p> <p>Sometimes the column\u2019s value type is in nanoseconds, which isn\u2019t always easy to make sense of. You can set the <code>convert_from_nanoseconds_to_seconds</code> flag so we automatically convert to seconds the value. In that case, the threshold mus also be in seconds.</p> <p>Return true if the median is above (or equal) to the threshold you provide.</p> <p>Signature:</p> <pre><code>def median_should_be_above(column: str,\n                           treshold: float,\n                           target: Tuple[str, str] = None,\n                           convert_from_nanoseconds: Literal[\n                               'seconds', 'milliseconds',\n                               'microseconds'] = None,\n                           value: List[Dict[str, Any]] = None) -&gt; bool:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required column string Yes treshold number Yes target object null No convert_from_nanoseconds object null No value list null No <p>Tolerances declare the <code>value</code> argument which is automatically injected by Chaos Toolkit as the output of the probe they are evaluating.</p> <p>Usage:</p> JSONYAML <pre><code>{\n\"steady-state-hypothesis\": {\n\"title\": \"...\",\n\"probes\": [\n{\n\"type\": \"probe\",\n\"tolerance\": {\n\"name\": \"median-should-be-above\",\n\"type\": \"tolerance\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaospixie.tolerances\",\n\"func\": \"median_should_be_above\",\n\"arguments\": {\n\"column\": \"\",\n\"treshold\": null\n}\n}\n},\n\"...\": \"...\"\n}\n]\n}\n}\n</code></pre> <pre><code>steady-state-hypothesis:\nprobes:\n- '...': '...'\ntolerance:\nname: median-should-be-above\nprovider:\narguments:\ncolumn: ''\ntreshold: null\nfunc: median_should_be_above\nmodule: chaospixie.tolerances\ntype: python\ntype: tolerance\ntype: probe\ntitle: '...'\n</code></pre>"},{"location":"drivers/pixie/#median_should_be_below","title":"<code>median_should_be_below</code>","text":"Type tolerance Module chaospixie.tolerances Name median_should_be_below Return boolean <p>Compute the median of all the <code>column</code> in the list of results. If you need to limit the computation to a specific dataset within the results, you can provide the <code>target</code> as a tuple such as <code>(key, value)</code>. The <code>value</code> can be a fixed value or a regular expression to match many.</p> <p>Sometimes the column\u2019s value type is in nanoseconds, which isn\u2019t always easy to make sense of. You can set the <code>convert_from_nanoseconds</code> flag so we automatically convert to seconds the value. In that case, the threshold must also be in seconds. The <code>convert_from_nanoseconds</code> flag can be: <code>\"seconds\"</code>, <code>\"milliseconds\"</code> or <code>\"microseconds\"</code>.</p> <p>Return true if the median is below (or equal) to the threshold you provide.</p> <p>Signature:</p> <pre><code>def median_should_be_below(column: str,\n                           treshold: float,\n                           convert_from_nanoseconds: Literal[\n                               'seconds', 'milliseconds',\n                               'microseconds'] = None,\n                           target: Tuple[str, str] = None,\n                           value: List[Dict[str, Any]] = None) -&gt; bool:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required column string Yes treshold number Yes convert_from_nanoseconds object null No target object null No value list null No <p>Tolerances declare the <code>value</code> argument which is automatically injected by Chaos Toolkit as the output of the probe they are evaluating.</p> <p>Usage:</p> JSONYAML <pre><code>{\n\"steady-state-hypothesis\": {\n\"title\": \"...\",\n\"probes\": [\n{\n\"type\": \"probe\",\n\"tolerance\": {\n\"name\": \"median-should-be-below\",\n\"type\": \"tolerance\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaospixie.tolerances\",\n\"func\": \"median_should_be_below\",\n\"arguments\": {\n\"column\": \"\",\n\"treshold\": null\n}\n}\n},\n\"...\": \"...\"\n}\n]\n}\n}\n</code></pre> <pre><code>steady-state-hypothesis:\nprobes:\n- '...': '...'\ntolerance:\nname: median-should-be-below\nprovider:\narguments:\ncolumn: ''\ntreshold: null\nfunc: median_should_be_below\nmodule: chaospixie.tolerances\ntype: python\ntype: tolerance\ntype: probe\ntitle: '...'\n</code></pre>"},{"location":"drivers/pixie/#percentile_should_be_above","title":"<code>percentile_should_be_above</code>","text":"Type tolerance Module chaospixie.tolerances Name percentile_should_be_above Return boolean <p>Compute the percentiles of all the <code>column</code> in the list of results. The default returned percentile is the 99-percentile. If you need to limit the computation to a specific dataset within the results, you can provide the <code>target</code> as a tuple such as <code>(key, value)</code>. The <code>value</code> can be a fixed value or a regular expression to match many.</p> <p>Sometimes the column\u2019s value type is in nanoseconds, which isn\u2019t always easy to make sense of. You can set the <code>convert_from_nanoseconds_to_seconds</code> flag so we automatically convert to seconds the value. In that case, the threshold mus also be in seconds.</p> <p>Return true if the percentile is above (or equal) to the threshold you provide.</p> <p>Signature:</p> <pre><code>def percentile_should_be_above(column: str,\n                               treshold: float,\n                               percentile: int = 99,\n                               target: Tuple[str, str] = None,\n                               convert_from_nanoseconds: Literal[\n                                   'seconds', 'milliseconds',\n                                   'microseconds'] = None,\n                               value: List[Dict[str, Any]] = None) -&gt; bool:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required column string Yes treshold number Yes percentile integer 99 No target object null No convert_from_nanoseconds object null No value list null No <p>Tolerances declare the <code>value</code> argument which is automatically injected by Chaos Toolkit as the output of the probe they are evaluating.</p> <p>Usage:</p> JSONYAML <pre><code>{\n\"steady-state-hypothesis\": {\n\"title\": \"...\",\n\"probes\": [\n{\n\"type\": \"probe\",\n\"tolerance\": {\n\"name\": \"percentile-should-be-above\",\n\"type\": \"tolerance\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaospixie.tolerances\",\n\"func\": \"percentile_should_be_above\",\n\"arguments\": {\n\"column\": \"\",\n\"treshold\": null\n}\n}\n},\n\"...\": \"...\"\n}\n]\n}\n}\n</code></pre> <pre><code>steady-state-hypothesis:\nprobes:\n- '...': '...'\ntolerance:\nname: percentile-should-be-above\nprovider:\narguments:\ncolumn: ''\ntreshold: null\nfunc: percentile_should_be_above\nmodule: chaospixie.tolerances\ntype: python\ntype: tolerance\ntype: probe\ntitle: '...'\n</code></pre>"},{"location":"drivers/pixie/#percentile_should_be_below","title":"<code>percentile_should_be_below</code>","text":"Type tolerance Module chaospixie.tolerances Name percentile_should_be_below Return boolean <p>Compute the percentiles of all the <code>column</code> in the list of results. The default returned percentile is the 99-percentile. If you need to limit the computation to a specific dataset within the results, you can provide the <code>target</code> as a tuple such as <code>(key, value)</code>. The <code>value</code> can be a fixed value or a regular expression to match many.</p> <p>Sometimes the column\u2019s value type is in nanoseconds, which isn\u2019t always easy to make sense of. You can set the <code>convert_from_nanoseconds_to_seconds</code> flag so we automatically convert to seconds the value. In that case, the threshold mus also be in seconds.</p> <p>Return true if the percentile is below (or equal) to the threshold you provide.</p> <p>Signature:</p> <pre><code>def percentile_should_be_below(column: str,\n                               treshold: float,\n                               percentile: int = 99,\n                               target: Tuple[str, str] = None,\n                               convert_from_nanoseconds: Literal[\n                                   'seconds', 'milliseconds',\n                                   'microseconds'] = None,\n                               value: List[Dict[str, Any]] = None) -&gt; bool:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required column string Yes treshold number Yes percentile integer 99 No target object null No convert_from_nanoseconds object null No value list null No <p>Tolerances declare the <code>value</code> argument which is automatically injected by Chaos Toolkit as the output of the probe they are evaluating.</p> <p>Usage:</p> JSONYAML <pre><code>{\n\"steady-state-hypothesis\": {\n\"title\": \"...\",\n\"probes\": [\n{\n\"type\": \"probe\",\n\"tolerance\": {\n\"name\": \"percentile-should-be-below\",\n\"type\": \"tolerance\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaospixie.tolerances\",\n\"func\": \"percentile_should_be_below\",\n\"arguments\": {\n\"column\": \"\",\n\"treshold\": null\n}\n}\n},\n\"...\": \"...\"\n}\n]\n}\n}\n</code></pre> <pre><code>steady-state-hypothesis:\nprobes:\n- '...': '...'\ntolerance:\nname: percentile-should-be-below\nprovider:\narguments:\ncolumn: ''\ntreshold: null\nfunc: percentile_should_be_below\nmodule: chaospixie.tolerances\ntype: python\ntype: tolerance\ntype: probe\ntitle: '...'\n</code></pre>"},{"location":"drivers/prometheus/","title":"Extension <code>chaosprometheus</code>","text":"Version 0.5.0 Repository https://github.com/chaostoolkit-incubator/chaostoolkit-prometheus <p>Prometheus support for the Chaos Toolkit.</p>"},{"location":"drivers/prometheus/#install","title":"Install","text":"<p>To be used from your experiment, this package must be installed in the Python environment where chaostoolkit already lives.</p> <pre><code>$ pip install chaostoolkit-prometheus\n</code></pre>"},{"location":"drivers/prometheus/#usage","title":"Usage","text":"<p>To use this package, you must create have access to a Prometheus instance via HTTP and be allowed to connect to it.</p> <p>This package only exports probes to query for some aspects of your system as monitored by Prometheus.</p> <p>Here is an example of querying Prometheus at a given moment</p> <pre><code>{\n\"type\": \"probe\",\n\"name\": \"fetch-cpu-just-2mn-ago\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosprometheus.probes\",\n\"func\": \"query\",\n\"arguments\": {\n\"query\": \"process_cpu_seconds_total{job='websvc'}\",\n\"when\": \"2 minutes ago\"\n}\n}\n}\n</code></pre> <p>You can also ask for an interval as follows:</p> <pre><code>{\n\"type\": \"probe\",\n\"name\": \"fetch-cpu-over-interval\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosprometheus.probes\",\n\"func\": \"query_interval\",\n\"arguments\": {\n\"query\": \"process_cpu_seconds_total{job='websvc'}\",\n\"start\": \"2 minutes ago\",\n\"end\": \"now\",\n\"step\": 5\n}\n}\n}\n</code></pre> <p>In both cases, the probe returns the JSON payload as-is from Prometheus or raises an exception when an error is met.</p> <p>The result is not further process and should be found in the generated report of the experiment run.</p> <p>You can also send metrics to a pushgateway service via a control:</p> <pre><code>{\n\"controls\": [\n{\n\"name\": \"prometheus\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosprometheus.metrics\",\n\"arguments\": {\n\"pushgateway_url\": \"http://someip:9091\",\n\"job\": \"chaostoolkit\"\n}\n}\n}\n]\n}\n</code></pre> <p>You can also set three more arguments:</p> <ul> <li><code>grouping_key</code>: A mapping of strings to uniquely aggregate multiple runs   in the Prometheus backend</li> <li><code>trace_id</code>: This must be a string which will identify this run uniquely in   your metrics. If none is a provided, a random string is generated.</li> <li><code>experiment_ref</code>: Sometimes it\u2019s useful to identify a particular experiment,   not just its run, throughout many runs. This is the string to do that. If   none is provided, a hash of the experiment is performed and used. The hash   is not stable across changes of the experiment of course.</li> </ul> <p>These are particularly useful when you couple this extension with others like Loki where you want to cross-reference between logs and metrics.</p>"},{"location":"drivers/prometheus/#contribute","title":"Contribute","text":"<p>If you wish to contribute more functions to this package, you are more than welcome to do so. Please, fork this project, make your changes following the usual PEP 8 code style, sprinkling with tests and submit a PR for review.</p>"},{"location":"drivers/prometheus/#exported-controls","title":"Exported Controls","text":""},{"location":"drivers/prometheus/#metrics","title":"metrics","text":"<p>This module exports controls covering the following phases of the execution of an experiment:</p> Level Before After Experiment Loading False False Experiment False True Steady-state Hypothesis False False Method False False Rollback False False Activities False False <p>In addition, the controls may define the followings:</p> Level Enabled Validate Control False Configure Control True Cleanup Control False <p>To use this control module, please add the following section to your experiment:</p> JSONYAML <pre><code>{\n\"controls\": [\n{\n\"name\": \"chaosprometheus\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosprometheus.metrics\"\n}\n}\n]\n}\n</code></pre> <pre><code>controls:\n- name: chaosprometheus\nprovider:\nmodule: chaosprometheus.metrics\ntype: python\n</code></pre> <p>This block may also be enabled at any other level (steady-state hypothesis or activity) to focus only on that level.</p> <p>When enabled at the experiment level, by default, all sub-levels are also applied unless you set the <code>automatic</code> properties to <code>false</code>.</p>"},{"location":"drivers/prometheus/#exported-activities","title":"Exported Activities","text":""},{"location":"drivers/prometheus/#metrics_1","title":"metrics","text":""},{"location":"drivers/prometheus/#probes","title":"probes","text":""},{"location":"drivers/prometheus/#compute_mean","title":"<code>compute_mean</code>","text":"Type probe Module chaosprometheus.probes Name compute_mean Return number <p>Compute the mean of all returned datapoints of the range vector matching the given query. The query must return a range vector.</p> <p>The default computes an arithmetic mean. You can switch to geometric or harmonic mean by passing <code>mean_type=\"geometric\"</code> or <code>mean_type=\"harmonic\"</code>.</p> <p>Signature:</p> <pre><code>def compute_mean(query: str,\n                 window: str = '1d',\n                 mean_type: str = 'arithmetic',\n                 configuration: Dict[str, Dict[str, str]] = None,\n                 secrets: Dict[str, Dict[str, str]] = None) -&gt; float:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required query string Yes window string \u201c1d\u201d No mean_type string \u201carithmetic\u201d No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"compute-mean\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosprometheus.probes\",\n\"func\": \"compute_mean\",\n\"arguments\": {\n\"query\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: compute-mean\nprovider:\narguments:\nquery: ''\nfunc: compute_mean\nmodule: chaosprometheus.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/prometheus/#nodes_cpu_usage_mean","title":"<code>nodes_cpu_usage_mean</code>","text":"Type probe Module chaosprometheus.probes Name nodes_cpu_usage_mean Return number <p>Computes a mean of all nodes activities per minute over the given <code>window</code>. We use the <code>node_cpu_seconds_total</code> metric to perform this query.</p> <p>Signature:</p> <pre><code>def nodes_cpu_usage_mean(window: str = '1d',\n                         configuration: Dict[str, Dict[str, str]] = None,\n                         secrets: Dict[str, Dict[str, str]] = None) -&gt; float:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required window string \u201c1d\u201d No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"nodes-cpu-usage-mean\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosprometheus.probes\",\n\"func\": \"nodes_cpu_usage_mean\"\n}\n}\n</code></pre> <pre><code>name: nodes-cpu-usage-mean\nprovider:\nfunc: nodes_cpu_usage_mean\nmodule: chaosprometheus.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/prometheus/#query","title":"<code>query</code>","text":"Type probe Module chaosprometheus.probes Name query Return mapping <p>Run an instant query against a Prometheus server and returns its result as-is.</p> <p>Signature:</p> <pre><code>def query(query: str,\n          when: str = None,\n          timeout: float = None,\n          configuration: Dict[str, Dict[str, str]] = None,\n          secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required query string Yes when string null No timeout number null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"query\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosprometheus.probes\",\n\"func\": \"query\",\n\"arguments\": {\n\"query\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: query\nprovider:\narguments:\nquery: ''\nfunc: query\nmodule: chaosprometheus.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/prometheus/#query_interval","title":"<code>query_interval</code>","text":"Type probe Module chaosprometheus.probes Name query_interval Return mapping <p>Run a range query against a Prometheus server and returns its result as-is.</p> <p>The <code>start</code> and <code>end</code> arguments can be a RFC 3339 date or expressed more colloquially such as <code>\"5 minutes ago\"</code>.</p> <p>Signature:</p> <pre><code>def query_interval(\n        query: str,\n        start: str,\n        end: str,\n        step: int = 1,\n        timeout: float = None,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required query string Yes start string Yes end string Yes step integer 1 No timeout number null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"query-interval\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosprometheus.probes\",\n\"func\": \"query_interval\",\n\"arguments\": {\n\"query\": \"\",\n\"start\": \"\",\n\"end\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: query-interval\nprovider:\narguments:\nend: ''\nquery: ''\nstart: ''\nfunc: query_interval\nmodule: chaosprometheus.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/reliably/","title":"Extension <code>chaosreliably</code>","text":"Version 0.49.0 Repository https://github.com/chaostoolkit-incubator/chaostoolkit-reliably <p>Chaos Toolkit extension for Reliably.</p>"},{"location":"drivers/reliably/#install","title":"Install","text":"<p>To be used from your experiment, this package must be installed in the Python environment where chaostoolkit already lives.</p> <pre><code>$ pip install chaostoolkit-reliably\n</code></pre>"},{"location":"drivers/reliably/#authentication","title":"Authentication","text":"<p>To use this package, you must create have registered with  Reliably services.</p> <p>Then you need to set some environment variables as secrets.</p> <ul> <li><code>RELIABLY_TOKEN</code>: the token to authenticate against Reliably\u2019s API</li> <li><code>RELIABLY_HOST:</code>: the hostname to connect to, default to <code>app.reliably.com</code></li> </ul> <pre><code>{\n\"secrets\": {\n\"reliably\": {\n\"token\": {\n\"type\": \"env\",\n\"key\": \"RELIABLY_TOKEN\"\n},\n\"host\": {\n\"type\": \"env\",\n\"key\": \"RELIABLY_HOST\",\n\"default\": \"app.reliably.com\"\n}\n}\n}\n}\n</code></pre>"},{"location":"drivers/reliably/#usage","title":"Usage","text":""},{"location":"drivers/reliably/#as-steady-steate-hypothesis-or-method","title":"As Steady Steate Hypothesis or Method","text":"<p>This extensions offers a variety of probes and tolerances ready to be used in your steady-state blocks.</p> <p>For instance:</p> <pre><code>{\n\"version\": \"1.0.0\",\n\"title\": \"SLO error-count-3h / Error budget 10%\",\n\"description\": \"Monitor the health of our demo service from our users perspective and ensure they have a high-quality experience\",\n\"runtime\": {\n\"hypothesis\": {\n\"strategy\": \"after-method-only\"\n}\n},\n\"steady-state-hypothesis\": {\n\"title\": \"Compute SLO and validate its Error Budget with our target\",\n\"probes\": [\n{\n\"type\": \"probe\",\n\"name\": \"get-slo\",\n\"tolerance\": {\n\"type\": \"probe\",\n\"name\": \"there-should-be-error-budget-left\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosreliably.activities.slo.tolerances\",\n\"func\": \"has_error_budget_left\",\n\"arguments\": {\n\"name\": \"cloudrun-service-availability\"\n}\n}\n},\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosreliably.activities.slo.probes\",\n\"func\": \"compute_slo\",\n\"arguments\": {\n\"slo\": {\n\"apiVersion\": \"sre.google.com/v2\",\n\"kind\": \"ServiceLevelObjective\",\n\"metadata\": {\n\"name\": \"cloudrun-service-availability\",\n\"labels\": {\n\"service_name\": \"cloudrun\",\n\"feature_name\": \"service\",\n\"slo_name\": \"availability\"\n}\n},\n\"spec\": {\n\"description\": \"Availability of Cloud Run service\",\n\"backend\": \"cloud_monitoring_mql\",\n\"method\": \"good_bad_ratio\",\n\"exporters\": [\n\n],\n\"service_level_indicator\": {\n\"filter_good\": \"fetch cloud_run_revision | metric 'run.googleapis.com/request_count' | filter resource.project_id == '${CLOUDRUN_PROJECT_ID}' | filter resource.service_name == '${CLOUDRUN_SERVICE_NAME}' | filter metric.response_code_class == '2xx'\",\n\"filter_valid\": \"fetch cloud_run_revision | metric 'run.googleapis.com/request_count' | filter resource.project_id == '${CLOUDRUN_PROJECT_ID}' | filter resource.service_name == '${CLOUDRUN_SERVICE_NAME}'\"\n},\n\"goal\": 0.9\n}\n},\n\"config\": {\n\"backends\": {\n\"cloud_monitoring_mql\": {\n\"project_id\": \"${STACKDRIVER_HOST_PROJECT_ID}\"\n}\n},\n\"error_budget_policies\": {\n\"default\": {\n\"steps\": [\n{\n\"name\": \"3 hours\",\n\"burn_rate_threshold\": 9,\n\"alert\": false,\n\"window\": 10800,\n\"message_alert\": \"Page the SRE team to defend the SLO\",\n\"message_ok\": \"Last 3 hours on track\"\n}\n]\n}\n}\n}\n}\n}\n}\n]\n},\n\"method\": [\n{\n\"name\": \"inject-traffic-into-endpoint\",\n\"type\": \"action\",\n\"background\": true,\n\"provider\": {\n\"func\": \"inject_gradual_traffic_into_endpoint\",\n\"type\": \"python\",\n\"module\": \"chaosreliably.activities.load.actions\",\n\"arguments\": {\n\"endpoint\": \"${ENDPOINT}\",\n\"step_duration\": 30,\n\"test_duration\": 300,\n\"step_additional_vu\": 3,\n\"vu_per_second_rate\": 1,\n\"results_json_filepath\": \"./load-test-results.json\"\n}\n}\n}\n]\n}\n</code></pre> <p>This above example will get the last 5 Objective Results for our <code>Must be good</code> SLO and determine if they were all okay or whether we\u2019ve spent our error budget they are allowed.</p>"},{"location":"drivers/reliably/#as-controls","title":"As controls","text":"<p>You can use controls provided by <code>chaostoolkit-reliably</code> to track your experiments within Reliably. The block is inserted automatically by Reliably when you import the experiment into Reliably.</p>"},{"location":"drivers/reliably/#contribute","title":"Contribute","text":"<p>From a code perspective, if you wish to contribute, you will need to run a Python 3.6+ environment. Please, fork this project, write unit tests to cover the proposed changes, implement the changes, ensure they meet the formatting standards set out by <code>black</code>, <code>ruff</code>, <code>isort</code>, and <code>mypy</code>, add an entry into <code>CHANGELOG.md</code>, and then raise a PR to the repository for review</p> <p>Please refer to the formatting section for more information on the formatting standards.</p> <p>The Chaos Toolkit projects require all contributors must sign a Developer Certificate of Origin on each commit they would like to merge into the master branch of the repository. Please, make sure you can abide by the rules of the DCO before submitting a PR.</p>"},{"location":"drivers/reliably/#develop","title":"Develop","text":"<p>If you wish to develop on this project, make sure to install the development dependencies. First you will need to install globally pdm and create a virtual environment:</p> <pre><code>$ pdm create venv\n$ pdm use\n$ $(pdm venv activate)\n</code></pre> <p>Then install the dependencies:</p> <pre><code>$ pdm sync -d\n</code></pre>"},{"location":"drivers/reliably/#test","title":"Test","text":"<p>To run the tests for the project execute the following:</p> <pre><code>$ pdm run test\n</code></pre>"},{"location":"drivers/reliably/#formatting-and-linting","title":"Formatting and Linting","text":"<p>We use a combination of <code>black</code>, [<code>ruff</code>][flake8], <code>isort</code>, <code>mypy</code> and [<code>bandit</code>][] to both lint and format this repositories code.</p> <p>Before raising a Pull Request, we recommend you run formatting against your code with:</p> <pre><code>$ pmd run format\n</code></pre> <p>This will automatically format any code that doesn\u2019t adhere to the formatting standards.</p> <p>As some things are not picked up by the formatting, we also recommend you run:</p> <pre><code>$ pdm run lint\n</code></pre> <p>To ensure that any unused import statements/strings that are too long, etc. are also picked up. It will also provide you with any errors <code>mypy</code> picks up.</p>"},{"location":"drivers/reliably/#exported-controls","title":"Exported Controls","text":""},{"location":"drivers/reliably/#autopause","title":"autopause","text":"<p>This module exports controls covering the following phases of the execution of an experiment:</p> Level Before After Experiment Loading False False Experiment False False Steady-state Hypothesis False False Method False False Rollback False False Activities False False <p>In addition, the controls may define the followings:</p> Level Enabled Validate Control False Configure Control True Cleanup Control False <p>To use this control module, please add the following section to your experiment:</p> JSONYAML <pre><code>{\n\"controls\": [\n{\n\"name\": \"chaosreliably\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosreliably.controls.autopause\"\n}\n}\n]\n}\n</code></pre> <pre><code>controls:\n- name: chaosreliably\nprovider:\nmodule: chaosreliably.controls.autopause\ntype: python\n</code></pre> <p>This block may also be enabled at any other level (steady-state hypothesis or activity) to focus only on that level.</p> <p>When enabled at the experiment level, by default, all sub-levels are also applied unless you set the <code>automatic</code> properties to <code>false</code>.</p>"},{"location":"drivers/reliably/#chatgpt","title":"chatgpt","text":"<p>This module exports controls covering the following phases of the execution of an experiment:</p> Level Before After Experiment Loading False False Experiment False False Steady-state Hypothesis False False Method False False Rollback False False Activities False False <p>In addition, the controls may define the followings:</p> Level Enabled Validate Control False Configure Control True Cleanup Control False <p>To use this control module, please add the following section to your experiment:</p> JSONYAML <pre><code>{\n\"controls\": [\n{\n\"name\": \"chaosreliably\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosreliably.controls.chatgpt\"\n}\n}\n]\n}\n</code></pre> <pre><code>controls:\n- name: chaosreliably\nprovider:\nmodule: chaosreliably.controls.chatgpt\ntype: python\n</code></pre> <p>This block may also be enabled at any other level (steady-state hypothesis or activity) to focus only on that level.</p> <p>When enabled at the experiment level, by default, all sub-levels are also applied unless you set the <code>automatic</code> properties to <code>false</code>.</p>"},{"location":"drivers/reliably/#experiment","title":"experiment","text":"<p>This module exports controls covering the following phases of the execution of an experiment:</p> Level Before After Experiment Loading False False Experiment False False Steady-state Hypothesis False False Method False False Rollback False False Activities False False <p>In addition, the controls may define the followings:</p> Level Enabled Validate Control False Configure Control True Cleanup Control False <p>To use this control module, please add the following section to your experiment:</p> JSONYAML <pre><code>{\n\"controls\": [\n{\n\"name\": \"chaosreliably\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosreliably.controls.experiment\"\n}\n}\n]\n}\n</code></pre> <pre><code>controls:\n- name: chaosreliably\nprovider:\nmodule: chaosreliably.controls.experiment\ntype: python\n</code></pre> <p>This block may also be enabled at any other level (steady-state hypothesis or activity) to focus only on that level.</p> <p>When enabled at the experiment level, by default, all sub-levels are also applied unless you set the <code>automatic</code> properties to <code>false</code>.</p>"},{"location":"drivers/reliably/#prechecks","title":"prechecks","text":"<p>This module exports controls covering the following phases of the execution of an experiment:</p> Level Before After Experiment Loading False False Experiment False False Steady-state Hypothesis False False Method False False Rollback False False Activities False False <p>In addition, the controls may define the followings:</p> Level Enabled Validate Control False Configure Control True Cleanup Control False <p>To use this control module, please add the following section to your experiment:</p> JSONYAML <pre><code>{\n\"controls\": [\n{\n\"name\": \"chaosreliably\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosreliably.controls.prechecks\"\n}\n}\n]\n}\n</code></pre> <pre><code>controls:\n- name: chaosreliably\nprovider:\nmodule: chaosreliably.controls.prechecks\ntype: python\n</code></pre> <p>This block may also be enabled at any other level (steady-state hypothesis or activity) to focus only on that level.</p> <p>When enabled at the experiment level, by default, all sub-levels are also applied unless you set the <code>automatic</code> properties to <code>false</code>.</p>"},{"location":"drivers/reliably/#safeguard","title":"safeguard","text":"<p>This module exports controls covering the following phases of the execution of an experiment:</p> Level Before After Experiment Loading False False Experiment False False Steady-state Hypothesis False False Method False False Rollback False False Activities False False <p>In addition, the controls may define the followings:</p> Level Enabled Validate Control False Configure Control True Cleanup Control False <p>To use this control module, please add the following section to your experiment:</p> JSONYAML <pre><code>{\n\"controls\": [\n{\n\"name\": \"chaosreliably\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosreliably.controls.safeguard\"\n}\n}\n]\n}\n</code></pre> <pre><code>controls:\n- name: chaosreliably\nprovider:\nmodule: chaosreliably.controls.safeguard\ntype: python\n</code></pre> <p>This block may also be enabled at any other level (steady-state hypothesis or activity) to focus only on that level.</p> <p>When enabled at the experiment level, by default, all sub-levels are also applied unless you set the <code>automatic</code> properties to <code>false</code>.</p>"},{"location":"drivers/reliably/#exported-activities","title":"Exported Activities","text":""},{"location":"drivers/reliably/#gh","title":"gh","text":""},{"location":"drivers/reliably/#closed_pr_ratio","title":"<code>closed_pr_ratio</code>","text":"Type probe Module chaosreliably.activities.gh.probes Name closed_pr_ratio Return number <p>Computes a ratio of closed PRs during the given <code>window</code> in a <code>repo</code>.</p> <p>By default, only computes the ratio for PRs that were opened and closed during the given period. When <code>only_opened_and_closed_during_window</code> is not set, this computes the ratio for closed PRs in the period against all still opened PRs, whether they were opened before the period started or not.</p> <p>The former is a measure of latency for teams while the latter is more the throughput of the team.</p> <p>The <code>repo</code> should be given as <code>owner/repo</code> and the window should be given as a pattern like this: <code>&lt;int&gt;s|m|d|w</code> (seconds, minutes, days, weeks).</p> <p>Signature:</p> <pre><code>def closed_pr_ratio(repo: str,\n                    base: str = 'main',\n                    only_opened_and_closed_during_window: bool = True,\n                    window: str = '5d',\n                    configuration: Dict[str, Dict[str, str]] = None,\n                    secrets: Dict[str, Dict[str, str]] = None) -&gt; float:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required repo string Yes base string \u201cmain\u201d No only_opened_and_closed_during_window boolean true No window string \u201c5d\u201d No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"closed-pr-ratio\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosreliably.activities.gh.probes\",\n\"func\": \"closed_pr_ratio\",\n\"arguments\": {\n\"repo\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: closed-pr-ratio\nprovider:\narguments:\nrepo: ''\nfunc: closed_pr_ratio\nmodule: chaosreliably.activities.gh.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/reliably/#percentile_under","title":"<code>percentile_under</code>","text":"Type tolerance Module chaosreliably.activities.gh.tolerances Name percentile_under Return boolean <p>Computes that the values under <code>percentile</code> are below the given duration.</p> <p>For instance, for PR durations, this could be helpful to understand that 99% of them were closed in less than the given duration.</p> <pre><code>v = pr_duration(\"chaostoolkit/chaostoolkit\", \"master\", window=None)\np = percentile_under(0.99, duration=\"1d\", value=v)\n</code></pre> <p>Signature:</p> <pre><code>def percentile_under(percentile: float,\n                     duration: str = '1d',\n                     value: Optional[List[Union[int, float]]] = None) -&gt; bool:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required percentile number Yes duration string \u201c1d\u201d No value object null No <p>Tolerances declare the <code>value</code> argument which is automatically injected by Chaos Toolkit as the output of the probe they are evaluating.</p> <p>Usage:</p> JSONYAML <pre><code>{\n\"steady-state-hypothesis\": {\n\"title\": \"...\",\n\"probes\": [\n{\n\"type\": \"probe\",\n\"tolerance\": {\n\"name\": \"percentile-under\",\n\"type\": \"tolerance\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosreliably.activities.gh.tolerances\",\n\"func\": \"percentile_under\",\n\"arguments\": {\n\"percentile\": null\n}\n}\n},\n\"...\": \"...\"\n}\n]\n}\n}\n</code></pre> <pre><code>steady-state-hypothesis:\nprobes:\n- '...': '...'\ntolerance:\nname: percentile-under\nprovider:\narguments:\npercentile: null\nfunc: percentile_under\nmodule: chaosreliably.activities.gh.tolerances\ntype: python\ntype: tolerance\ntype: probe\ntitle: '...'\n</code></pre>"},{"location":"drivers/reliably/#pr_duration","title":"<code>pr_duration</code>","text":"Type probe Module chaosreliably.activities.gh.probes Name pr_duration Return list <p>Get a list of opened pull-requests durations.</p> <p>If you don\u2019t set a window (by setting <code>window</code> to <code>None</code>), then it returns the duration of all PRs that were ever opened in this repository. Otherwise, only return the durations for PRs that were opened or closed within that window.</p> <p>The <code>repo</code> should be given as <code>owner/repo</code> and the window should be given as a pattern like this: <code>&lt;int&gt;s|m|d|w</code> (seconds, minutes, days, weeks).</p> <p>Signature:</p> <pre><code>def pr_duration(repo: str,\n                base: str = 'main',\n                window: Optional[str] = '5d',\n                configuration: Dict[str, Dict[str, str]] = None,\n                secrets: Dict[str, Dict[str, str]] = None) -&gt; List[float]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required repo string Yes base string \u201cmain\u201d No window object \u201c5d\u201d No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"pr-duration\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosreliably.activities.gh.probes\",\n\"func\": \"pr_duration\",\n\"arguments\": {\n\"repo\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: pr-duration\nprovider:\narguments:\nrepo: ''\nfunc: pr_duration\nmodule: chaosreliably.activities.gh.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/reliably/#ratio_above","title":"<code>ratio_above</code>","text":"Type tolerance Module chaosreliably.activities.gh.tolerances Name ratio_above Return boolean <p>Validates the ratio returned by a probe is strictly greater than the <code>target</code>.</p> <p>Signature:</p> <pre><code>def ratio_above(target: float, value: float = 0.0) -&gt; bool:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required target number Yes value number 0.0 No <p>Tolerances declare the <code>value</code> argument which is automatically injected by Chaos Toolkit as the output of the probe they are evaluating.</p> <p>Usage:</p> JSONYAML <pre><code>{\n\"steady-state-hypothesis\": {\n\"title\": \"...\",\n\"probes\": [\n{\n\"type\": \"probe\",\n\"tolerance\": {\n\"name\": \"ratio-above\",\n\"type\": \"tolerance\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosreliably.activities.gh.tolerances\",\n\"func\": \"ratio_above\",\n\"arguments\": {\n\"target\": null\n}\n}\n},\n\"...\": \"...\"\n}\n]\n}\n}\n</code></pre> <pre><code>steady-state-hypothesis:\nprobes:\n- '...': '...'\ntolerance:\nname: ratio-above\nprovider:\narguments:\ntarget: null\nfunc: ratio_above\nmodule: chaosreliably.activities.gh.tolerances\ntype: python\ntype: tolerance\ntype: probe\ntitle: '...'\n</code></pre>"},{"location":"drivers/reliably/#ratio_above_or_equal","title":"<code>ratio_above_or_equal</code>","text":"Type tolerance Module chaosreliably.activities.gh.tolerances Name ratio_above_or_equal Return boolean <p>Validates the ratio returned by a probe is greater than the <code>target</code>.</p> <p>Signature:</p> <pre><code>def ratio_above_or_equal(target: float, value: float = 0.0) -&gt; bool:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required target number Yes value number 0.0 No <p>Tolerances declare the <code>value</code> argument which is automatically injected by Chaos Toolkit as the output of the probe they are evaluating.</p> <p>Usage:</p> JSONYAML <pre><code>{\n\"steady-state-hypothesis\": {\n\"title\": \"...\",\n\"probes\": [\n{\n\"type\": \"probe\",\n\"tolerance\": {\n\"name\": \"ratio-above-or-equal\",\n\"type\": \"tolerance\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosreliably.activities.gh.tolerances\",\n\"func\": \"ratio_above_or_equal\",\n\"arguments\": {\n\"target\": null\n}\n}\n},\n\"...\": \"...\"\n}\n]\n}\n}\n</code></pre> <pre><code>steady-state-hypothesis:\nprobes:\n- '...': '...'\ntolerance:\nname: ratio-above-or-equal\nprovider:\narguments:\ntarget: null\nfunc: ratio_above_or_equal\nmodule: chaosreliably.activities.gh.tolerances\ntype: python\ntype: tolerance\ntype: probe\ntitle: '...'\n</code></pre>"},{"location":"drivers/reliably/#ratio_under","title":"<code>ratio_under</code>","text":"Type tolerance Module chaosreliably.activities.gh.tolerances Name ratio_under Return boolean <p>Validates the ratio returned by a probe is strictly below the <code>target</code>.</p> <p>Signature:</p> <pre><code>def ratio_under(target: float, value: float = 0.0) -&gt; bool:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required target number Yes value number 0.0 No <p>Tolerances declare the <code>value</code> argument which is automatically injected by Chaos Toolkit as the output of the probe they are evaluating.</p> <p>Usage:</p> JSONYAML <pre><code>{\n\"steady-state-hypothesis\": {\n\"title\": \"...\",\n\"probes\": [\n{\n\"type\": \"probe\",\n\"tolerance\": {\n\"name\": \"ratio-under\",\n\"type\": \"tolerance\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosreliably.activities.gh.tolerances\",\n\"func\": \"ratio_under\",\n\"arguments\": {\n\"target\": null\n}\n}\n},\n\"...\": \"...\"\n}\n]\n}\n}\n</code></pre> <pre><code>steady-state-hypothesis:\nprobes:\n- '...': '...'\ntolerance:\nname: ratio-under\nprovider:\narguments:\ntarget: null\nfunc: ratio_under\nmodule: chaosreliably.activities.gh.tolerances\ntype: python\ntype: tolerance\ntype: probe\ntitle: '...'\n</code></pre>"},{"location":"drivers/reliably/#ratio_under_or_equal","title":"<code>ratio_under_or_equal</code>","text":"Type tolerance Module chaosreliably.activities.gh.tolerances Name ratio_under_or_equal Return boolean <p>Validates the ratio returned by a probe is below the <code>target</code>.</p> <p>Signature:</p> <pre><code>def ratio_under_or_equal(target: float, value: float = 0.0) -&gt; bool:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required target number Yes value number 0.0 No <p>Tolerances declare the <code>value</code> argument which is automatically injected by Chaos Toolkit as the output of the probe they are evaluating.</p> <p>Usage:</p> JSONYAML <pre><code>{\n\"steady-state-hypothesis\": {\n\"title\": \"...\",\n\"probes\": [\n{\n\"type\": \"probe\",\n\"tolerance\": {\n\"name\": \"ratio-under-or-equal\",\n\"type\": \"tolerance\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosreliably.activities.gh.tolerances\",\n\"func\": \"ratio_under_or_equal\",\n\"arguments\": {\n\"target\": null\n}\n}\n},\n\"...\": \"...\"\n}\n]\n}\n}\n</code></pre> <pre><code>steady-state-hypothesis:\nprobes:\n- '...': '...'\ntolerance:\nname: ratio-under-or-equal\nprovider:\narguments:\ntarget: null\nfunc: ratio_under_or_equal\nmodule: chaosreliably.activities.gh.tolerances\ntype: python\ntype: tolerance\ntype: probe\ntitle: '...'\n</code></pre>"},{"location":"drivers/reliably/#http","title":"http","text":""},{"location":"drivers/reliably/#measure_response_time","title":"<code>measure_response_time</code>","text":"Type probe Module chaosreliably.activities.http.probes Name measure_response_time Return number <p>Measure the response time of the GET request to the given URL.</p> <p>Signature:</p> <pre><code>def measure_response_time(url: str) -&gt; float:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required url string Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"measure-response-time\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosreliably.activities.http.probes\",\n\"func\": \"measure_response_time\",\n\"arguments\": {\n\"url\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: measure-response-time\nprovider:\narguments:\nurl: ''\nfunc: measure_response_time\nmodule: chaosreliably.activities.http.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/reliably/#response_time_must_be_under","title":"<code>response_time_must_be_under</code>","text":"Type tolerance Module chaosreliably.activities.http.tolerances Name response_time_must_be_under Return boolean <p>Validates the response time is under the given latency.</p> <p>Use this as the tolerance of the <code>chaosreliably.activities.http.probes.measure_response_time</code> probe.</p> <p>Signature:</p> <pre><code>def response_time_must_be_under(latency: float, value: float = 0.0) -&gt; bool:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required latency number Yes value number 0.0 No <p>Tolerances declare the <code>value</code> argument which is automatically injected by Chaos Toolkit as the output of the probe they are evaluating.</p> <p>Usage:</p> JSONYAML <pre><code>{\n\"steady-state-hypothesis\": {\n\"title\": \"...\",\n\"probes\": [\n{\n\"type\": \"probe\",\n\"tolerance\": {\n\"name\": \"response-time-must-be-under\",\n\"type\": \"tolerance\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosreliably.activities.http.tolerances\",\n\"func\": \"response_time_must_be_under\",\n\"arguments\": {\n\"latency\": null\n}\n}\n},\n\"...\": \"...\"\n}\n]\n}\n}\n</code></pre> <pre><code>steady-state-hypothesis:\nprobes:\n- '...': '...'\ntolerance:\nname: response-time-must-be-under\nprovider:\narguments:\nlatency: null\nfunc: response_time_must_be_under\nmodule: chaosreliably.activities.http.tolerances\ntype: python\ntype: tolerance\ntype: probe\ntitle: '...'\n</code></pre>"},{"location":"drivers/reliably/#load","title":"load","text":""},{"location":"drivers/reliably/#inject_gradual_traffic_into_endpoint","title":"<code>inject_gradual_traffic_into_endpoint</code>","text":"Type action Module chaosreliably.activities.load.actions Name inject_gradual_traffic_into_endpoint Return mapping <p>Load traffic into the given <code>endpoint</code>. Uses an approach that creates an incremental load into the endpoint rather than swarming it. The point of this action is to ensure your endpoint is active while you perform another action. This you means you likely want to run this action in the <code>background</code>.</p> <p>You may set a bearer token if your application uses one to authenticate. Pass <code>test_bearer_token</code> as a secret key in the <code>secrets</code> payload.</p> <p>This action return a dictionary payload of the load test results.</p> <p>Signature:</p> <pre><code>def inject_gradual_traffic_into_endpoint(\n        endpoint: str,\n        step_duration: int = 5,\n        step_additional_vu: int = 1,\n        vu_per_second_rate: int = 1,\n        test_duration: int = 30,\n        results_json_filepath: Optional[str] = None,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required endpoint string Yes step_duration integer 5 No step_additional_vu integer 1 No vu_per_second_rate integer 1 No test_duration integer 30 No results_json_filepath object null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"inject-gradual-traffic-into-endpoint\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosreliably.activities.load.actions\",\n\"func\": \"inject_gradual_traffic_into_endpoint\",\n\"arguments\": {\n\"endpoint\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: inject-gradual-traffic-into-endpoint\nprovider:\narguments:\nendpoint: ''\nfunc: inject_gradual_traffic_into_endpoint\nmodule: chaosreliably.activities.load.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/reliably/#load_test_result_field_should_be","title":"<code>load_test_result_field_should_be</code>","text":"Type probe Module chaosreliably.activities.load.probes Name load_test_result_field_should_be Return boolean <p>Reads a load test result and compares the field\u2019s value to the expected given value.</p> <p>If the load test runs against many endpoint, specify which one must be validated by setting the <code>result_item_name</code> to match the <code>name</code> field.</p> <p>Signature:</p> <pre><code>def load_test_result_field_should_be(\n        result_filepath: str,\n        field: str,\n        expect: int,\n        result_item_name: Optional[str] = None,\n        pass_if_file_is_missing: bool = True) -&gt; bool:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required result_filepath string Yes field string Yes expect integer Yes result_item_name object null No pass_if_file_is_missing boolean true No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"load-test-result-field-should-be\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosreliably.activities.load.probes\",\n\"func\": \"load_test_result_field_should_be\",\n\"arguments\": {\n\"result_filepath\": \"\",\n\"field\": \"\",\n\"expect\": 0\n}\n}\n}\n</code></pre> <pre><code>name: load-test-result-field-should-be\nprovider:\narguments:\nexpect: 0\nfield: ''\nresult_filepath: ''\nfunc: load_test_result_field_should_be\nmodule: chaosreliably.activities.load.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/reliably/#load_test_result_field_should_be_greater_than","title":"<code>load_test_result_field_should_be_greater_than</code>","text":"Type probe Module chaosreliably.activities.load.probes Name load_test_result_field_should_be_greater_than Return boolean <p>Reads a load test result and compares the field\u2019s value to greater than the expected given value.</p> <p>If the load test runs against many endpoint, specify which one must be validated by setting the <code>result_item_name</code> to match the <code>name</code> field.</p> <p>Signature:</p> <pre><code>def load_test_result_field_should_be_greater_than(\n        result_filepath: str,\n        field: str,\n        expect: int,\n        result_item_name: Optional[str] = None,\n        pass_if_file_is_missing: bool = True) -&gt; bool:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required result_filepath string Yes field string Yes expect integer Yes result_item_name object null No pass_if_file_is_missing boolean true No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"load-test-result-field-should-be-greater-than\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosreliably.activities.load.probes\",\n\"func\": \"load_test_result_field_should_be_greater_than\",\n\"arguments\": {\n\"result_filepath\": \"\",\n\"field\": \"\",\n\"expect\": 0\n}\n}\n}\n</code></pre> <pre><code>name: load-test-result-field-should-be-greater-than\nprovider:\narguments:\nexpect: 0\nfield: ''\nresult_filepath: ''\nfunc: load_test_result_field_should_be_greater_than\nmodule: chaosreliably.activities.load.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/reliably/#load_test_result_field_should_be_less_than","title":"<code>load_test_result_field_should_be_less_than</code>","text":"Type probe Module chaosreliably.activities.load.probes Name load_test_result_field_should_be_less_than Return boolean <p>Reads a load test result and compares the field\u2019s value to less than the expected given value.</p> <p>If the load test runs against many endpoint, specify which one must be validated by setting the <code>result_item_name</code> to match the <code>name</code> field.</p> <p>Signature:</p> <pre><code>def load_test_result_field_should_be_less_than(\n        result_filepath: str,\n        field: str,\n        expect: int,\n        result_item_name: Optional[str] = None,\n        pass_if_file_is_missing: bool = True) -&gt; bool:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required result_filepath string Yes field string Yes expect integer Yes result_item_name object null No pass_if_file_is_missing boolean true No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"load-test-result-field-should-be-less-than\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosreliably.activities.load.probes\",\n\"func\": \"load_test_result_field_should_be_less_than\",\n\"arguments\": {\n\"result_filepath\": \"\",\n\"field\": \"\",\n\"expect\": 0\n}\n}\n}\n</code></pre> <pre><code>name: load-test-result-field-should-be-less-than\nprovider:\narguments:\nexpect: 0\nfield: ''\nresult_filepath: ''\nfunc: load_test_result_field_should_be_less_than\nmodule: chaosreliably.activities.load.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/reliably/#activities","title":"activities","text":""},{"location":"drivers/reliably/#pause_execution","title":"<code>pause_execution</code>","text":"Type Module chaosreliably.activities.pauses Name pause_execution Return null <p>Pause the execution of the experiment until the resume state has been received.</p> <p>Signature:</p> <pre><code>def pause_execution(duration: int = 0,\n                    username: str = '',\n                    user_id: str = '') -&gt; None:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required duration integer 0 No username string \u201d\u201c No user_id string \u201d\u201c No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"pause-execution\",\n\"type\": \"\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosreliably.activities.pauses\",\n\"func\": \"pause_execution\"\n}\n}\n</code></pre> <pre><code>name: pause-execution\nprovider:\nfunc: pause_execution\nmodule: chaosreliably.activities.pauses\ntype: python\ntype: ''\n</code></pre>"},{"location":"drivers/reliably/#safeguard_1","title":"safeguard","text":""},{"location":"drivers/reliably/#call_endpoint","title":"<code>call_endpoint</code>","text":"Type probe Module chaosreliably.activities.safeguard.probes Name call_endpoint Return boolean <p>Signature:</p> <pre><code>def call_endpoint(url: str,\n                  auth: Optional[str] = None,\n                  configuration: Dict[str, Dict[str, str]] = None,\n                  secrets: Dict[str, Dict[str, str]] = None) -&gt; bool:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required url string Yes auth object null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"call-endpoint\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosreliably.activities.safeguard.probes\",\n\"func\": \"call_endpoint\",\n\"arguments\": {\n\"url\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: call-endpoint\nprovider:\narguments:\nurl: ''\nfunc: call_endpoint\nmodule: chaosreliably.activities.safeguard.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/reliably/#slo","title":"slo","text":""},{"location":"drivers/reliably/#compute_slo","title":"<code>compute_slo</code>","text":"Type probe Module chaosreliably.activities.slo.probes Name compute_slo Return list <p>Computes the given SLO and return a list of outcomes for each error budget policies in the <code>config</code>.</p> <p>This is a wrapper around https://github.com/google/slo-generator so all of its documentation applies for the definition of the <code>slo</code> and <code>config</code> objects. The former contains the the SLO description while the latter describes where to source SLIs from and the error budget policies.</p> <p>The most notable difference is that we disable any exporters so there is no need to define them in your objects.</p> <p>Signature:</p> <pre><code>def compute_slo(\n        slo: Dict[str, Any],\n        config: Dict[str, Any],\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; List[Dict[str, Any]]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required slo mapping Yes config mapping Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"compute-slo\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosreliably.activities.slo.probes\",\n\"func\": \"compute_slo\",\n\"arguments\": {\n\"slo\": {},\n\"config\": {}\n}\n}\n}\n</code></pre> <pre><code>name: compute-slo\nprovider:\narguments:\nconfig: {}\nslo: {}\nfunc: compute_slo\nmodule: chaosreliably.activities.slo.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/reliably/#has_error_budget_left","title":"<code>has_error_budget_left</code>","text":"Type tolerance Module chaosreliably.activities.slo.tolerances Name has_error_budget_left Return boolean <p>Signature:</p> <pre><code>def has_error_budget_left(name: str,\n                          value: Optional[List[Dict[str,\n                                                    Any]]] = None) -&gt; bool:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required name string Yes value object null No <p>Tolerances declare the <code>value</code> argument which is automatically injected by Chaos Toolkit as the output of the probe they are evaluating.</p> <p>Usage:</p> JSONYAML <pre><code>{\n\"steady-state-hypothesis\": {\n\"title\": \"...\",\n\"probes\": [\n{\n\"type\": \"probe\",\n\"tolerance\": {\n\"name\": \"has-error-budget-left\",\n\"type\": \"tolerance\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosreliably.activities.slo.tolerances\",\n\"func\": \"has_error_budget_left\",\n\"arguments\": {\n\"name\": \"\"\n}\n}\n},\n\"...\": \"...\"\n}\n]\n}\n}\n</code></pre> <pre><code>steady-state-hypothesis:\nprobes:\n- '...': '...'\ntolerance:\nname: has-error-budget-left\nprovider:\narguments:\nname: ''\nfunc: has_error_budget_left\nmodule: chaosreliably.activities.slo.tolerances\ntype: python\ntype: tolerance\ntype: probe\ntitle: '...'\n</code></pre>"},{"location":"drivers/reliably/#tls","title":"tls","text":""},{"location":"drivers/reliably/#expire_in_more_than","title":"<code>expire_in_more_than</code>","text":"Type tolerance Module chaosreliably.activities.tls.tolerances Name expire_in_more_than Return boolean <p>Verifies that the certificate expires in more than the given duration.</p> <p>The <code>duration</code> is expressed as followed:  where  is one of <code>\"s\"</code>, <code>\"m\"</code>, <code>\"d\"</code> or <code>\"w\"</code>. For example, in more than a week can be expressed as <code>\"7d\"</code> or <code>\"1w\"</code>. <p>Signature:</p> <pre><code>def expire_in_more_than(duration: str = '7d',\n                        value: Optional[Dict[str, Any]] = None) -&gt; bool:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required duration string \u201c7d\u201d No value object null No <p>Tolerances declare the <code>value</code> argument which is automatically injected by Chaos Toolkit as the output of the probe they are evaluating.</p> <p>Usage:</p> JSONYAML <pre><code>{\n\"steady-state-hypothesis\": {\n\"title\": \"...\",\n\"probes\": [\n{\n\"type\": \"probe\",\n\"tolerance\": {\n\"name\": \"expire-in-more-than\",\n\"type\": \"tolerance\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosreliably.activities.tls.tolerances\",\n\"func\": \"expire_in_more_than\"\n}\n},\n\"...\": \"...\"\n}\n]\n}\n}\n</code></pre> <pre><code>steady-state-hypothesis:\nprobes:\n- '...': '...'\ntolerance:\nname: expire-in-more-than\nprovider:\nfunc: expire_in_more_than\nmodule: chaosreliably.activities.tls.tolerances\ntype: python\ntype: tolerance\ntype: probe\ntitle: '...'\n</code></pre>"},{"location":"drivers/reliably/#get_certificate_info","title":"<code>get_certificate_info</code>","text":"Type probe Module chaosreliably.activities.tls.probes Name get_certificate_info Return mapping <p>Extract certificate information from the remote connection.</p> <p>Signature:</p> <pre><code>def get_certificate_info(host: str, port: int = 443) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required host string Yes port integer 443 No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"get-certificate-info\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosreliably.activities.tls.probes\",\n\"func\": \"get_certificate_info\",\n\"arguments\": {\n\"host\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: get-certificate-info\nprovider:\narguments:\nhost: ''\nfunc: get_certificate_info\nmodule: chaosreliably.activities.tls.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/reliably/#has_fingerprint","title":"<code>has_fingerprint</code>","text":"Type tolerance Module chaosreliably.activities.tls.tolerances Name has_fingerprint Return boolean <p>Validate the fingerprint of the certificate. The hash is one of <code>\"md5\"</code>, <code>\"sha1\"</code> or <code>\"sha256\"</code>.</p> <p>Signature:</p> <pre><code>def has_fingerprint(fingerprint: str,\n                    hash: str = 'sha256',\n                    value: Optional[Dict[str, Any]] = None) -&gt; bool:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required fingerprint string Yes hash string \u201csha256\u201d No value object null No <p>Tolerances declare the <code>value</code> argument which is automatically injected by Chaos Toolkit as the output of the probe they are evaluating.</p> <p>Usage:</p> JSONYAML <pre><code>{\n\"steady-state-hypothesis\": {\n\"title\": \"...\",\n\"probes\": [\n{\n\"type\": \"probe\",\n\"tolerance\": {\n\"name\": \"has-fingerprint\",\n\"type\": \"tolerance\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosreliably.activities.tls.tolerances\",\n\"func\": \"has_fingerprint\",\n\"arguments\": {\n\"fingerprint\": \"\"\n}\n}\n},\n\"...\": \"...\"\n}\n]\n}\n}\n</code></pre> <pre><code>steady-state-hypothesis:\nprobes:\n- '...': '...'\ntolerance:\nname: has-fingerprint\nprovider:\narguments:\nfingerprint: ''\nfunc: has_fingerprint\nmodule: chaosreliably.activities.tls.tolerances\ntype: python\ntype: tolerance\ntype: probe\ntitle: '...'\n</code></pre>"},{"location":"drivers/reliably/#has_subject_alt_names","title":"<code>has_subject_alt_names</code>","text":"Type tolerance Module chaosreliably.activities.tls.tolerances Name has_subject_alt_names Return boolean <p>Validates the certficate covers at least the given list of alternative names. If <code>strict</code> is set, then the list of exported names must be exactly the provided ones.</p> <p>Signature:</p> <pre><code>def has_subject_alt_names(alt_names: List[str],\n                          strict: bool = True,\n                          value: Optional[Dict[str, Any]] = None) -&gt; bool:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required alt_names list Yes strict boolean true No value object null No <p>Tolerances declare the <code>value</code> argument which is automatically injected by Chaos Toolkit as the output of the probe they are evaluating.</p> <p>Usage:</p> JSONYAML <pre><code>{\n\"steady-state-hypothesis\": {\n\"title\": \"...\",\n\"probes\": [\n{\n\"type\": \"probe\",\n\"tolerance\": {\n\"name\": \"has-subject-alt-names\",\n\"type\": \"tolerance\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosreliably.activities.tls.tolerances\",\n\"func\": \"has_subject_alt_names\",\n\"arguments\": {\n\"alt_names\": []\n}\n}\n},\n\"...\": \"...\"\n}\n]\n}\n}\n</code></pre> <pre><code>steady-state-hypothesis:\nprobes:\n- '...': '...'\ntolerance:\nname: has-subject-alt-names\nprovider:\narguments:\nalt_names: []\nfunc: has_subject_alt_names\nmodule: chaosreliably.activities.tls.tolerances\ntype: python\ntype: tolerance\ntype: probe\ntitle: '...'\n</code></pre>"},{"location":"drivers/reliably/#is_issued_by","title":"<code>is_issued_by</code>","text":"Type tolerance Module chaosreliably.activities.tls.tolerances Name is_issued_by Return boolean <p>Validate the issue of the certificate.</p> <p>Signature:</p> <pre><code>def is_issued_by(issuer: str, value: Optional[Dict[str, Any]] = None) -&gt; bool:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required issuer string Yes value object null No <p>Tolerances declare the <code>value</code> argument which is automatically injected by Chaos Toolkit as the output of the probe they are evaluating.</p> <p>Usage:</p> JSONYAML <pre><code>{\n\"steady-state-hypothesis\": {\n\"title\": \"...\",\n\"probes\": [\n{\n\"type\": \"probe\",\n\"tolerance\": {\n\"name\": \"is-issued-by\",\n\"type\": \"tolerance\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosreliably.activities.tls.tolerances\",\n\"func\": \"is_issued_by\",\n\"arguments\": {\n\"issuer\": \"\"\n}\n}\n},\n\"...\": \"...\"\n}\n]\n}\n}\n</code></pre> <pre><code>steady-state-hypothesis:\nprobes:\n- '...': '...'\ntolerance:\nname: is-issued-by\nprovider:\narguments:\nissuer: ''\nfunc: is_issued_by\nmodule: chaosreliably.activities.tls.tolerances\ntype: python\ntype: tolerance\ntype: probe\ntitle: '...'\n</code></pre>"},{"location":"drivers/reliably/#verify_tls_cert","title":"<code>verify_tls_cert</code>","text":"Type tolerance Module chaosreliably.activities.tls.tolerances Name verify_tls_cert Return boolean <p>Performs a range of checks on the certificate of the remote endpoint:</p> <ul> <li>that we are beyond a certain duration of the certificate expiricy date</li> <li>that the certificate exports the right alternative names</li> <li>the fingerprint of the certificate</li> <li>the certificate was issued by the right issuer</li> </ul> <p>If any of these values is not set (the default), the according check is not performed. This doesn\u2019t apply to the expiration date which is always checked.</p> <p>Signature:</p> <pre><code>def verify_tls_cert(expire_after: str = '7d',\n                    alt_names: Optional[List[str]] = None,\n                    fingerprint_sha256: Optional[str] = None,\n                    issuer: Optional[str] = None,\n                    value: Optional[Dict[str, Any]] = None) -&gt; bool:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required expire_after string \u201c7d\u201d No alt_names object null No fingerprint_sha256 object null No issuer object null No value object null No <p>Tolerances declare the <code>value</code> argument which is automatically injected by Chaos Toolkit as the output of the probe they are evaluating.</p> <p>Usage:</p> JSONYAML <pre><code>{\n\"steady-state-hypothesis\": {\n\"title\": \"...\",\n\"probes\": [\n{\n\"type\": \"probe\",\n\"tolerance\": {\n\"name\": \"verify-tls-cert\",\n\"type\": \"tolerance\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosreliably.activities.tls.tolerances\",\n\"func\": \"verify_tls_cert\"\n}\n},\n\"...\": \"...\"\n}\n]\n}\n}\n</code></pre> <pre><code>steady-state-hypothesis:\nprobes:\n- '...': '...'\ntolerance:\nname: verify-tls-cert\nprovider:\nfunc: verify_tls_cert\nmodule: chaosreliably.activities.tls.tolerances\ntype: python\ntype: tolerance\ntype: probe\ntitle: '...'\n</code></pre>"},{"location":"drivers/reliably/#controls","title":"controls","text":""},{"location":"drivers/service-fabric/","title":"Extension <code>chaosservicefabric</code>","text":"Version 0.2.0 Repository https://github.com/chaostoolkit-incubator/chaostoolkit-service-fabric <p>This project is a collection of actions and probes, gathered as an extension to the Chaos Toolkit. It targets the Microsoft Service Fabric platform.</p>"},{"location":"drivers/service-fabric/#install","title":"Install","text":"<p>This package requires Python 3.5+</p> <p>To be used from your experiment, this package must be installed in the Python environment where chaostoolkit already lives.</p> <pre><code>$ pip install -U chaostoolkit-service-fabric\n</code></pre>"},{"location":"drivers/service-fabric/#usage","title":"Usage","text":"<p>To use the probes and actions from this package, add the following to your experiment file:</p> <pre><code>{\n\"type\": \"action\",\n\"name\": \"start-service-factory-chaos\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosservicefabric.factory.actions\",\n\"func\": \"start_chaos\",\n\"secrets\": [\"azure\"],\n\"arguments\": {\n\"parameters\": {\n\"TimeToRunInSeconds\": 45\n}\n}\n}\n},\n{\n\"type\": \"action\",\n\"name\": \"stop-service-factory-chaos\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosservicefabric.factory.actions\",\n\"func\": \"stop_chaos\",\n\"secrets\": [\"azure\"]\n}\n}\n</code></pre> <p>The parameters are straight from the Service Fabric API.</p> <p>That\u2019s it!</p> <p>Please explore the code to see existing probes and actions.</p>"},{"location":"drivers/service-fabric/#configuration","title":"Configuration","text":""},{"location":"drivers/service-fabric/#credentials","title":"Credentials","text":"<p>This extension uses the requests library under the hood. The requests library expects that you have a PFX certificate, converted as to the PEM format, that allows you to  authenticate with the Service Factory endpoint.</p> <p>Generally speaking, there are two ways of doing this:</p> <ul> <li>you have created a configuration file where you will run the   experiment from (so with a <code>~/.sfctl/config</code> file)</li> <li> <p>you explicitly pass the correct environment variables to the experiment   definition as follows:</p> <p>Configuration section:</p> <pre><code>{\n\"endpoint\": \"https://XYZ.westus.cloudapp.azure.com:19080\",\n\"verify_tls\": false,\n\"use_ca\": false\n}\n</code></pre> <p>Secrets section:</p> <pre><code>{\n\"azure\": {\n\"security\": \"pem\",\n\"pem_path\": \"./cluster-client-cert.pem\"\n}\n}\n</code></pre> <p>The PEM can also be passed as an environment variable:</p> <pre><code>{\n\"azure\": {\n\"security\": \"pem\",\n\"pem_content\": {\n\"type\": \"env\",\n\"key\": \"AZURE_PEM\"\n}\n}\n}\n</code></pre> <p>The environment variable name can be anything.</p> </li> </ul>"},{"location":"drivers/service-fabric/#putting-it-all-together","title":"Putting it all together","text":"<p>Here is a full example:</p> <pre><code>{\n\"version\": \"1.0.0\",\n\"title\": \"...\",\n\"description\": \"...\",\n\"configuration\": {\n\"endpoint\": \"https://XYZ.westus.cloudapp.azure.com:19080\",\n\"verify_tls\": false,\n\"use_ca\": false\n},\n\"secrets\": {\n\"azure\": {\n\"security\": \"pem\",\n\"pem_path\": \"./cluster-client-cert.pem\"\n}\n},\n\"steady-state-hypothesis\": {\n\"title\": \"Services is healthy\",\n\"probes\": [\n{\n\"type\": \"probe\",\n\"name\": \"application-must-respond\",\n\"tolerance\": 200,\n\"provider\": {\n\"type\": \"http\",\n\"verify_tls\": false,\n\"url\": \"https://some-url-in-cluster/\"\n}\n}\n]\n},\n\"method\": [\n{\n\"type\": \"action\",\n\"name\": \"start-service-factory-chaos\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosservicefabric.factory.actions\",\n\"func\": \"start_chaos\",\n\"secrets\": [\"azure\"],\n\"arguments\": {\n\"parameters\": {\n\"TimeToRunInSeconds\": 45\n}\n}\n},\n\"pauses\": {\n\"after\": 30\n}\n},\n{\n\"type\": \"probe\",\n\"ref\": \"application-must-respond\"\n},\n{\n\"type\": \"action\",\n\"name\": \"stop-service-factory-chaos\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosservicefabric.factory.actions\",\n\"func\": \"stop_chaos\",\n\"secrets\": [\"azure\"]\n},\n\"pauses\": {\n\"after\": 5\n}\n},\n{\n\"type\": \"probe\",\n\"name\": \"get-service-factory-chaos-report\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosservicefabric.factory.probes\",\n\"func\": \"chaos_report\",\n\"secrets\": [\"azure\"],\n\"arguments\": {\n\"start_time_utc\": \"1 minute ago\",\n\"end_time_utc\": \"now\"\n}\n}\n}\n]\n}\n</code></pre>"},{"location":"drivers/service-fabric/#contribute","title":"Contribute","text":"<p>If you wish to contribute more functions to this package, you are more than welcome to do so. Please, fork this project, make your changes following the usual PEP 8 code style, sprinkling with tests and submit a PR for review.</p> <p>The Chaos Toolkit projects require all contributors must sign a Developer Certificate of Origin on each commit they would like to merge into the master branch of the repository. Please, make sure you can abide by the rules of the DCO before submitting a PR.</p>"},{"location":"drivers/service-fabric/#develop","title":"Develop","text":"<p>If you wish to develop on this project, make sure to install the development dependencies. But first, create a virtual environment and then install those dependencies.</p> <pre><code>$ pip install -r requirements-dev.txt -r requirements.txt </code></pre> <p>Then, point your environment to this directory:</p> <pre><code>$ python setup.py develop\n</code></pre> <p>Now, you can edit the files and they will be automatically be seen by your environment, even when running from the <code>chaos</code> command locally.</p>"},{"location":"drivers/service-fabric/#test","title":"Test","text":"<p>To run the tests for the project execute the following:</p> <pre><code>$ pytest\n</code></pre>"},{"location":"drivers/service-fabric/#exported-activities","title":"Exported Activities","text":""},{"location":"drivers/service-fabric/#cluster","title":"cluster","text":""},{"location":"drivers/service-fabric/#chaos_report","title":"<code>chaos_report</code>","text":"Type probe Module chaosservicefabric.cluster.probes Name chaos_report Return mapping <p>Get Chaos report using following the Service Fabric API:</p> <p>https://docs.microsoft.com/en-us/rest/api/servicefabric/sfclient-model-chaosparameters</p> <p>Please see the :func:<code>chaosazure.fabric.auth</code> help for more information on authenticating with the service.</p> <p>Signature:</p> <pre><code>def chaos_report(timeout: int = 60,\n                 start_time_utc: str = None,\n                 end_time_utc: str = None,\n                 configuration: Dict[str, Dict[str, str]] = None,\n                 secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required timeout integer 60 No start_time_utc string null No end_time_utc string null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"chaos-report\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosservicefabric.cluster.probes\",\n\"func\": \"chaos_report\"\n}\n}\n</code></pre> <pre><code>name: chaos-report\nprovider:\nfunc: chaos_report\nmodule: chaosservicefabric.cluster.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/service-fabric/#start_chaos","title":"<code>start_chaos</code>","text":"Type action Module chaosservicefabric.cluster.actions Name start_chaos Return mapping <p>Start Chaos in your cluster using the given <code>parameters</code>. This is a mapping of keys as declared in the Service Fabric API:</p> <p>https://docs.microsoft.com/en-us/rest/api/servicefabric/sfclient-model-chaosparameters</p> <p>Please see the :func:<code>chaosservicefabric.fabric.auth</code> help for more information on authenticating with the service.</p> <p>Signature:</p> <pre><code>def start_chaos(parameters: Dict[str, Any],\n                timeout: int = 60,\n                configuration: Dict[str, Dict[str, str]] = None,\n                secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required parameters mapping Yes timeout integer 60 No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"start-chaos\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosservicefabric.cluster.actions\",\n\"func\": \"start_chaos\",\n\"arguments\": {\n\"parameters\": {}\n}\n}\n}\n</code></pre> <pre><code>name: start-chaos\nprovider:\narguments:\nparameters: {}\nfunc: start_chaos\nmodule: chaosservicefabric.cluster.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/service-fabric/#stop_chaos","title":"<code>stop_chaos</code>","text":"Type action Module chaosservicefabric.cluster.actions Name stop_chaos Return mapping <p>Stop Chaos in your cluster.</p> <p>Please see the :func:<code>chaosservicefabric.fabric.auth</code> help for more information on authenticating with the service.</p> <p>Signature:</p> <pre><code>def stop_chaos(timeout: int = 60,\n               configuration: Dict[str, Dict[str, str]] = None,\n               secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required timeout integer 60 No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"stop-chaos\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosservicefabric.cluster.actions\",\n\"func\": \"stop_chaos\"\n}\n}\n</code></pre> <pre><code>name: stop-chaos\nprovider:\nfunc: stop_chaos\nmodule: chaosservicefabric.cluster.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/slack/","title":"Extension <code>chaosslack</code>","text":"Version 0.5.7 Repository https://github.com/chaostoolkit-incubator/chaostoolkit-slack <p>This project is an extension for the Chaos Toolkit to target Slack.</p>"},{"location":"drivers/slack/#install","title":"Install","text":"<p>This package requires Python 3.7+</p> <p>To be used from your experiment, this package must be installed in the Python environment where chaostoolkit already lives.</p> <pre><code>$ pip install -U chaostoolkit-slack\n</code></pre>"},{"location":"drivers/slack/#slack-app","title":"Slack App","text":"<p>To use this extension, you need to create a Slack app in your workspace. Please follow the Slack documentation to create a basic app:</p> <p>https://api.slack.com/apps?new_app=1 https://api.slack.com/tutorials</p> <p>You can start from this manifest if you want:</p> <pre><code>display_information:\nname: Chaos Toolkit events\nlong_description: Get live feedback information of all your Chaos Engineering\nexperiments executed from Chaos Toolkit. See which experiments deviated and\ninvestigate their logs directly from a Slack thread.\ndescription: Chaos Engineering experiments live events from Chaos Toolkit.\nbackground_color: \"#ffffff\"\nsettings:\norg_deploy_enabled: false\nsocket_mode_enabled: false\nis_hosted: false\ntoken_rotation_enabled: false\nfeatures:\nbot_user:\ndisplay_name: chaostoolkit\noauth_config:\nscopes:\nbot:\n- channels:read\n- chat:write\n- files:write\n</code></pre> <p>Once your application is created, you may want to set the Chaos Toolkit logo to clarify to your users where these messages come from.</p>"},{"location":"drivers/slack/#slack-token","title":"Slack Token","text":"<p>Please follow the procedure on Slack to create a token suitable for API calls made using the Python client. The token should start with <code>xoxb-</code>. You can find the token in your app settings under the <code>OAuth &amp; Permissions</code> page.</p> <p>The token should have at least the following scopes:</p> <p><code>channels:read</code>, <code>chat:write</code> and <code>files:write</code></p>"},{"location":"drivers/slack/#install-your-slack-app","title":"Install your Slack app","text":"<p>Once created, you need to install the app in your workspace and invite it in any channel you wish to send events to. This channel will also have to be part specified as a controls argument (see below).</p> <p>Now you should be good to go!</p>"},{"location":"drivers/slack/#usage","title":"Usage","text":"<p>Currently, this extension only provides a control to send Chaos Toolkit events to Slack channels.</p> <p>To use this extension, add the following to your experiment (or settings):</p> <pre><code>\"secrets\": {\n\"slack\": {\n\"token\": \"xoxb-...\"\n}\n},\n\"controls\": [\n{\n\"name\": \"slack\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosslack.control\",\n\"secrets\": [\"slack\"],\n\"arguments\": {\n\"channel\": \"general\"\n}\n}\n}\n]\n</code></pre>"},{"location":"drivers/slack/#contribute","title":"Contribute","text":"<p>If you wish to contribute more functions to this package, you are more than welcome to do so. Please fork this project, make your changes following the usual PEP 8 code style, add appropriate tests and submit a PR for review.</p> <p>The Chaos Toolkit projects require all contributors must sign a Developer Certificate of Origin on each commit they would like to merge into the master branch of the repository. Please, make sure you can abide by the rules of the DCO before submitting a PR.</p>"},{"location":"drivers/slack/#develop","title":"Develop","text":"<p>If you wish to develop on this project, make sure to install the development dependencies. But first, create a virtual environment and then install those dependencies.</p> <pre><code>$ pip install -r requirements-dev.txt -r requirements.txt\n</code></pre> <p>Then, point your environment to this directory:</p> <pre><code>$ pip install -e .\n</code></pre> <p>Now, you can edit the files and they will be automatically be seen by your environment, even when running from the <code>chaos</code> command locally.</p> <p>To run the tests for the project execute the following:</p> <pre><code>$ pytest\n</code></pre>"},{"location":"drivers/slack/#exported-controls","title":"Exported Controls","text":""},{"location":"drivers/slack/#control","title":"control","text":"<p>This module exports controls covering the following phases of the execution of an experiment:</p> Level Before After Experiment Loading False True Experiment True True Steady-state Hypothesis True True Method True False Rollback True True Activities True True <p>In addition, the controls may define the followings:</p> Level Enabled Validate Control False Configure Control False Cleanup Control False <p>To use this control module, please add the following section to your experiment:</p> JSONYAML <pre><code>{\n\"controls\": [\n{\n\"name\": \"chaosslack\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosslack.control\"\n}\n}\n]\n}\n</code></pre> <pre><code>controls:\n- name: chaosslack\nprovider:\nmodule: chaosslack.control\ntype: python\n</code></pre> <p>This block may also be enabled at any other level (steady-state hypothesis or activity) to focus only on that level.</p> <p>When enabled at the experiment level, by default, all sub-levels are also applied unless you set the <code>automatic</code> properties to <code>false</code>.</p>"},{"location":"drivers/slack/#exported-activities","title":"Exported Activities","text":""},{"location":"drivers/slack/#control_1","title":"control","text":""},{"location":"drivers/slack/#notification","title":"notification","text":""},{"location":"drivers/slack/#notify","title":"<code>notify</code>","text":"Type Module chaosslack.notification Name notify Return None <p>Send a chat message to a channel to relate this Chaos Toolkit event.</p> <p>The settings must contain:</p> <ul> <li><code>\"token\"</code>: a slack API token</li> <li><code>\"channel\"</code>: the channel where to send this event notification</li> </ul> <p>If one of these two attributes is missing, no notification is sent.</p> <p>Signature:</p> <pre><code>def notify(settings: Dict[str, Any], event: Dict[str, Any]):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required settings mapping Yes event mapping Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"notify\",\n\"type\": \"\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosslack.notification\",\n\"func\": \"notify\",\n\"arguments\": {\n\"settings\": {},\n\"event\": {}\n}\n}\n}\n</code></pre> <pre><code>name: notify\nprovider:\narguments:\nevent: {}\nsettings: {}\nfunc: notify\nmodule: chaosslack.notification\ntype: python\ntype: ''\n</code></pre>"},{"location":"drivers/spring/","title":"Extension <code>chaosspring</code>","text":"Version 0.3.2 Repository https://github.com/chaostoolkit-incubator/chaostoolkit-spring <p>This project is a collection of actions and probes, gathered as an extension to the Chaos Toolkit.</p>"},{"location":"drivers/spring/#install","title":"Install","text":"<p>This package requires Python 3.6+</p> <p>To be used from your experiment, this package must be installed in the Python environment where chaostoolkit already lives.</p> <pre><code>$ pip install -U chaostoolkit-spring\n</code></pre>"},{"location":"drivers/spring/#usage","title":"Usage","text":"<p>Currently this driver supports interactions with a Spring Boot-based service that has included the 2.0.0.-SNAPSHOT release of the Chaos Monkey for Spring Boot. This snapshot includes the necessary Spring Boot Actuator HTTP endpoints so that the Chaos Toolkit to interact with the chaos features at runtime.</p> <p>Once you have added the Chaos Monkey for Spring Boot and enabled the Spring Boot Actuator HTTP endpoints you can then use the probes and actions from this driver.</p> <p>To use the probes and actions from this package, add the following to your experiment file:</p> <pre><code>{\n\"name\": \"enable_chaosmonkey\",\n\"provider\": {\n\"arguments\": {\n\"base_url\": \"http://localhost:8080/actuator\"\n},\n\"func\": \"enable_chaosmonkey\",\n\"module\": \"chaosspring.actions\",\n\"type\": \"python\"\n},\n\"type\": \"action\"\n}\n</code></pre> <p>This will interact with the specified service and enable the Chaos Monkey features. You can also turn off the Chaos Monkey if you wish by specifying the following action:</p> <pre><code>{\n\"name\": \"disable_chaosmonkey\",\n\"provider\": {\n\"arguments\": {\n\"base_url\": \"http://localhost:8080/actuator\"\n},\n\"func\": \"disable_chaosmonkey\",\n\"module\": \"chaosspring.actions\",\n\"type\": \"python\"\n},\n\"type\": \"action\"\n}\n</code></pre> <p>You can then manipulate the Chaos Monkey assaults active on your service by specifing the following action:</p> <pre><code>{\n\"name\": \"configure_assaults\",\n\"provider\": {\n\"arguments\": {\n\"base_url\": \"http://localhost:8080/actuator\",\n\"assaults_configuration\": {\n\"level\": 5,\n\"latencyRangeStart\": 2000,\n\"latencyRangeEnd\": 5000,\n\"latencyActive\": false,\n\"exceptionsActive\": false,\n\"killApplicationActive\": true,\n\"restartApplicationActive\": false\n}\n},\n\"func\": \"change_assaults_configuration\",\n\"module\": \"chaosspring.actions\",\n\"type\": \"python\"\n},\n\"type\": \"action\"\n}\n</code></pre> <p>That\u2019s it!</p> <p>Please explore the code to use further probes and actions.</p>"},{"location":"drivers/spring/#ssl-verification","title":"SSL Verification","text":"<p>If you do not wish to have SSL Verification performed during your actions/probes then you can pass the argument <code>\"verify_ssl\": false</code> to the individual activities.</p> <p>If you wish to provide a <code>CA_BUNDLE</code> or directory of trusted CAs certificates, provide the environment variables specified in the <code>requests</code> documentation here: Requests SSL Cert Verification.</p>"},{"location":"drivers/spring/#contribute","title":"Contribute","text":"<p>If you wish to contribute more functions to this package, you are more than welcome to do so. Please, fork this project, write unit tests to cover the proposed changes, implement the changes, ensure they meet the formatting standards set out by <code>black</code>, <code>flake8</code>, and <code>isort</code>, and then raise a PR to the repository for review.</p> <p>Please refer to the formatting section for more information on the formatting standards.</p> <p>The Chaos Toolkit projects require all contributors must sign a Developer Certificate of Origin on each commit they would like to merge into the master branch of the repository. Please, make sure you can abide by the rules of the DCO before submitting a PR.</p>"},{"location":"drivers/spring/#develop","title":"Develop","text":"<p>If you wish to develop on this project, make sure to install the development dependencies. But first, create a virtual environment and then install those dependencies.</p> <pre><code>$ make install-dev\n</code></pre> <p>Now, you can edit the files and they will be automatically be seen by your environment, even when running from the <code>chaos</code> command locally.</p>"},{"location":"drivers/spring/#tests","title":"Tests","text":"<p>To run the tests for the project execute the following:</p> <pre><code>$ make tests\n</code></pre>"},{"location":"drivers/spring/#formatting-and-linting","title":"Formatting and Linting","text":"<p>We use a combination of <code>black</code>, <code>flake8</code>, and <code>isort</code> to both lint and format this repositories code.</p> <p>Before raising a Pull Request, we recommend you run formatting against your code with:</p> <pre><code>$ make format\n</code></pre> <p>This will automatically format any code that doesn\u2019t adhere to the formatting standards.</p> <p>As some things are not picked up by the formatting, we also recommend you run:</p> <pre><code>$ make lint\n</code></pre> <p>To ensure that any unused import statements/strings that are too long, etc. are also picked up.</p>"},{"location":"drivers/spring/#exported-activities","title":"Exported Activities","text":""},{"location":"drivers/spring/#actions","title":"actions","text":""},{"location":"drivers/spring/#change_assaults_configuration","title":"<code>change_assaults_configuration</code>","text":"Type action Module chaosspring.actions Name change_assaults_configuration Return string <p>Change Assaults configuration on a specific service.</p> <p>Signature:</p> <pre><code>def change_assaults_configuration(\n        base_url: str,\n        assaults_configuration: Dict[str, Any],\n        headers: Dict[str, Any] = None,\n        timeout: float = None,\n        verify_ssl: bool = True,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; str:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required base_url string Yes assaults_configuration mapping Yes headers mapping null No timeout number null No verify_ssl boolean true No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"change-assaults-configuration\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosspring.actions\",\n\"func\": \"change_assaults_configuration\",\n\"arguments\": {\n\"base_url\": \"\",\n\"assaults_configuration\": {}\n}\n}\n}\n</code></pre> <pre><code>name: change-assaults-configuration\nprovider:\narguments:\nassaults_configuration: {}\nbase_url: ''\nfunc: change_assaults_configuration\nmodule: chaosspring.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/spring/#disable_chaosmonkey","title":"<code>disable_chaosmonkey</code>","text":"Type action Module chaosspring.actions Name disable_chaosmonkey Return string <p>Disable Chaos Monkey on a specific service.</p> <p>Signature:</p> <pre><code>def disable_chaosmonkey(base_url: str,\n                        headers: Dict[str, Any] = None,\n                        timeout: float = None,\n                        verify_ssl: bool = True,\n                        configuration: Dict[str, Dict[str, str]] = None,\n                        secrets: Dict[str, Dict[str, str]] = None) -&gt; str:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required base_url string Yes headers mapping null No timeout number null No verify_ssl boolean true No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"disable-chaosmonkey\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosspring.actions\",\n\"func\": \"disable_chaosmonkey\",\n\"arguments\": {\n\"base_url\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: disable-chaosmonkey\nprovider:\narguments:\nbase_url: ''\nfunc: disable_chaosmonkey\nmodule: chaosspring.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/spring/#enable_chaosmonkey","title":"<code>enable_chaosmonkey</code>","text":"Type action Module chaosspring.actions Name enable_chaosmonkey Return string <p>Enable Chaos Monkey on a specific service.</p> <p>Signature:</p> <pre><code>def enable_chaosmonkey(base_url: str,\n                       headers: Dict[str, Any] = None,\n                       timeout: float = None,\n                       verify_ssl: bool = True,\n                       configuration: Dict[str, Dict[str, str]] = None,\n                       secrets: Dict[str, Dict[str, str]] = None) -&gt; str:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required base_url string Yes headers mapping null No timeout number null No verify_ssl boolean true No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"enable-chaosmonkey\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosspring.actions\",\n\"func\": \"enable_chaosmonkey\",\n\"arguments\": {\n\"base_url\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: enable-chaosmonkey\nprovider:\narguments:\nbase_url: ''\nfunc: enable_chaosmonkey\nmodule: chaosspring.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/spring/#probes","title":"probes","text":""},{"location":"drivers/spring/#assaults_configuration","title":"<code>assaults_configuration</code>","text":"Type probe Module chaosspring.probes Name assaults_configuration Return mapping <p>Get the current assaults configuraton from the specified service.</p> <p>Signature:</p> <pre><code>def assaults_configuration(\n        base_url: str,\n        headers: Dict[str, Any] = None,\n        timeout: float = None,\n        verify_ssl: bool = True,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required base_url string Yes headers mapping null No timeout number null No verify_ssl boolean true No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"assaults-configuration\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosspring.probes\",\n\"func\": \"assaults_configuration\",\n\"arguments\": {\n\"base_url\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: assaults-configuration\nprovider:\narguments:\nbase_url: ''\nfunc: assaults_configuration\nmodule: chaosspring.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/spring/#chaosmonkey_enabled","title":"<code>chaosmonkey_enabled</code>","text":"Type probe Module chaosspring.probes Name chaosmonkey_enabled Return boolean <p>Enquire whether Chaos Monkey is enabled on the specified service.</p> <p>Signature:</p> <pre><code>def chaosmonkey_enabled(base_url: str,\n                        headers: Dict[str, Any] = None,\n                        timeout: float = None,\n                        verify_ssl: bool = True,\n                        configuration: Dict[str, Dict[str, str]] = None,\n                        secrets: Dict[str, Dict[str, str]] = None) -&gt; bool:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required base_url string Yes headers mapping null No timeout number null No verify_ssl boolean true No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"chaosmonkey-enabled\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosspring.probes\",\n\"func\": \"chaosmonkey_enabled\",\n\"arguments\": {\n\"base_url\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: chaosmonkey-enabled\nprovider:\narguments:\nbase_url: ''\nfunc: chaosmonkey_enabled\nmodule: chaosspring.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/spring/#watcher_configuration","title":"<code>watcher_configuration</code>","text":"Type probe Module chaosspring.probes Name watcher_configuration Return mapping <p>Get the current watcher configuraton from the specified service.</p> <p>Signature:</p> <pre><code>def watcher_configuration(\n        base_url: str,\n        headers: Dict[str, Any] = None,\n        timeout: float = None,\n        verify_ssl: bool = True,\n        configuration: Dict[str, Dict[str, str]] = None,\n        secrets: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required base_url string Yes headers mapping null No timeout number null No verify_ssl boolean true No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"watcher-configuration\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosspring.probes\",\n\"func\": \"watcher_configuration\",\n\"arguments\": {\n\"base_url\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: watcher-configuration\nprovider:\narguments:\nbase_url: ''\nfunc: watcher_configuration\nmodule: chaosspring.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/toxiproxy/","title":"Extension <code>chaostoxi</code>","text":"Version 0.3.1 Repository https://github.com/chaostoolkit-incubator/chaostoolkit-toxiproxy <p>Welcome to the Chaos Toolkit driver for Toxiproxy! This extension allows you to setup toxy proxy probes and methods from chaostoolkit by leveraging the toxyproxy http management api. </p>"},{"location":"drivers/toxiproxy/#install","title":"Install","text":"<ol> <li>Install the Toxiproxy base client</li> <li>Install the Toxiproxy CLI</li> </ol>"},{"location":"drivers/toxiproxy/#driver","title":"Driver","text":"<p>This package requires Python 3.5+</p> <p>To be used from your experiment, this package must be installed in the Python environment where chaostoolkit already lives.</p> <pre><code>$ pip install -U chaostoolkit-toxiproxy\n</code></pre>"},{"location":"drivers/toxiproxy/#usage","title":"Usage","text":""},{"location":"drivers/toxiproxy/#configuration","title":"Configuration","text":"<p>First, run the Toxiproxy base client locally to create a <code>localhost:8474</code> host on your computer. Then create a proxy.</p> <p>Next, to start using the actions and probes all you need to do is add the toxiproxy host with \u201ctoxiproxy_host\u201d as the key, and optionally the port with \u201ctoxiproxy_port\u201d as the key, to the configuration section in your experiment json. If not provided the port defaults to 8474.</p> <p>Alternatively, if toxiproxy api is accessible using a reverse proxy, you can use <code>toxiproxy_url</code> setting.</p> <p>Example using <code>toxiproxy_host</code> in experiment.json</p> <pre><code>\"configuration\": {\n\"toxiproxy_host\" : \"10.124.23.183\",\n\"some_environment_variable\": {\n\"type\": \"environment\",\n\"key\": \"ENVIRONMENT_VARIABLE\"\n}\n},\n</code></pre> <p>Example using <code>toxiproxy_url</code> in experiment.json</p> <pre><code>\"configuration\": {\n\"toxiproxy_url\" : \"http://mydomain.com:8080/path-to-toxiproxy-api\",\n\"some_environment_variable\": {\n\"type\": \"environment\",\n\"key\": \"ENVIRONMENT_VARIABLE\"\n}\n},\n</code></pre> <p>This extension follows the toxiproxy rules. A proxy is the channel where toxicity can be added. For this reason the extension is broken into proxy management and toxic management. </p> <p>All actions and probes in the extension are of python type and are used like any other python extension.</p>"},{"location":"drivers/toxiproxy/#proxy-actions","title":"Proxy actions","text":""},{"location":"drivers/toxiproxy/#create_proxy","title":"create_proxy","text":"<p>Creates a proxy to which toxics can be added. In toxiproxy a listen port of value 0 tells the API to assign a random available port. The value where the proxy is listenting will be attached to the chaostoolkit configuration object as \\&lt;proxyname&gt;_PORT. Should the creation of the proxy fail, an assertion error is raised stopping all subsequent actions.</p> Argument Description Required Default proxy_name name for the proxy Yes None upstream_host ip address of the host to send traffic to Yes None upstream_port port of the application to send traffic to Yes None listen_host IP address to bind where toxiproxy listens No 0.0.0.0 listen_port port to listen for requests, 0 means pick random value No 0 enabled Whether to start listening or not No True"},{"location":"drivers/toxiproxy/#modify_proxy","title":"modify_proxy","text":"<p>Modify the configuration of a given proxy. Useful to change the upstream configiuration. Only arguments supplied result in modification of the proxy.</p> Argument Description Required Default proxy_name name for the proxy Yes None listen_addres ip:port address to modify No None upstream_addres ip:port of the upstream No None enabled Toggle enabled/disabled state No None"},{"location":"drivers/toxiproxy/#disable_proxy","title":"disable_proxy","text":"<p>Disables the proxy, this is useful to simulate a proxied service being down.</p> Argument Description Required Default proxy_name name for the proxy to disable Yes None"},{"location":"drivers/toxiproxy/#enable_proxy","title":"enable_proxy","text":"<p>Enables a disabled proxy.</p> Argument Description Required Default proxy_name name for the proxy to enable Yes None"},{"location":"drivers/toxiproxy/#delete_proxy","title":"delete_proxy","text":"<p>Removes the proxy from the system.</p> <p>Example usage</p> <pre><code> \"method\": [\n{\n\"type\": \"action\",\n\"name\": \"setup_toxiproxy_proxy\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaostoxi.proxy.actions\",\n\"func\": \"create_proxy\",\n\"arguments\": {\n\"proxy_name\": \"myproxy\",\n\"listen_port\" : 6666,\n\"upstream_host\" : \"10.28.188.118\",\n\"upstream_port\" : 6040\n}\n},\n\"pauses\": {\n\"after\": 1\n}\n}\n] </code></pre>"},{"location":"drivers/toxiproxy/#reset","title":"reset","text":"<p>Enable all proxies and remove all active toxics.</p> <p>Example usage: <pre><code>\"method\": [\n{\n\"type\": \"action\",\n\"name\": \"reset all proxies\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaostoxi.proxy.actions\",\n\"func\": \"reset\"\n},\n\"pauses\": {\n\"after\": 1\n}\n}\n]\n</code></pre></p>"},{"location":"drivers/toxiproxy/#proxy-pobes","title":"Proxy pobes","text":""},{"location":"drivers/toxiproxy/#proxy_exist","title":"proxy_exist","text":"<p>Returns True of False if a given proxy exists.</p> Argument Description Required Default proxy_name name for the proxy Yes None"},{"location":"drivers/toxiproxy/#toxic-actions","title":"Toxic actions","text":"<p>All actions provided by this extension match the types and attributes of toxics. </p>"},{"location":"drivers/toxiproxy/#create_toxic","title":"create_toxic","text":"<p>Allows you to create any of the supported types of toxics with their attributes. </p> Argument Description Required Default for_proxy name for the proxy to attach the toxy Yes None toxic_name name for this toxy Yes None toxic_type A valid toxic type Yes None stream The direction of the toxic \u201cupstream\u201d or \u201cdownstream\u201d No downstream toxicity Percentage of toxiciy 1.0 is 100%, 0.5 is 50% etc No 1.0 attributes Dictionary of attributes for the type of toxic No None"},{"location":"drivers/toxiproxy/#create_latency_toxic","title":"create_latency_toxic","text":"<p>Add a delay to all data going through the proxy using a downstream with a toxicity of 100%.</p> Argument Description Required Default for_proxy name for the proxy to attach the toxy Yes None toxic_name name for this toxy Yes None latency time in milliseconds to add for latency Yes None jitter time in milliseconds to jitter No 0"},{"location":"drivers/toxiproxy/#create_bandwith_degradation_toxic","title":"create_bandwith_degradation_toxic","text":"<p>Limit the bandwith of a  downstream connection with a toxicity of 100%.</p> Argument Description Required Default for_proxy name for the proxy to attach the toxy Yes None toxic_name name for this toxy Yes None rate desired bandwith rate in KB/s Yes None"},{"location":"drivers/toxiproxy/#create_slow_connection_close_toxic","title":"create_slow_connection_close_toxic","text":"<p>Generate as downstream delayed TCP close with a toxicity of 100%.</p> Argument Description Required Default for_proxy name for the proxy to attach the toxy Yes None toxic_name name for this toxy Yes None delay desired close delay in milliseconds Yes None"},{"location":"drivers/toxiproxy/#create_slicer_toxic","title":"create_slicer_toxic","text":"<p>Slices TCP data up into small bits, optionally adding a delay between each sliced \u201cpacket\u201d with a toxicity of 100%.</p> Argument Description Required Default for_proxy name for the proxy to attach the toxy Yes None toxic_name name for this toxy Yes None average_size size in bytes for the average package Yes None size_variation variation in bytes of an average pkg (should be smaller than average_size) Yes None delay time in microseconds to delay each packet by Yes None"},{"location":"drivers/toxiproxy/#create_limiter_toxic","title":"create_limiter_toxic","text":"<p>Closes connections when transmitted data after the limit, sets it up as a dowsntream, 100% toxicity.</p> Argument Description Required Default for_proxy name for the proxy to attach the toxy Yes None toxic_name name for this toxy Yes None bytes number of bytes to transmit before connection is closed Yes None"},{"location":"drivers/toxiproxy/#delete_toxic","title":"delete_toxic","text":"<p>Deletes the a given toxic.</p> Argument Description Required Default for_proxy name for the proxy to attach the toxy Yes None toxic_name name for this toxy Yes None <p>Example usage:</p> <pre><code> \"method\": [        {\n\"type\": \"action\",\n\"name\": \"create_latency_toxic\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"toxiproxy.toxic.actions\",\n\"func\": \"create_dowsntream_latency_toxic\",\n\"arguments\": {\n\"for_proxy\": \"edsproxy\",\n\"toxic_name\": \"latency_toxic\",\n\"latency\": 5000,\n\"jitter\": 200\n}\n},\n\"pauses\": {\n\"after\": 1\n}\n}    ]\n</code></pre>"},{"location":"drivers/toxiproxy/#contribute","title":"Contribute","text":"<p>If you wish to contribute more functions to this package, you are more than welcome to do so. Please, fork this project, make your changes following the usual PEP 8 code style, sprinkling with tests and submit a PR for review.</p> <p>The Chaos Toolkit projects require all contributors must sign a Developer Certificate of Origin on each commit they would like to merge into the master branch of the repository. Please, make sure you can abide by the rules of the DCO before submitting a PR.</p>"},{"location":"drivers/toxiproxy/#develop","title":"Develop","text":"<p>If you wish to develop on this project, make sure to install the development dependencies. But first, create a virtual environment and then install those dependencies.</p> <pre><code>$ pip install -r requirements-dev.txt -r requirements.txt\n</code></pre> <p>Then, point your environment to this directory:</p> <pre><code>$ python setup.py develop\n</code></pre> <p>Now, you can edit the files and they will be automatically be seen by your environment, even when running from the <code>chaos</code> command locally.</p>"},{"location":"drivers/toxiproxy/#test","title":"Test","text":"<p>To run the unit tests for the project execute the following:</p> <pre><code>$ pytest\n</code></pre> <p>To run the integration tests for the project execute the following:</p> <pre><code>$ tox\n</code></pre>"},{"location":"drivers/toxiproxy/#exported-activities","title":"Exported Activities","text":""},{"location":"drivers/toxiproxy/#proxy","title":"proxy","text":""},{"location":"drivers/toxiproxy/#create_proxy_1","title":"<code>create_proxy</code>","text":"Type action Module chaostoxi.proxy.actions Name create_proxy Return None <p>Creates a proxy to which toxics can be added.</p> <p>Signature:</p> <pre><code>def create_proxy(proxy_name: str,\n                 upstream_host: str,\n                 upstream_port: int,\n                 listen_host: str = '0.0.0.0',\n                 listen_port: int = 0,\n                 enabled: bool = True,\n                 configuration: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required proxy_name string Yes upstream_host string Yes upstream_port integer Yes listen_host string \u201c0.0.0.0\u201d No listen_port integer 0 No enabled boolean true No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"create-proxy\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaostoxi.proxy.actions\",\n\"func\": \"create_proxy\",\n\"arguments\": {\n\"proxy_name\": \"\",\n\"upstream_host\": \"\",\n\"upstream_port\": 0\n}\n}\n}\n</code></pre> <pre><code>name: create-proxy\nprovider:\narguments:\nproxy_name: ''\nupstream_host: ''\nupstream_port: 0\nfunc: create_proxy\nmodule: chaostoxi.proxy.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/toxiproxy/#delete_proxy_1","title":"<code>delete_proxy</code>","text":"Type action Module chaostoxi.proxy.actions Name delete_proxy Return None <p>Removes the proxy from the system.</p> <p>Signature:</p> <pre><code>def delete_proxy(proxy_name: str,\n                 configuration: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required proxy_name string Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"delete-proxy\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaostoxi.proxy.actions\",\n\"func\": \"delete_proxy\",\n\"arguments\": {\n\"proxy_name\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: delete-proxy\nprovider:\narguments:\nproxy_name: ''\nfunc: delete_proxy\nmodule: chaostoxi.proxy.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/toxiproxy/#disable_proxy_1","title":"<code>disable_proxy</code>","text":"Type action Module chaostoxi.proxy.actions Name disable_proxy Return None <p>Disables the proxy, this is useful to simulate a proxied service being down.</p> <p>Signature:</p> <pre><code>def disable_proxy(proxy_name: str,\n                  configuration: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required proxy_name string Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"disable-proxy\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaostoxi.proxy.actions\",\n\"func\": \"disable_proxy\",\n\"arguments\": {\n\"proxy_name\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: disable-proxy\nprovider:\narguments:\nproxy_name: ''\nfunc: disable_proxy\nmodule: chaostoxi.proxy.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/toxiproxy/#enable_proxy_1","title":"<code>enable_proxy</code>","text":"Type action Module chaostoxi.proxy.actions Name enable_proxy Return None <p>Enables a disabled proxy.</p> <p>Signature:</p> <pre><code>def enable_proxy(proxy_name: str,\n                 configuration: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required proxy_name string Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"enable-proxy\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaostoxi.proxy.actions\",\n\"func\": \"enable_proxy\",\n\"arguments\": {\n\"proxy_name\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: enable-proxy\nprovider:\narguments:\nproxy_name: ''\nfunc: enable_proxy\nmodule: chaostoxi.proxy.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/toxiproxy/#get_proxy_attribute","title":"<code>get_proxy_attribute</code>","text":"Type probe Module chaostoxi.proxy.probes Name get_proxy_attribute Return None <p>Returns an attribute of a specified proxy.</p> <p>Signature:</p> <pre><code>def get_proxy_attribute(proxy_name: str,\n                        attribute: str,\n                        configuration: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required proxy_name string Yes attribute string Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"get-proxy-attribute\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaostoxi.proxy.probes\",\n\"func\": \"get_proxy_attribute\",\n\"arguments\": {\n\"proxy_name\": \"\",\n\"attribute\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: get-proxy-attribute\nprovider:\narguments:\nattribute: ''\nproxy_name: ''\nfunc: get_proxy_attribute\nmodule: chaostoxi.proxy.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/toxiproxy/#modify_proxy_1","title":"<code>modify_proxy</code>","text":"Type action Module chaostoxi.proxy.actions Name modify_proxy Return None <p>Modify the configuration of a given proxy. Useful to change the upstream configiuration. Only arguments supplied result in modification of the proxy.</p> <p>Signature:</p> <pre><code>def modify_proxy(proxy_name: str,\n                 listen_address: str = None,\n                 upstream_address: str = None,\n                 enabled: bool = None,\n                 configuration: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required proxy_name string Yes listen_address string null No upstream_address string null No enabled boolean null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"modify-proxy\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaostoxi.proxy.actions\",\n\"func\": \"modify_proxy\",\n\"arguments\": {\n\"proxy_name\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: modify-proxy\nprovider:\narguments:\nproxy_name: ''\nfunc: modify_proxy\nmodule: chaostoxi.proxy.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/toxiproxy/#proxy_exist_1","title":"<code>proxy_exist</code>","text":"Type probe Module chaostoxi.proxy.probes Name proxy_exist Return None <p>Returns True of False if a given proxy exists.</p> <p>Signature:</p> <pre><code>def proxy_exist(proxy_name: str,\n                configuration: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required proxy_name string Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"proxy-exist\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaostoxi.proxy.probes\",\n\"func\": \"proxy_exist\",\n\"arguments\": {\n\"proxy_name\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: proxy-exist\nprovider:\narguments:\nproxy_name: ''\nfunc: proxy_exist\nmodule: chaostoxi.proxy.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/toxiproxy/#reset_1","title":"<code>reset</code>","text":"Type action Module chaostoxi.proxy.actions Name reset Return None <p>Enable all proxies and remove all active toxics</p> <p>Signature:</p> <pre><code>def reset(configuration: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"reset\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaostoxi.proxy.actions\",\n\"func\": \"reset\"\n}\n}\n</code></pre> <pre><code>name: reset\nprovider:\nfunc: reset\nmodule: chaostoxi.proxy.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/toxiproxy/#toxic","title":"toxic","text":""},{"location":"drivers/toxiproxy/#create_bandwith_degradation_toxic_1","title":"<code>create_bandwith_degradation_toxic</code>","text":"Type action Module chaostoxi.toxic.actions Name create_bandwith_degradation_toxic Return mapping <p>Limit the bandwith of a  downstream connection with a toxicity of 100%.</p> <p>Signature:</p> <pre><code>def create_bandwith_degradation_toxic(\n        for_proxy: str,\n        toxic_name: str,\n        rate: int,\n        configuration: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required for_proxy string Yes toxic_name string Yes rate integer Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"create-bandwith-degradation-toxic\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaostoxi.toxic.actions\",\n\"func\": \"create_bandwith_degradation_toxic\",\n\"arguments\": {\n\"for_proxy\": \"\",\n\"toxic_name\": \"\",\n\"rate\": 0\n}\n}\n}\n</code></pre> <pre><code>name: create-bandwith-degradation-toxic\nprovider:\narguments:\nfor_proxy: ''\nrate: 0\ntoxic_name: ''\nfunc: create_bandwith_degradation_toxic\nmodule: chaostoxi.toxic.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/toxiproxy/#create_latency_toxic_1","title":"<code>create_latency_toxic</code>","text":"Type action Module chaostoxi.toxic.actions Name create_latency_toxic Return mapping <p>Add a delay to all data going through the proxy using a downstream with a toxicity of 100%.</p> <p>Signature:</p> <pre><code>def create_latency_toxic(\n        for_proxy: str,\n        toxic_name: str,\n        latency: int,\n        jitter: int = 0,\n        configuration: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required for_proxy string Yes toxic_name string Yes latency integer Yes jitter integer 0 No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"create-latency-toxic\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaostoxi.toxic.actions\",\n\"func\": \"create_latency_toxic\",\n\"arguments\": {\n\"for_proxy\": \"\",\n\"toxic_name\": \"\",\n\"latency\": 0\n}\n}\n}\n</code></pre> <pre><code>name: create-latency-toxic\nprovider:\narguments:\nfor_proxy: ''\nlatency: 0\ntoxic_name: ''\nfunc: create_latency_toxic\nmodule: chaostoxi.toxic.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/toxiproxy/#create_limiter_toxic_1","title":"<code>create_limiter_toxic</code>","text":"Type action Module chaostoxi.toxic.actions Name create_limiter_toxic Return mapping <p>Closes connections when transmitted data after the limit, sets it up as a dowsntream, 100% toxicity.</p> <p>Signature:</p> <pre><code>def create_limiter_toxic(\n        for_proxy: str,\n        toxic_name: str,\n        bytes_limit: int,\n        configuration: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required for_proxy string Yes toxic_name string Yes bytes_limit integer Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"create-limiter-toxic\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaostoxi.toxic.actions\",\n\"func\": \"create_limiter_toxic\",\n\"arguments\": {\n\"for_proxy\": \"\",\n\"toxic_name\": \"\",\n\"bytes_limit\": 0\n}\n}\n}\n</code></pre> <pre><code>name: create-limiter-toxic\nprovider:\narguments:\nbytes_limit: 0\nfor_proxy: ''\ntoxic_name: ''\nfunc: create_limiter_toxic\nmodule: chaostoxi.toxic.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/toxiproxy/#create_slicer_toxic_1","title":"<code>create_slicer_toxic</code>","text":"Type action Module chaostoxi.toxic.actions Name create_slicer_toxic Return mapping <p>Slices TCP data up into small bits, optionally adding a delay between each sliced \u201cpacket\u201d with a toxicity of 100%.</p> <p>Signature:</p> <pre><code>def create_slicer_toxic(\n        for_proxy: str,\n        toxic_name: str,\n        average_size: int,\n        size_variation: int,\n        delay: int,\n        configuration: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required for_proxy string Yes toxic_name string Yes average_size integer Yes size_variation integer Yes delay integer Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"create-slicer-toxic\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaostoxi.toxic.actions\",\n\"func\": \"create_slicer_toxic\",\n\"arguments\": {\n\"for_proxy\": \"\",\n\"toxic_name\": \"\",\n\"average_size\": 0,\n\"size_variation\": 0,\n\"delay\": 0\n}\n}\n}\n</code></pre> <pre><code>name: create-slicer-toxic\nprovider:\narguments:\naverage_size: 0\ndelay: 0\nfor_proxy: ''\nsize_variation: 0\ntoxic_name: ''\nfunc: create_slicer_toxic\nmodule: chaostoxi.toxic.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/toxiproxy/#create_slow_connection_close_toxic_1","title":"<code>create_slow_connection_close_toxic</code>","text":"Type action Module chaostoxi.toxic.actions Name create_slow_connection_close_toxic Return mapping <p>Limit the bandwith of a  downstream connection with a toxicity of 100%.</p> <p>Signature:</p> <pre><code>def create_slow_connection_close_toxic(\n        for_proxy: str,\n        toxic_name: str,\n        delay: int,\n        configuration: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required for_proxy string Yes toxic_name string Yes delay integer Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"create-slow-connection-close-toxic\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaostoxi.toxic.actions\",\n\"func\": \"create_slow_connection_close_toxic\",\n\"arguments\": {\n\"for_proxy\": \"\",\n\"toxic_name\": \"\",\n\"delay\": 0\n}\n}\n}\n</code></pre> <pre><code>name: create-slow-connection-close-toxic\nprovider:\narguments:\ndelay: 0\nfor_proxy: ''\ntoxic_name: ''\nfunc: create_slow_connection_close_toxic\nmodule: chaostoxi.toxic.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/toxiproxy/#create_timeout_toxic","title":"<code>create_timeout_toxic</code>","text":"Type action Module chaostoxi.toxic.actions Name create_timeout_toxic Return mapping <p>Generate as downstream delayed TCP close with a toxicity of 100%.</p> <p>Signature:</p> <pre><code>def create_timeout_toxic(\n        for_proxy: str,\n        toxic_name: str,\n        timeout: int,\n        configuration: Dict[str, Dict[str, str]] = None) -&gt; Dict[str, Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required for_proxy string Yes toxic_name string Yes timeout integer Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"create-timeout-toxic\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaostoxi.toxic.actions\",\n\"func\": \"create_timeout_toxic\",\n\"arguments\": {\n\"for_proxy\": \"\",\n\"toxic_name\": \"\",\n\"timeout\": 0\n}\n}\n}\n</code></pre> <pre><code>name: create-timeout-toxic\nprovider:\narguments:\nfor_proxy: ''\ntimeout: 0\ntoxic_name: ''\nfunc: create_timeout_toxic\nmodule: chaostoxi.toxic.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/toxiproxy/#create_toxic_1","title":"<code>create_toxic</code>","text":"Type action Module chaostoxi.toxic.actions Name create_toxic Return boolean <p>Allows you to create any of the supported types of toxics with their attributes.</p> <p>Signature:</p> <pre><code>def create_toxic(for_proxy: str,\n                 toxic_name: str,\n                 toxic_type: str,\n                 stream: str = 'downstream',\n                 toxicity: float = 1.0,\n                 attributes: Dict[str, Any] = None,\n                 configuration: Dict[str, Dict[str, str]] = None) -&gt; bool:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required for_proxy string Yes toxic_name string Yes toxic_type string Yes stream string \u201cdownstream\u201d No toxicity number 1.0 No attributes mapping null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"create-toxic\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaostoxi.toxic.actions\",\n\"func\": \"create_toxic\",\n\"arguments\": {\n\"for_proxy\": \"\",\n\"toxic_name\": \"\",\n\"toxic_type\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: create-toxic\nprovider:\narguments:\nfor_proxy: ''\ntoxic_name: ''\ntoxic_type: ''\nfunc: create_toxic\nmodule: chaostoxi.toxic.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/toxiproxy/#delete_toxic_1","title":"<code>delete_toxic</code>","text":"Type action Module chaostoxi.toxic.actions Name delete_toxic Return None <p>Deletes the a given toxic.</p> <p>Signature:</p> <pre><code>def delete_toxic(for_proxy: str,\n                 toxic_name: str,\n                 configuration: Dict[str, Dict[str, str]] = None):\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required for_proxy string Yes toxic_name string Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"delete-toxic\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaostoxi.toxic.actions\",\n\"func\": \"delete_toxic\",\n\"arguments\": {\n\"for_proxy\": \"\",\n\"toxic_name\": \"\"\n}\n}\n}\n</code></pre> <pre><code>name: delete-toxic\nprovider:\narguments:\nfor_proxy: ''\ntoxic_name: ''\nfunc: delete_toxic\nmodule: chaostoxi.toxic.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/wiremock/","title":"Extension <code>chaoswm</code>","text":"Version 0.1.2 Repository https://github.com/chaostoolkit-incubator/chaostoolkit-wiremock <p>=====================</p> <p> </p> <p>Chaos Toolkit driver for WireMock. </p>"},{"location":"drivers/wiremock/#package-installation","title":"Package installation","text":"<p>To install the package from pypi.org:</p> <pre><code>pip install -U chaostoolkit-wiremock\n</code></pre>"},{"location":"drivers/wiremock/#installation-from-source","title":"Installation from source","text":"<p>In order to use it, you need python 3.5+ in your environment. Once downloaded the project, cd into it and run:</p> <pre><code>pip install -r requirements.txt -r requirements-dev.txt\nmake clean &amp;&amp; make test &amp;&amp; make install\n</code></pre>"},{"location":"drivers/wiremock/#configuration","title":"Configuration","text":"<p>The following keys can be configured in the experiment global configuration section, under the \"wiremock\" key:</p> <ul> <li>host: the wiremock server host</li> <li>port: the wiremock server port</li> <li>contextPath: the contextPath for your wiremock server (optional)</li> <li>timeout: accepted timeout (defaults to 1 sec)</li> <li>down: the delayDistribution section used by the <code>down</code> action</li> </ul> <p>Configuration example:</p> <pre><code>{\n    \"configuration\": {\n        \"wiremock\": {\n            \"host\": \"localhost\",\n            \"port\": 8080,\n            \"contextPath\": \"/wiremock\",\n            \"timeout\": 10,\n            \"down\": {\n                \"type\": \"lognormal\",\n                \"median\": 3000,\n                \"sigma\": 0.2\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"drivers/wiremock/#exported-actions","title":"Exported Actions","text":"<p>Adding a list of mappings:</p> <pre><code>{\n  \"method\": [\n    {\n      \"type\": \"action\",\n      \"name\": \"adding a mapping\",\n      \"provider\": {\n        \"type\": \"python\",\n        \"module\": \"chaoswm.actions\",\n        \"func\": \"add_mappings\",\n        \"arguments\": {\n          \"mappings\": [{\n            \"request\": {\n               \"method\": \"GET\",\n               \"url\": \"/hello\"\n            },\n            \"response\": {\n               \"status\": 200,\n               \"body\": \"Hello world!\",\n               \"headers\": {\n                   \"Content-Type\": \"text/plain\"\n               }\n            } \n          }]\n        }\n      }\n    }\n  ]\n}\n</code></pre> <p>Deleting a list of mappings:</p> <pre><code>{\n  \"method\": [\n    {\n      \"type\": \"action\",\n      \"name\": \"deleting a mapping\",\n      \"provider\": {\n        \"type\": \"python\",\n        \"module\": \"chaoswm.actions\",\n        \"func\": \"delete_mappings\",\n        \"arguments\": {\n          \"filter\": [{\n             \"method\": \"GET\",\n             \"url\": \"/hello\"\n          }]\n        }\n      }\n    }\n  ]\n}\n</code></pre> <p>Adding a global fixed delay:</p> <pre><code>{\n  \"method\": [\n    {\n      \"type\": \"action\",\n      \"name\": \"Adding a global fixed delay\",\n      \"provider\": {\n        \"type\": \"python\",\n        \"module\": \"chaoswm.actions\",\n        \"func\": \"global_fixed_delay\",\n        \"arguments\": {\n          \"fixedDelay\": 10\n        }\n      }\n    }\n  ]\n}\n</code></pre> <p>Adding a global random delay:</p> <pre><code>{\n  \"method\": [\n    {\n      \"type\": \"action\",\n      \"name\": \"Adding a global random delay\",\n      \"provider\": {\n        \"type\": \"python\",\n        \"module\": \"chaoswm.actions\",\n        \"func\": \"global_random_delay\",\n        \"arguments\": {\n          \"delayDistribution\": {\n            \"type\": \"lognormal\",\n            \"median\": 20,\n            \"sigma\": 0.1\n          }\n        }\n      }\n    }\n  ]\n}\n</code></pre> <p>Adding a fixed delay to a list of mappings:</p> <pre><code>{\n  \"method\": [\n    {\n      \"type\": \"action\",\n      \"name\": \"Adding a fixed delay to a mapping\",\n      \"provider\": {\n        \"type\": \"python\",\n        \"module\": \"chaoswm.actions\",\n        \"func\": \"fixed_delay\",\n        \"arguments\": {\n          \"filter\": [{\n            \"method\": \"GET\",\n            \"url\": \"/hello1\"\n          }],\n          \"fixedDelayMilliseconds\": 1000\n        }\n      }\n    }\n  ]\n}\n</code></pre> <p>Adding a random delay to a list of mappings:</p> <pre><code>{\n  \"method\": [\n    {\n      \"type\": \"action\",\n      \"name\": \"Adding a random delay to a mapping\",\n      \"provider\": {\n        \"type\": \"python\",\n        \"module\": \"chaoswm.actions\",\n        \"func\": \"random_delay\",\n        \"arguments\": {\n          \"filter\": [{\n            \"method\": \"GET\",\n            \"url\": \"/hello2\"\n          }],\n          \"delayDistribution\": {\n            \"type\": \"lognormal\",\n            \"median\": 2000,\n            \"sigma\": 0.5\n          }\n        }\n      }\n    }\n  ]\n}\n</code></pre> <p>Adding a ChunkedDribbleDelay to a list of mappings:</p> <pre><code>{\n  \"method\": [\n    {\n      \"type\": \"action\",\n      \"name\": \"Adding a ChunkedDribbleDelay to a mapping\",\n      \"provider\": {\n        \"type\": \"python\",\n        \"module\": \"chaoswm.actions\",\n        \"func\": \"chunked_dribble_delay\",\n        \"arguments\": {\n          \"filter\": [{\n            \"method\": \"GET\",\n            \"url\": \"/hello\"\n          }],\n          \"chunkedDribbleDelay\": {\n            \"numberOfChunks\": 5,\n            \"totalDuration\": 1000\n          }\n        }\n      }\n    }\n  ]\n}\n</code></pre> <p>Taking a list of mappings down (heavy distribution delay). This action will use the parameters specified in the \"down\" key of the configuration section:</p> <pre><code>{\n  \"method\": [\n    {\n      \"type\": \"action\",\n      \"name\": \"Taking a mapping down\",\n      \"provider\": {\n        \"type\": \"python\",\n        \"module\": \"chaoswm.actions\",\n        \"func\": \"down\",\n        \"arguments\": {\n          \"filter\": [{\n            \"method\": \"GET\",\n            \"url\": \"/hello\"\n          }]\n        }\n      }\n    }\n  ]\n}\n</code></pre> <p>Taking a list of mappings up back again:</p> <pre><code>{\n  \"method\": [\n    {\n      \"type\": \"action\",\n      \"name\": \"Taking a mapping down\",\n      \"provider\": {\n        \"type\": \"python\",\n        \"module\": \"chaoswm.actions\",\n        \"func\": \"up\",\n        \"arguments\": {\n          \"filter\": [{\n            \"method\": \"GET\",\n            \"url\": \"/hello\"\n          }]\n        }\n      }\n    }\n  ]\n}\n</code></pre> <p>Resetting the wiremock server (deleting all mappings):</p> <pre><code>{\n  \"method\": [\n    {\n      \"type\": \"action\",\n      \"name\": \"Taking a mapping down\",\n      \"provider\": {\n        \"type\": \"python\",\n        \"module\": \"chaoswm.actions\",\n        \"func\": \"reset\"\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"drivers/wiremock/#experiments","title":"Experiments","text":"<p>The driver comes with an experiments directory where you can find snippets to test all APIs  against a WireMock server listening on localhost:8080.</p>"},{"location":"drivers/wiremock/#discovery","title":"Discovery","text":"<p>You may use the Chaos Toolkit to discover the capabilities of this extension:</p> <pre><code>$ chaos discover chaostoolkit-wiremock  --no-install\n</code></pre>"},{"location":"drivers/wiremock/#credits","title":"Credits","text":"<p>This package was created with Cookiecutter and the audreyr/cookiecutter-pypackage project template.</p>"},{"location":"drivers/wiremock/#exported-activities","title":"Exported Activities","text":""},{"location":"drivers/wiremock/#actions","title":"actions","text":""},{"location":"drivers/wiremock/#add_mappings","title":"<code>add_mappings</code>","text":"Type action Module chaoswm.actions Name add_mappings Return list <p>adds more mappings to wiremock returns the list of ids of the mappings added</p> <p>Signature:</p> <pre><code>def add_mappings(mappings: List[Any],\n                 configuration: Dict[str, Dict[str, str]] = None) -&gt; List[Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required mappings list Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"add-mappings\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaoswm.actions\",\n\"func\": \"add_mappings\",\n\"arguments\": {\n\"mappings\": []\n}\n}\n}\n</code></pre> <pre><code>name: add-mappings\nprovider:\narguments:\nmappings: []\nfunc: add_mappings\nmodule: chaoswm.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/wiremock/#chunked_dribble_delay","title":"<code>chunked_dribble_delay</code>","text":"Type action Module chaoswm.actions Name chunked_dribble_delay Return list <p>adds a chunked dribble delay to a list of mappings</p> <p>Signature:</p> <pre><code>def chunked_dribble_delay(\n        filter: List[Any],\n        chunkedDribbleDelay: Mapping[str, Any],\n        configuration: Dict[str, Dict[str, str]] = None) -&gt; List[Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required filter list Yes chunkedDribbleDelay object Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"chunked-dribble-delay\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaoswm.actions\",\n\"func\": \"chunked_dribble_delay\",\n\"arguments\": {\n\"filter\": [],\n\"chunkedDribbleDelay\": null\n}\n}\n}\n</code></pre> <pre><code>name: chunked-dribble-delay\nprovider:\narguments:\nchunkedDribbleDelay: null\nfilter: []\nfunc: chunked_dribble_delay\nmodule: chaoswm.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/wiremock/#delete_mappings","title":"<code>delete_mappings</code>","text":"Type action Module chaoswm.actions Name delete_mappings Return list <p>deletes a list of mappings returns the list of ids of the mappings deleted</p> <p>Signature:</p> <pre><code>def delete_mappings(\n        filter: List[Any],\n        configuration: Dict[str, Dict[str, str]] = None) -&gt; List[Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required filter list Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"delete-mappings\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaoswm.actions\",\n\"func\": \"delete_mappings\",\n\"arguments\": {\n\"filter\": []\n}\n}\n}\n</code></pre> <pre><code>name: delete-mappings\nprovider:\narguments:\nfilter: []\nfunc: delete_mappings\nmodule: chaoswm.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/wiremock/#down","title":"<code>down</code>","text":"Type action Module chaoswm.actions Name down Return list <p>set a list of services down more correctly it adds a chunked dribble delay to the mapping as defined in the configuration section (or action attributes) Returns the list of delayed mappings</p> <p>Signature:</p> <pre><code>def down(filter: List[Any],\n         configuration: Dict[str, Dict[str, str]] = None) -&gt; List[Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required filter list Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"down\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaoswm.actions\",\n\"func\": \"down\",\n\"arguments\": {\n\"filter\": []\n}\n}\n}\n</code></pre> <pre><code>name: down\nprovider:\narguments:\nfilter: []\nfunc: down\nmodule: chaoswm.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/wiremock/#fixed_delay","title":"<code>fixed_delay</code>","text":"Type action Module chaoswm.actions Name fixed_delay Return list <p>adds a fixed delay to a list of mappings </p> <p>Signature:</p> <pre><code>def fixed_delay(filter: List[Any],\n                fixedDelayMilliseconds: int,\n                configuration: Dict[str, Dict[str, str]] = None) -&gt; List[Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required filter list Yes fixedDelayMilliseconds integer Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"fixed-delay\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaoswm.actions\",\n\"func\": \"fixed_delay\",\n\"arguments\": {\n\"filter\": [],\n\"fixedDelayMilliseconds\": 0\n}\n}\n}\n</code></pre> <pre><code>name: fixed-delay\nprovider:\narguments:\nfilter: []\nfixedDelayMilliseconds: 0\nfunc: fixed_delay\nmodule: chaoswm.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/wiremock/#global_fixed_delay","title":"<code>global_fixed_delay</code>","text":"Type action Module chaoswm.actions Name global_fixed_delay Return integer <p>add a fixed delay to all mappings </p> <p>Signature:</p> <pre><code>def global_fixed_delay(fixedDelay: int = 0,\n                       configuration: Dict[str, Dict[str, str]] = None) -&gt; int:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required fixedDelay integer 0 No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"global-fixed-delay\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaoswm.actions\",\n\"func\": \"global_fixed_delay\"\n}\n}\n</code></pre> <pre><code>name: global-fixed-delay\nprovider:\nfunc: global_fixed_delay\nmodule: chaoswm.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/wiremock/#global_random_delay","title":"<code>global_random_delay</code>","text":"Type action Module chaoswm.actions Name global_random_delay Return integer <p>adds a random delay to all mappings </p> <p>Signature:</p> <pre><code>def global_random_delay(\n        delayDistribution: Mapping[str, Any],\n        configuration: Dict[str, Dict[str, str]] = None) -&gt; int:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required delayDistribution object Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"global-random-delay\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaoswm.actions\",\n\"func\": \"global_random_delay\",\n\"arguments\": {\n\"delayDistribution\": null\n}\n}\n}\n</code></pre> <pre><code>name: global-random-delay\nprovider:\narguments:\ndelayDistribution: null\nfunc: global_random_delay\nmodule: chaoswm.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/wiremock/#populate_from_dir","title":"<code>populate_from_dir</code>","text":"Type action Module chaoswm.actions Name populate_from_dir Return list <p>adds all mappings found in the passed folder returns the list of ids of the mappings added</p> <p>Signature:</p> <pre><code>def populate_from_dir(\n        dir: str = '.',\n        configuration: Dict[str, Dict[str, str]] = None) -&gt; List[Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required dir string \u201d.\u201d No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"populate-from-dir\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaoswm.actions\",\n\"func\": \"populate_from_dir\"\n}\n}\n</code></pre> <pre><code>name: populate-from-dir\nprovider:\nfunc: populate_from_dir\nmodule: chaoswm.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/wiremock/#random_delay","title":"<code>random_delay</code>","text":"Type action Module chaoswm.actions Name random_delay Return list <p>adds a random delay to a list of mapppings</p> <p>Signature:</p> <pre><code>def random_delay(filter: List[Any],\n                 delayDistribution: Mapping[str, Any],\n                 configuration: Dict[str, Dict[str, str]] = None) -&gt; List[Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required filter list Yes delayDistribution object Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"random-delay\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaoswm.actions\",\n\"func\": \"random_delay\",\n\"arguments\": {\n\"filter\": [],\n\"delayDistribution\": null\n}\n}\n}\n</code></pre> <pre><code>name: random-delay\nprovider:\narguments:\ndelayDistribution: null\nfilter: []\nfunc: random_delay\nmodule: chaoswm.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/wiremock/#reset","title":"<code>reset</code>","text":"Type action Module chaoswm.actions Name reset Return integer <p>resets the wiremock server: deletes all mappings! </p> <p>Signature:</p> <pre><code>def reset(configuration: Dict[str, Dict[str, str]] = None) -&gt; int:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"reset\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaoswm.actions\",\n\"func\": \"reset\"\n}\n}\n</code></pre> <pre><code>name: reset\nprovider:\nfunc: reset\nmodule: chaoswm.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/wiremock/#up","title":"<code>up</code>","text":"Type action Module chaoswm.actions Name up Return list <p>deletes all delays connected with a list of mappings </p> <p>Signature:</p> <pre><code>def up(filter: List[Any],\n       configuration: Dict[str, Dict[str, str]] = None) -&gt; List[Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required filter list Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"up\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaoswm.actions\",\n\"func\": \"up\",\n\"arguments\": {\n\"filter\": []\n}\n}\n}\n</code></pre> <pre><code>name: up\nprovider:\narguments:\nfilter: []\nfunc: up\nmodule: chaoswm.actions\ntype: python\ntype: action\n</code></pre>"},{"location":"drivers/wiremock/#probes","title":"probes","text":""},{"location":"drivers/wiremock/#mappings","title":"<code>mappings</code>","text":"Type probe Module chaoswm.probes Name mappings Return list <p>Signature:</p> <pre><code>def mappings(c: Dict[str, Dict[str, str]] = None) -&gt; List[Any]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required c mapping null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"mappings\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaoswm.probes\",\n\"func\": \"mappings\"\n}\n}\n</code></pre> <pre><code>name: mappings\nprovider:\nfunc: mappings\nmodule: chaoswm.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/wiremock/#server_running","title":"<code>server_running</code>","text":"Type probe Module chaoswm.probes Name server_running Return integer <p>Signature:</p> <pre><code>def server_running(c: Dict[str, Dict[str, str]] = None) -&gt; int:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required c mapping null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"server-running\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaoswm.probes\",\n\"func\": \"server_running\"\n}\n}\n</code></pre> <pre><code>name: server-running\nprovider:\nfunc: server_running\nmodule: chaoswm.probes\ntype: python\ntype: probe\n</code></pre>"},{"location":"drivers/wiremock/#utils","title":"utils","text":""},{"location":"drivers/wiremock/#can_connect_to","title":"<code>can_connect_to</code>","text":"Type Module chaoswm.utils Name can_connect_to Return boolean <p>Test a connection to a host/port </p> <p>Signature:</p> <pre><code>def can_connect_to(host: str, port: int) -&gt; bool:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required host string Yes port integer Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"can-connect-to\",\n\"type\": \"\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaoswm.utils\",\n\"func\": \"can_connect_to\",\n\"arguments\": {\n\"host\": \"\",\n\"port\": 0\n}\n}\n}\n</code></pre> <pre><code>name: can-connect-to\nprovider:\narguments:\nhost: ''\nport: 0\nfunc: can_connect_to\nmodule: chaoswm.utils\ntype: python\ntype: ''\n</code></pre>"},{"location":"drivers/wiremock/#check_configuration","title":"<code>check_configuration</code>","text":"Type Module chaoswm.utils Name check_configuration Return boolean <p>Signature:</p> <pre><code>def check_configuration(c: Dict[str, Any] = None) -&gt; bool:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required c mapping null No <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"check-configuration\",\n\"type\": \"\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaoswm.utils\",\n\"func\": \"check_configuration\"\n}\n}\n</code></pre> <pre><code>name: check-configuration\nprovider:\nfunc: check_configuration\nmodule: chaoswm.utils\ntype: python\ntype: ''\n</code></pre>"},{"location":"drivers/wiremock/#get_wm_params","title":"<code>get_wm_params</code>","text":"Type Module chaoswm.utils Name get_wm_params Return Optional[Dict[str, Any]] <p>Signature:</p> <pre><code>def get_wm_params(c: Dict[str, Any]) -&gt; Optional[Dict[str, Any]]:\n    pass\n</code></pre> <p>Arguments:</p> Name Type Default Required c mapping Yes <p>Usage:</p> JSONYAML <pre><code>{\n\"name\": \"get-wm-params\",\n\"type\": \"\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaoswm.utils\",\n\"func\": \"get_wm_params\",\n\"arguments\": {\n\"c\": {}\n}\n}\n}\n</code></pre> <pre><code>name: get-wm-params\nprovider:\narguments:\nc: {}\nfunc: get_wm_params\nmodule: chaoswm.utils\ntype: python\ntype: ''\n</code></pre>"},{"location":"reference/concepts/","title":"Chaos Engineering Concepts in the Chaos Toolkit","text":"<p>If you haven\u2019t already, we strongly recommend reading the fantastic Chaos Engineering book from O\u2019Reilly Media. This book will give you some fantastic background on the whole Chaos Engineering discipline, and it\u2019s free!</p> <p>Chaos Engineering is a discipline that allows you to surface weaknesses, and eventually build confidence, in complex and often distributed systems.</p> <p>The Chaos Toolkit aims to give you the simplest experience for writing and running your own Chaos Engineering experiments. The main concepts are all expressed in an experiment definition, of which the following is an example from the Chaos Toolkit Samples project:</p> JSONYAML <pre><code>{\n\"title\": \"System is resilient to provider's failures\",\n\"description\": \"Can our consumer survive gracefully a provider's failure?\",\n\"tags\": [\n\"service\",\n\"kubernetes\",\n\"spring\"\n],\n\"steady-state-hypothesis\": {\n\"title\": \"Services are all available and healthy\",\n\"probes\": [\n{\n\"type\": \"probe\",\n\"name\": \"all-services-are-healthy\",\n\"tolerance\": true,\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosk8s.probes\",\n\"func\": \"all_microservices_healthy\"\n}\n}\n]\n},\n\"method\": [\n{\n\"type\": \"action\",\n\"name\": \"stop-provider-service\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosk8s.actions\",\n\"func\": \"kill_microservice\",\n\"arguments\": {\n\"name\": \"my-provider-service\"\n}\n},\n\"pauses\": {\n\"after\": 10\n}\n},\n{\n\"ref\": \"all-services-are-healthy\"\n},\n{\n\"type\": \"probe\",\n\"name\": \"consumer-service-must-still-respond\",\n\"provider\": {\n\"type\": \"http\",\n\"url\": \"http://192.168.42.58:31018/invokeConsumedService\"\n}\n}\n],\n\"rollbacks\": []\n}\n</code></pre> <pre><code>title: System is resilient to provider's failures\ndescription: Can our consumer survive gracefully a provider's failure?\ntags:\n- service\n- kubernetes\n- spring\nsteady-state-hypothesis:\ntitle: Services are all available and healthy\nprobes:\n- type: probe\nname: all-services-are-healthy\ntolerance: true\nprovider:\ntype: python\nmodule: chaosk8s.probes\nfunc: all_microservices_healthy\nmethod:\n- type: action\nname: stop-provider-service\nprovider:\ntype: python\nmodule: chaosk8s.actions\nfunc: kill_microservice\narguments:\nname: my-provider-service\npauses:\nafter: 10\n- ref: all-services-are-healthy\n- type: probe\nname: consumer-service-must-still-respond\nprovider:\ntype: http\nurl: http://192.168.42.58:31018/invokeConsumedService\nrollbacks: []\n</code></pre> <p>The key concepts of the Chaos Toolkit are <code>Experiments</code>, <code>Steady State Hypothesis</code> and the experiment\u2019s <code>Method</code>. The <code>Method</code> contains a combination of <code>Probes</code> and <code>Actions</code>.</p>"},{"location":"reference/concepts/#experiments","title":"Experiments","text":"<p>A Chaos Toolkit experiment is provided in a single file and is currently expressed in JSON.</p>"},{"location":"reference/concepts/#steady-state-hypothesis","title":"Steady State Hypothesis","text":"<p>A Steady State Hypothesis describes \u201cwhat normal looks like\u201d for your system in order for the experiment to surface information about weaknesses when compared against the declared \u201cnormal\u201d tolerances of what is measured.</p> <p>The Chaos Toolkit uses the Steady State Hypothesis for two purposes. It is used as a check before an experiment is run that the target system is in a recognised normal state. It is also used as the template for comparison of the state of your system after the experiment has been run, forming the results provided by the experiment\u2019s report.</p>"},{"location":"reference/concepts/#method","title":"Method","text":"<p>An experiment\u2019s activities are contained within its <code>Method</code> block.</p>"},{"location":"reference/concepts/#probes","title":"Probes","text":"<p>A probe is a way of observing a particular set of conditions in the system that is undergoing experimentation.</p>"},{"location":"reference/concepts/#actions","title":"Actions","text":"<p>An action is a particular activity that needs to be enacted on the system under experimentation.</p>"},{"location":"reference/concepts/#rollbacks","title":"Rollbacks","text":"<p>An experiment may define a sequence of actions that revert what was undone during the experiment.</p>"},{"location":"reference/concepts/#controls","title":"Controls","text":"<p>An experiment may declare a set of controls which have an impact over the execution of the experiment itself. Controls are operational elements rather than experimental.</p>"},{"location":"reference/contributing/","title":"Contributing to the Chaos Toolkit","text":"<p>The Chaos Toolkit is a free and open source tool and a  community-driven set of projects. The  community\u2019s input is what makes this project special and a success. </p> <p>Your input could take the form of raising issues, voting for issues,  starring projects, joining us on our community Slack team, submitting pull requests, or even suggesting whole new extension projects.</p> <p>Whatever you can contribute, we\u2019re listening and want you to help us drive the  project forward.</p>"},{"location":"reference/contributing/#the-chaos-toolkit-incubator","title":"The Chaos Toolkit Incubator","text":"<p>New potential projects should be first incubated in the  Chaos Toolkit Incubator until they  are ready to be moved into the main  Chaos Toolkit suite of projects.  Conditions for graduating a project from the Incubator to the main suite of  projects include:</p> <ul> <li>Correct Licensing and Certification of Origin.</li> <li>A popular starred and used extension to the Chaos Toolkit.</li> <li>Active and prompt project issue resolution.</li> </ul>"},{"location":"reference/contributing/#how-to-submit-your-own-project-to-the-incubator","title":"How to submit your own project to the incubator?","text":"<p>The incubator is a place for community projects to be collected. If you think your extension makes sense as a community project, please don\u2019t hesitate to suggest it. The best place to start is on the community Slack team to announce it.</p> <p>Generally speaking, you should consider the followings:</p> <ul> <li>Can your project be made publicly available? Think it should respect   the Developer Certificate of Origin</li> <li>Does it serve your own purpose or can it be used by anyone?</li> <li>What license do you want to set on it? We tend to prefer permissive licenses   that are recognized by the   Open Source project, such as Apache or BSD</li> <li>Will you be able to provide basic support to the project after you have   submitted it? We are not talking about enterprise support but merely   basic issues overview and bug fixes from time to time</li> </ul> <p>Notice also that we deal with contributors on a repository basis. Collaborators are external contributors with little permissions to the org and write permissions to the repositories they contribute to. We suggest that accounts should have 2FA enabled. This reduces the security surface risks in case a contributor account is breached.</p>"},{"location":"reference/contributing/#licensing-and-certification-of-origin","title":"Licensing and Certification of Origin","text":"<p>Every project in the Chaos Toolkit and the Chaos Toolkit Incubator is licensed under the Apache License, Version 2.0 and abides by the Developer Certificate of Origin on all accepted commits to the <code>master</code> branch.</p>"},{"location":"reference/tutorial/","title":"Getting Started with the Chaos Toolkit","text":"<p>When you practice chaos engineering, you are discovering how your system reacts following certain conditions you inject. By doing this in a controlled fashion, you may learn how to change the system accordingly.</p> <p>This tutorial will quickly give you a tour of the basic elements of an experiment.</p> <p>Tip</p> <p>You will find many more in-depth labs on GitHub.</p>"},{"location":"reference/tutorial/#get-ready","title":"Get Ready","text":"<p>Before you can run the experiment against your system, you will need to have it setup.</p>"},{"location":"reference/tutorial/#get-the-code","title":"Get the Code","text":"<p>You can fetch the code as follows:</p> <pre><code>git clone https://github.com/chaostoolkit/chaostoolkit-documentation-code\n</code></pre> <p>This particular tutorial is under <code>tutorials/a-simple-walkthrough</code>.</p> <pre><code>cd chaostoolkit-documentation-code/tutorials/a-simple-walkthrough\n</code></pre>"},{"location":"reference/tutorial/#third-party-binaries","title":"Third-party binaries","text":"<p>The experiment will use the following binaries, make sure you have them in your PATH:</p> <ul> <li>openssl</li> <li>pkill</li> </ul>"},{"location":"reference/tutorial/#install-the-application-dependencies","title":"Install the Application dependencies","text":"<p>Our application is made of a simple set of two microservices that converse with each other over HTTPS.</p> <p>Tip</p> <p>It\u2019s recommended that you use a  Python virtual environment to keep your project dependencies isolated from any other projects.</p> <p>As you should already run Python 3 for the toolkit itself, we assume you are set accordingly, please install only the application dependencies:</p> <pre><code>pip install -U -r requirements.txt\n</code></pre>"},{"location":"reference/tutorial/#install-the-chaos-toolkit","title":"Install the Chaos Toolkit","text":"<p>You must install the Chaos Toolkit and its dependencies for the purpose of this tutorial. While we suggest you go through the install section, it boils down to:</p> <pre><code>pip install -U chaostoolkit\n</code></pre>"},{"location":"reference/tutorial/#your-first-experiment","title":"Your First Experiment","text":""},{"location":"reference/tutorial/#explore-a-potential-weakness","title":"Explore a Potential Weakness","text":"<p>So, looking at our application, what could we consider as of interest to discover through an experiment? Well, we are using HTTPS between the two services in our application, what if the certificate expired?</p> <p>Tip</p> <p>In such a simple setup, we appreciate that things will likely break and, in general there is no point to run an experiment when you already know the outcome. However, let\u2019s humor ourselves for the sake of learning the basics behind the Chaos Toolkit.</p> <p>We can intuit things will fall apart if the sunset service cannot talk the astre service but, should the chain be part of much more complex graph of services, it could be difficult to fully understand all the branches that would be affected nor how badly. So, it may still be useful to experiment by injecting an expired certificate.</p>"},{"location":"reference/tutorial/#define-the-steady-state-hypothesis","title":"Define the Steady State Hypothesis","text":"<p>You can only learn if you know where you start from and what a good baseline for your application is.</p> <p>Here we assume two things:</p> <ul> <li>the services are running</li> <li>we can call the sunset service to retrieve the sunset time for a given city</li> </ul> <p>During our experiment, we will vary the conditions of the system and expect the state to remain valid.</p>"},{"location":"reference/tutorial/#changing-the-conditions","title":"Changing the Conditions","text":"<p>In this tutorial, we are going to set an expired certificate and restart the services. We will then call our application and see how it responds.</p>"},{"location":"reference/tutorial/#declare-an-experiment-to-observe-the-weakness","title":"Declare an Experiment to Observe the Weakness","text":"<p>At this stage, we can create an experiment that tells how the system behaves when a certificate expires.</p> JSON <p>```json { \u201ctitle\u201d: \u201cWhat is the impact of an expired certificate on our application chain?\u201d, \u201cdescription\u201d: \u201cIf a certificate expires, we should gracefully deal with the issue.\u201d, \u201ctags\u201d: [\u201ctls\u201d], \u201csteady-state-hypothesis\u201d: {     \u201ctitle\u201d: \u201cApplication responds\u201d,     \u201cprobes\u201d: [         {             \u201ctype\u201d: \u201cprobe\u201d,             \u201cname\u201d: \u201cthe-astre-service-must-be-running\u201d,             \u201ctolerance\u201d: true,             \u201cprovider\u201d: {                 \u201ctype\u201d: \u201cpython\u201d,                 \u201cmodule\u201d: \u201cos.path\u201d,                 \u201cfunc\u201d: \u201cexists\u201d,                 \u201carguments\u201d: {                     \u201cpath\u201d: \u201castre.pid\u201d                 }             }         },         {             \u201ctype\u201d: \u201cprobe\u201d,             \u201cname\u201d: \u201cthe-sunset-service-must-be-running\u201d,             \u201ctolerance\u201d: true,             \u201cprovider\u201d: {                 \u201ctype\u201d: \u201cpython\u201d,                 \u201cmodule\u201d: \u201cos.path\u201d,                 \u201cfunc\u201d: \u201cexists\u201d,                 \u201carguments\u201d: {                     \u201cpath\u201d: \u201csunset.pid\u201d                 }             }         },         {             \u201ctype\u201d: \u201cprobe\u201d,             \u201cname\u201d: \u201cwe-can-request-sunset\u201d,             \u201ctolerance\u201d: 200,             \u201cprovider\u201d: {                 \u201ctype\u201d: \u201chttp\u201d,                 \u201ctimeout\u201d: 3,                 \u201cverify_tls\u201d: false,                 \u201curl\u201d: \u201chttps://localhost:8443/city/Paris\u201d             }         }     ] }, \u201cmethod\u201d: [     {         \u201ctype\u201d: \u201caction\u201d,         \u201cname\u201d: \u201cswap-to-expired-cert\u201d,         \u201cprovider\u201d: {             \u201ctype\u201d: \u201cprocess\u201d,             \u201cpath\u201d: \u201ccp\u201d,             \u201carguments\u201d: \u201cexpired-cert.pem cert.pem\u201d         }     },     {         \u201ctype\u201d: \u201cprobe\u201d,         \u201cname\u201d: \u201cread-tls-cert-expiry-date\u201d,         \u201cprovider\u201d: {             \u201ctype\u201d: \u201cprocess\u201d,             \u201cpath\u201d: \u201copenssl\u201d,             \u201carguments\u201d: \u201cx509 -enddate -noout -in cert.pem\u201d         }     },     {         \u201ctype\u201d: \u201caction\u201d,         \u201cname\u201d: \u201crestart-astre-service-to-pick-up-certificate\u201d,         \u201cprovider\u201d: {             \u201ctype\u201d: \u201cprocess\u201d,             \u201cpath\u201d: \u201cpkill\u201d,             \u201carguments\u201d: \u201c\u2013echo -HUP -F astre.pid\u201d         }     },     {         \u201ctype\u201d: \u201caction\u201d,         \u201cname\u201d: \u201crestart-sunset-service-to-pick-up-certificate\u201d,         \u201cprovider\u201d: {             \u201ctype\u201d: \u201cprocess\u201d,             \u201cpath\u201d: \u201cpkill\u201d,             \u201carguments\u201d: \u201c\u2013echo -HUP -F sunset.pid\u201d         },         \u201cpauses\u201d: {             \u201cafter\u201d: 1         }     } ], \u201crollbacks\u201d: [     {         \u201ctype\u201d: \u201caction\u201d,         \u201cname\u201d: \u201cswap-to-valid-cert\u201d,         \u201cprovider\u201d: {             \u201ctype\u201d: \u201cprocess\u201d,             \u201cpath\u201d: \u201ccp\u201d,             \u201carguments\u201d: \u201cvalid-cert.pem cert.pem\u201d         }     },     {         \u201cref\u201d: \u201crestart-astre-service-to-pick-up-certificate\u201d     },     {         \u201cref\u201d: \u201crestart-sunset-service-to-pick-up-certificate\u201d     } ]</p> <p>}     ```</p> YAML <p>title: What is the impact of an expired certificate on our application chain? description: If a certificate expires, we should gracefully deal with the issue. tags: - tls steady-state-hypothesis:   title: Application responds   probes:   - type: probe     name: the-astre-service-must-be-running     tolerance: true     provider:       type: python       module: os.path       func: exists       arguments:         path: astre.pid   - type: probe     name: the-sunset-service-must-be-running     tolerance: true     provider:       type: python       module: os.path       func: exists       arguments:         path: sunset.pid   - type: probe     name: we-can-request-sunset     tolerance: 200     provider:       type: http       timeout: 3       verify_tls: false       url: https://localhost:8443/city/Paris method: - type: action   name: swap-to-expired-cert   provider:     type: process     path: cp     arguments: expired-cert.pem cert.pem - type: probe   name: read-tls-cert-expiry-date   provider:     type: process     path: openssl     arguments: x509 -enddate -noout -in cert.pem - type: action   name: restart-astre-service-to-pick-up-certificate   provider:     type: process     path: pkill     arguments: \u201c\u2013echo -HUP -F astre.pid\u201d - type: action   name: restart-sunset-service-to-pick-up-certificate   provider:     type: process     path: pkill     arguments: \u201c\u2013echo -HUP -F sunset.pid\u201d   pauses:     after: 1 rollbacks: - type: action   name: swap-to-valid-cert   provider:     type: process     path: cp     arguments: valid-cert.pem cert.pem - ref: restart-astre-service-to-pick-up-certificate - ref: restart-sunset-service-to-pick-up-certificate     ```</p>"},{"location":"reference/tutorial/#yaml","title":"```yaml","text":""},{"location":"reference/tutorial/#the-various-sections-of-an-experiment","title":"The Various Sections of an Experiment","text":"<p>Let\u2019s now go through the experiment blocks.</p> <p>The steady state hypothesis declares the various probes that will be applied as part of the hypothesis check.</p> <p>The hypothesis is played twice. The first time before we do anything else to ensure the system is indeed in a normal state, here we check the services are running by looking up their PID files and we call the sunset service which should respond OK. The second time the hypothesis is applied is after the conditions were changed in the system, to validate it is still in a normal state.</p> <p>The method is the block which changes the conditions of our system/application. Here, we swap the valid certificate for an expired one and restart the services by sending them a SIGHUP signal.</p> <p>Finally, the rollback section (which is optional) tries to remediate to the changes we made, in this case by swapping back to the valid certificate.</p>"},{"location":"reference/tutorial/#different-kinds-of-activities","title":"Different Kinds of Activities","text":"<p>It is interesting to notice that the hypothesis uses probes while rollbacks are made of actions only. The method may use both. The reason is that the hypothesis is only about querying the system while rollbacks act on it. Finally, it is often useful to query the system while we change the conditions, for future analysis.</p> <p>Probes and Actions are activities that do not differ in the way they work, it\u2019s only their goal that differs.</p> <p>You can create activities that make HTTP calls, execute processes or perform more complex operations through extensions (often implemented in Python). This tutorial showcases a bit of all of those.</p>"},{"location":"reference/tutorial/#tolerances-in-the-hypothesis","title":"Tolerances in the Hypothesis","text":"<p>Hypothesis probes expect a <code>tolerance</code> property which tells the Chaos Toolkit how to validate a certain aspect of the state. In our example, tolerances are rather simple. We check file exists and that a HTTP request returns a status code of <code>200</code>. Richer tolerances can be created by using regex or jsonpath.</p>"},{"location":"reference/tutorial/#run-the-experiment","title":"Run the Experiment","text":""},{"location":"reference/tutorial/#start-the-experiment-without-the-application","title":"Start the Experiment without the Application","text":"<p>To run the experiment, simply execute the following command:</p> <pre><code>chaos run experiment.json\n</code></pre> <pre><code>[2018-05-14 18:38:04 INFO] Validating the experiment's syntax\n[2018-05-14 18:38:04 INFO] Experiment looks valid\n[2018-05-14 18:38:04 INFO] Running experiment: What is the impact of an expired certificate on our application chain?\n[2018-05-14 18:38:04 INFO] Steady state hypothesis: Application responds\n[2018-05-14 18:38:04 INFO] Probe: the-astre-service-must-be-running\n[2018-05-14 18:38:04 CRITICAL] Steady state probe 'the-astre-service-must-be-running' is not in the given tolerance so failing this experiment\n[2018-05-14 18:38:04 INFO] Let's rollback...\n[2018-05-14 18:38:04 INFO] Rollback: swap-to-valid-cert\n[2018-05-14 18:38:04 INFO] Action: swap-to-valid-cert\n[2018-05-14 18:38:04 INFO] Rollback: None\n[2018-05-14 18:38:04 INFO] Action: restart-astre-service-to-pick-up-certificate\n[2018-05-14 18:38:04 INFO] Rollback: None\n[2018-05-14 18:38:04 INFO] Action: restart-sunset-service-to-pick-up-certificate\n[2018-05-14 18:38:04 INFO] Pausing after activity for 1s...\n[2018-05-14 18:38:05 INFO] Experiment ended with status: failed\n</code></pre> <p>Because we ran this command before we even started our application, our steady-state hypothesis failed and bailed the experiment immediately.</p> <p>Note that the rollbacks will run anyway. They are only bypassed when you send a SIGINT or SIGTERM signal to the <code>chaos</code> process because the toolkit assumes you may want to review your system.</p>"},{"location":"reference/tutorial/#start-the-application","title":"Start the Application","text":"<p>You may now run the application.</p> <p>First, copy the valid certificate as follows:</p> <pre><code>cp valid-cert.pem cert.pem\n</code></pre> <p>Next, start the services, in one terminal:</p> <pre><code>python3 astre.py\n</code></pre> <p><pre><code>[14/May/2018:16:11:09] ENGINE Listening for SIGTERM.\n[14/May/2018:16:11:09] ENGINE Listening for SIGHUP.\n[14/May/2018:16:11:09] ENGINE Listening for SIGUSR1.\n[14/May/2018:16:11:09] ENGINE Bus STARTING\n[14/May/2018:16:11:09] ENGINE Serving on https://127.0.0.1:8444\n[14/May/2018:16:11:09] ENGINE Bus STARTE\n</code></pre> Then, in another terminal:</p> <pre><code>python3 sunset.py\n</code></pre> <pre><code>[14/May/2018:16:13:58] ENGINE Listening for SIGTERM.\n[14/May/2018:16:13:58] ENGINE Listening for SIGHUP.\n[14/May/2018:16:13:58] ENGINE Listening for SIGUSR1.\n[14/May/2018:16:13:58] ENGINE Bus STARTING\n[14/May/2018:16:13:58] ENGINE Serving on https://127.0.0.1:8443\n[14/May/2018:16:13:58] ENGINE Bus STARTED\n</code></pre> <p>Now you may perform a simple call:</p> <pre><code>curl -k https://localhost:8443/city/Paris\n</code></pre> <pre><code>The sunset will occur at 2018-05-14T21:23:09+02:00 in Paris\n</code></pre> <p>What happens is that the sunset service performs a call to the astre service for the data and simply render them to you, as plain text. Both services are chained together over HTTPS.</p>"},{"location":"reference/tutorial/#run-the-experiment_1","title":"Run the Experiment","text":"<p>Now your application is running, execute the experiment once again:</p> <pre><code>chaos run experiment.json\n</code></pre> <pre><code>[2018-05-14 18:41:09 INFO] Validating the experiment's syntax\n[2018-05-14 18:41:09 INFO] Experiment looks valid\n[2018-05-14 18:41:09 INFO] Running experiment: What is the impact of an expired certificate on our application chain?\n[2018-05-14 18:41:09 INFO] Steady state hypothesis: Application responds\n[2018-05-14 18:41:09 INFO] Probe: the-astre-service-must-be-running\n[2018-05-14 18:41:09 INFO] Probe: the-sunset-service-must-be-running\n[2018-05-14 18:41:09 INFO] Probe: we-can-request-sunset\n[2018-05-14 18:41:09 INFO] Steady state hypothesis is met!\n[2018-05-14 18:41:09 INFO] Action: swap-to-expired-cert\n[2018-05-14 18:41:09 INFO] Probe: read-tls-cert-expiry-date\n[2018-05-14 18:41:09 INFO] Action: restart-astre-service-to-pick-up-certificate\n[2018-05-14 18:41:09 INFO] Action: restart-sunset-service-to-pick-up-certificate\n[2018-05-14 18:41:09 INFO] Pausing after activity for 1s...\n[2018-05-14 18:41:10 INFO] Steady state hypothesis: Application responds\n[2018-05-14 18:41:10 INFO] Probe: the-astre-service-must-be-running\n[2018-05-14 18:41:10 INFO] Probe: the-sunset-service-must-be-running\n[2018-05-14 18:41:10 INFO] Probe: we-can-request-sunset\n[2018-05-14 18:41:10 CRITICAL] Steady state probe 'we-can-request-sunset' is not in the given tolerance so failing this experiment\n[2018-05-14 18:41:10 INFO] Let's rollback...\n[2018-05-14 18:41:10 INFO] Rollback: swap-to-valid-cert\n[2018-05-14 18:41:10 INFO] Action: swap-to-valid-cert\n[2018-05-14 18:41:10 INFO] Rollback: None\n[2018-05-14 18:41:10 INFO] Action: restart-astre-service-to-pick-up-certificate\n[2018-05-14 18:41:10 INFO] Rollback: None\n[2018-05-14 18:41:10 INFO] Action: restart-sunset-service-to-pick-up-certificate\n[2018-05-14 18:41:10 INFO] Pausing after activity for 1s...\n[2018-05-14 18:41:11 INFO] Experiment ended with status: failed\n</code></pre> <p>Each activity is run in the order it appears in the experiment. Notice now how the hypothesis is not met after we swapped the certificates. But, we learn something interesting, even if expected, using an expired certificate does not prevent our services to even start.</p>"},{"location":"reference/tutorial/#report-on-your-findings","title":"Report on your Findings","text":""},{"location":"reference/tutorial/#review-the-journal-of-the-run","title":"Review the Journal of the Run","text":"<p>You may now review the journal generated by the run:</p> <pre><code>cat journal.json\n</code></pre> <p>It contains the activities runs and the output of each of them.</p>"},{"location":"reference/tutorial/#generate-a-report","title":"Generate a Report","text":"<p>You can generate a PDF (or HTML, markdown\u2026) report from the journal if you install the chaostoolkit-reporting plugin first:</p> <pre><code>chaos report --export-format=pdf journal.json report.pdf\n</code></pre>"},{"location":"reference/tutorial/#learnings-and-responses","title":"Learnings and Responses","text":"<p>In this experiment, we proved what we guessed initially, that an expired certificate will create trouble and break the application for our users. What could be the responses?</p> <ul> <li>Use a circuit-breaker to provide a more meaningful, and controlled, answer   to the caller</li> <li>Prevent the service to start when the certificate it uses is expired</li> <li>Put some monitoring in place on our certificates and trigger an alert when   they get close to their end date</li> <li>Move to Let\u2019s Encrypt and renew our certs automatically</li> </ul> <p>For each of these potential responses, you could create an experiment should they unearth potential new questions.</p>"},{"location":"reference/tutorial/#next","title":"Next?","text":"<p>An experiment is never the end game. The flow should be continuous and you should create and run experiments regularly.</p>"},{"location":"reference/walkthrough/","title":"Learning Chaos Toolkit by Practicing","text":"<p>You can find progressive labs here to help you use Chaos Toolkit in much more realistic settings than the base tutorials.</p>"},{"location":"reference/api/experiment/","title":"An Open API for Chaos Engineering Experiments","text":""},{"location":"reference/api/experiment/#introduction","title":"Introduction","text":"<p>The purpose of this specification is to formalize the elements of a Chaos Engineering experiment and offer a way to federate the community around a common syntax and semantic.</p> <p>As a fairly recent field, Chaos Engineering is a dynamic and its foundations are still emerging. However, it appears certain concepts are settling down enough to start agreeing on a shared understanding.</p> <p>This specification is not prescriptive and does not aim at forcing the community into one direction, rather it strives at providing a common vocabulary that new practitioners can easily make sense of.</p> <p>It is necessary to appreciate that this document does not specify what tools, such as the Chaos Monkey or similar, should look like. Instead, this document specifies how Chaos Engineering Experiment could be described, shared and conducted collaboratively.</p>"},{"location":"reference/api/experiment/#conventions-used-in-this-document","title":"Conventions Used in This Document","text":"<p>The key words \u201cMUST\u201d, \u201cMUST NOT\u201d, \u201cREQUIRED\u201d, \u201cSHALL\u201d, \u201cSHALL NOT\u201d, \u201cSHOULD\u201d, \u201cSHOULD NOT\u201d, \u201cRECOMMENDED\u201d, \u201cMAY\u201d, and \u201cOPTIONAL\u201d in this document are to be interpreted as described in RFC 2119.</p> <p>The terms \u201cJSON\u201d, \u201cJSON text\u201d, \u201cJSON value\u201d, \u201cmember\u201d, \u201celement\u201d, \u201cobject\u201d, \u201carray\u201d, \u201cnumber\u201d, \u201cstring\u201d, \u201cboolean\u201d, \u201ctrue\u201d, \u201cfalse\u201d, and \u201cnull\u201d in this document are to be interpreted as defined in RFC 7159.</p>"},{"location":"reference/api/experiment/#other-formats","title":"Other formats","text":"<p>While this specification uses JSON to define its elements, implementations may allow loading from other formats, such as YAML. As long as the output of such format respects the specification herein.</p>"},{"location":"reference/api/experiment/#chaos-engineering-elements","title":"Chaos Engineering Elements","text":""},{"location":"reference/api/experiment/#overview","title":"Overview","text":"<p>An Experiment is one possible description of the principles of the Chaos Engineering. The intention of such a description is to provide shared understanding around a hypothesis on how to discover system\u2019s behavior under certain conditions.</p> <p>An Experiment declares a steady state hypothesis, alongside probes to validate this steady state is met, and a method as a sequence actions and probes, to interact and query the system respectively.</p> <p>By using a variety of probes, experiments should gather information to sense behaviors in the system, potentially leading to systemic patterns that can be stabilized.</p>"},{"location":"reference/api/experiment/#experiment","title":"Experiment","text":"<p>A Chaos Engineering experiment, or simply an experiment, describes both the elements and the order in which they should be applied.</p> <p>An experiment is a JSON object.</p> <p>An experiment MUST declare:</p> <ul> <li>a <code>title</code> property</li> <li>a <code>description</code> property</li> <li>a <code>method</code> property</li> </ul> <p>The experiment\u2019s <code>title</code> and <code>description</code> are meant for humans and therefore should be as descriptive as possible to clarify the experiment\u2019s rationale.</p> <p>Title and description are JSON strings with no maximum length.</p> <p>An experiment SHOULD also declare:</p> <ul> <li>a <code>steady-state-hypothesis</code> property</li> <li>a <code>rollbacks</code> property</li> </ul> <p>An experiment MAY finally declare:</p> <ul> <li>a <code>tags</code> property</li> <li>a <code>secrets</code> property</li> <li>an <code>extension</code> property</li> <li>a <code>contributions</code> property</li> <li>a <code>controls</code> property</li> </ul> <p>Tags provide a way of categorizing experiments. It is a sequence of JSON strings.</p> <p>Extensions define opaque payloads for vendors to carry valuable information.</p> <p>Contribution describes valuable properties of the target system, such as \u201creliability\u201d or \u201cdurability\u201d, that an experiment contribute to. This information can be aggregated together with other experiments\u2019 contributions to better appreciate where the focus is put and where it is not.</p> <p>Controls describe out-of-band capabilities applied during the experiment\u2019s execution.</p>"},{"location":"reference/api/experiment/#steady-state-hypothesis","title":"Steady State Hypothesis","text":"<p>The Steady State Hypothesis element describes what normal looks like in your system before the Method element is applied. If the steady state is not met, the Method element is not applied and the experiment MUST bail out.</p> <p>The Steady State Hypothesis element is a JSON object.</p> <p>Steady State Hypothesis element MUST declare:</p> <ul> <li>a <code>title</code> property</li> <li>a <code>probes</code> property</li> </ul> <p>The <code>title</code> is meant for humans and therefore should clarify the rationale for this hypothesis.</p> <p>Each Probe MUST define a <code>tolerance</code> property that acting as a gate mechanism for the experiment to carry on or bail. Any Probe that does not fall into the tolerance zone MUST fail the experiment.</p> <p>Steady State Hypothesis element MAY declare:</p> <ul> <li>a <code>controls</code> property</li> </ul> <p>Controls describe out-of-band capabilities applied during the experiment\u2019s execution.</p>"},{"location":"reference/api/experiment/#steady-state-probe-tolerance","title":"Steady State Probe Tolerance","text":"<p>Probes of the Steady State Hypothesis MUST declare an additional property named <code>tolerance</code>.</p> <p>The <code>tolerance</code> property\u2019s value MUST be one of:</p> <ul> <li>a scalar: JSON string, number (an integer), boolean</li> <li>a sequence of scalars: JSON string, number, boolean</li> <li>an object</li> </ul> <p>In the case of a scalar or the sequence, the tolerance validation MUST be strict. The value returned by the Probe MUST be checked against the scalar value. The experiment MUST bail when both fail to match.</p> <p>When the <code>tolerance</code> is a sequence. If it has only two values, those two values represent a lower and upper bound within which the Probe returned value must fall (inclusive).</p> <p>When the sequence has more than two elements, the Probe returned value must be contained in that sequence.</p> <p>When the <code>tolerance</code> is an object, it MUST have a <code>type</code> property which MUST be one of the followings: <code>\"probe\"</code>, <code>\"regex\"</code>, <code>\"jsonpath\"</code> or <code>\"range\"</code>.</p> <p>When the <code>type</code> property is <code>\"probe\"</code>, the object MUST be a Probe that is applied. The probe should take two arguments, <code>value</code> and <code>secrets</code> where the value is the Probe returned value and secrets a Secret object or <code>null</code>. Its returned status MUST be successful for the <code>tolerance</code> to be considered valid.</p> <p>When the <code>type</code> property is <code>\"regex\"</code>, the object MUST have a <code>pattern</code> property which MUST be a valid regular expression. The <code>tolerance</code> succeeds if the Probe returned value is matched against the pattern. Object MAY have a <code>target</code> property which MUST be a valid value returned for a given provider.</p> <p>When the <code>type</code> property is <code>\"jsonpath\"</code>, the object MUST have a <code>path</code> property which MUST be a valid JSON Path. In addition, the object MAY have a <code>expect</code> property which is used to compare each value matched by the JSON Path to that value. The <code>expect</code> property value MUST be a scalar. When the <code>expect</code> property is not present, the <code>tolerance</code> succeeds if the JSON Path matched at least one item.</p> <p>When the <code>type</code> property is <code>\"range\"</code>, the object MUST have a <code>range</code>  property which MUST be a sequence of length two. The first entry of the sequence MUST be the lower bound and the second entry MUST be the upper bound. Both entries MUST be JSON numbers.</p> <p>In addition, when the Probe returned value is an object with a <code>status</code> property, the tested value is the value of that property.</p> <p>Some examples of <code>tolerance</code> properties.</p> <p>A boolean tolerance:</p> JSONYAML <pre><code>\"tolerance\": true\n</code></pre> <pre><code>tolerance: true\n</code></pre> <p>A integer tolerance:</p> JSONYAML <pre><code>\"tolerance\": 8\n</code></pre> <pre><code>tolerance: 8\n</code></pre> <p>A string tolerance:</p> JSONYAML <pre><code>\"tolerance\": \"OK\"\n</code></pre> <pre><code>tolerance: \"OK\"\n</code></pre> <p>A sequence tolerance with lower and upper bounds:</p> JSONYAML <pre><code>\"tolerance\": [4, 9]\n</code></pre> <pre><code>tolerance:\n- 4\n- 9\n</code></pre> <p>A sequence tolerance, the value must be contained in that sequence:</p> JSONYAML <pre><code>\"tolerance\": [4, 9, 78]\n</code></pre> <pre><code>tolerance:\n- 4\n- 9\n- 78\n</code></pre> <p>A Probe tolerance:</p> JSONYAML <pre><code>\"tolerance\": {\n\"type\": \"probe\",\n\"name\": \"should-exist\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"os.path\",\n\"func\": \"exists\",\n\"arguments\": {\n\"path\": \"some/file\"\n}\n}\n}\n</code></pre> <pre><code>tolerance:\ntype: probe\nname: should-exist\nprovider:\ntype: python\nmodule: os.path\nfunc: exists\narguments:\npath: some/file\n</code></pre> <p>A regex tolerance:</p> JSONYAML <pre><code>\"tolerance\": {\n\"type\": \"regex\",\n\"pattern\": \"[0-9]{3}\"\n}\n</code></pre> <pre><code>tolerance:\ntype: regex\npattern: '[0-9]{3}'\n</code></pre> <p>A regex tolerance with a non default target:</p> JSONYAML <pre><code>\"tolerance\": {\n\"type\": \"regex\",\n\"target\": \"stdout\",\n\"pattern\": \"[0-9]{2}\"\n}\n</code></pre> <pre><code>tolerance:\ntype: regex\ntarget: stdout\npattern: '[0-9]{2}'\n</code></pre> <p>A jsonpath tolerance:</p> JSONYAML <pre><code>\"tolerance\": {\n\"type\": \"jsonpath\",\n\"path\": \"foo[*].baz\"\n}\n</code></pre> <pre><code>tolerance:\ntype: jsonpath\npath: 'foo[*].baz'\n</code></pre> <p>A jsonpath tolerance with an expected value to match:</p> JSONYAML <pre><code>\"tolerance\": {\n\"type\": \"jsonpath\",\n\"path\": \"foo[*].baz\",\n\"expect\": 4\n}\n</code></pre> <pre><code>tolerance:\ntype: jsonpath\npath: 'foo[*].baz'\nexpect: 4\n</code></pre> <p>Two range tolerances:</p> JSONYAMLJSONYAML <pre><code>\"tolerance\": {\n\"type\": \"range\",\n\"range\": [4, 8]\n}\n</code></pre> <pre><code>tolerance:\ntype: range\nrange:\n- 4\n- 8\n</code></pre> <pre><code>\"tolerance\": {\n\"type\": \"range\",\n\"range\": [4.6, 8.9]\n}\n</code></pre> <pre><code>tolerance:\ntype: range\nrange:\n- 4.6\n- 8.9\n</code></pre>"},{"location":"reference/api/experiment/#contributions","title":"Contributions","text":"<p>Contributions describe the valuable system properties an experiment targets as well as how much they contributes to it. Those properties usually refer to aspects stakeholders care about. Aggregated they offer a powerful metric about the effort and focus on building confidence across the system.</p> <p>Contributions are declared under the top-level <code>contributions</code> property as an object. Properties of that object MUST be JSON strings representing the name of a contribution. The values MUST be the weight of a given contribution and MUST be one of <code>\"high\"</code>, <code>\"medium\"</code>, <code>\"low\"</code> or <code>\"none\"</code>. The <code>\"none\"</code> value is not the same as a missing contribution from the <code>contributions</code> object. That value marks explicitly that a given contribution is not addressed by an experiment. A missing contribution means impact via this experiment is unknown for this contribution.</p> <p>Here is a contribution example:</p> JSONYAML <pre><code>\"contributions\": {  \"reliability\": \"high\",\n\"security\": \"none\",\n\"scalability\": \"medium\"\n}\n</code></pre> <pre><code>contributions:\nreliability: high\nsecurity: none\nscalability: medium\n</code></pre> <p>This sample tells us that the experiment contributes mainly to exploring reliability of the system and moderately to its scalability. However, it is explicit here this experiment does not address security.</p> <p>On the other hand:</p> JSONYAML <pre><code>\"contributions\": {  \"reliability\": \"high\",\n\"scalability\": \"medium\"\n}\n</code></pre> <pre><code>contributions:\nreliability: high\nscalability: medium\n</code></pre> <p>This tells us the same about reliability and scalability but we can\u2019t presume anything about security.</p>"},{"location":"reference/api/experiment/#method","title":"Method","text":"<p>The Method describes the sequence of Probe and Action elements to apply. The Method is declared under <code>method</code> property at the top-level of the experiment.</p> <p>The <code>method</code> MAY have at least one element which can be either a Probe or an Action.</p> <p>The elements MUST be applied in the order they are declared.</p> <p>An empty <code>method</code> is allowed for running experiments with Steady States Hypothesis only.</p>"},{"location":"reference/api/experiment/#probe","title":"Probe","text":"<p>A Probe collects information from the system during the experiment.</p> <p>A Probe is a JSON object. A Probe is declared fully or reference another Probe through the <code>ref</code> property.</p> <p>When declared fully, a Probe MUST declare:</p> <ul> <li>a <code>type</code> property</li> <li>a <code>name</code> property</li> <li>a <code>provider</code> property</li> </ul> <p>The <code>type</code> property MUST be the JSON string <code>\"probe\"</code>. </p> <p>The <code>name</code> property is a free-form JSON string that MAY be considered as an identifier within the experiment.</p> <p>It MAY also declare:</p> <ul> <li>a <code>configuration</code> property</li> <li>a <code>background</code> property</li> <li>a <code>controls</code> property</li> </ul> <p>The <code>configuration</code> property MUST be a JSON string referencing an identifier declared in the top-level <code>configuration</code> property. It is assumed that when not declared, the Probe requires no configuration.</p> <p>The <code>background</code> property MUST be a JSON boolean value either <code>true</code> or <code>false</code>. It is assumed that, when that property is not declared, it is set to <code>false</code>. When that property is set to <code>true</code> it indicates the Probe MUST not block and the next Action or Probe should immediately be applied.</p> <p>When a Probe references another Probe in the Experiment, the Probe MUST declare a single property called <code>ref</code>.</p> <p>The <code>ref</code> property MUST be a JSON string which MUST be the name of a declared Probe.</p> <p>Controls describe out-of-band capabilities applied during the experiment\u2019s execution.</p>"},{"location":"reference/api/experiment/#action","title":"Action","text":"<p>An Action performs an operation against the system.</p> <p>An Action collects information from the system during the experiment.</p> <p>An Action is a JSON object. An Action is declared fully or reference another Action through the <code>ref</code> property.</p> <p>When declared fully, a Action MUST declare:</p> <ul> <li>a <code>type</code> property</li> <li>a <code>name</code> property</li> <li>a <code>provider</code> property</li> </ul> <p>The <code>type</code> property MUST be the JSON string <code>\"action\"</code>. </p> <p>The <code>name</code> property is a free-form JSON string that MAY be considered as an identifier within the experiment.</p> <p>It MAY also declare:</p> <ul> <li>a <code>controls</code> property</li> <li>a <code>configuration</code> property</li> <li>a <code>background</code> property</li> <li>a <code>pauses</code> property</li> </ul> <p>The <code>configuration</code> property MUST be a JSON string referencing an identifier declared in the top-level <code>configuration</code> property. It is assumed that when not declared, the Action requires no configuration.</p> <p>The <code>background</code> property MUST be a JSON boolean value either <code>true</code> or <code>false</code>. It is assumed that, when that property is not declared, it is set to <code>false</code>. When that property is set to <code>true</code> it indicates the Action MUST not block and the next Action or Probe should immediately be applied.</p> <p>The <code>pauses</code> property MUST be a JSON object which MAY have one or the two following properties:</p> <ul> <li><code>before</code></li> <li><code>after</code></li> </ul> <p>In both cases, the value MUST be JSON number indicating the number of seconds to wait before continuing. The <code>before</code> pause MUST be performed before the Action while the <code>after</code> MUST be performed afterwards.</p> <p>When a Action references another Action in the Experiment, the Action MUST declare a single property called <code>ref</code>.</p> <p>The <code>ref</code> property MUST be a JSON string which MUST be the name of a declared Action.</p> <p>Controls describe out-of-band capabilities applied during the experiment\u2019s execution.</p>"},{"location":"reference/api/experiment/#action-or-probe-provider","title":"Action or Probe Provider","text":"<p>A provider MUST be a JSON object which MUST declare a <code>type</code> property that decides the other expected properties.</p> <p>The <code>type</code> property MUST be one of <code>\"python\"</code>, <code>\"http\"</code> or <code>\"process\"</code>.</p> <p>Info</p> <p>This specification only mentions those three providers but it could grow to support more, such as <code>\"go\"</code>, <code>\"rust\"</code> or <code>\"grpc\"</code>\u2026</p>"},{"location":"reference/api/experiment/#python-provider","title":"Python Provider","text":"<p>A Python Provider declares a Python function to be applied.</p> <p>A Python Provider MUST declare the following:</p> <ul> <li>a <code>module</code> property</li> <li>a <code>func</code> property</li> </ul> <p>It SHOULD also declare an <code>arguments</code> property when the function expects them.</p> <p>The <code>module</code> property is the fully qualified module exposing the function. It MUST be a JSON string.</p> <p>The <code>func</code> property is the name of the function to apply. It MUST be a JSON string.</p> <p>When provided, the <code>arguments</code> property MUST be a JSON object which properties are the names of the function\u2019s arguments. When a function\u2019s signature has default values for some of its arguments, those MAY be omitted from the <code>arguments</code> object. In that case, those default values will be used.</p> <p>Argument values MUST be valid JSON entities.</p> <p>In addition, the <code>provider</code> object MAY declare a <code>secrets</code> property. This <code>secrets</code> property MUST be a JSON array of JSON strings referencing identifiers declared in the top-level <code>secrets</code> property. It is assumed that when not declared, the Action requires no secrets.</p>"},{"location":"reference/api/experiment/#http-provider","title":"HTTP Provider","text":"<p>A HTTP Provider declares a URL to be called.</p> <p>A HTTP Provider MUST declare the following:</p> <ul> <li>a <code>url</code> property</li> </ul> <p>The <code>url</code> property MUST be a JSON string representing a URL as per RFC 3986.</p> <p>In addition, the <code>provider</code> object MAY declare any of the followings:</p> <ul> <li>a <code>method</code> property</li> <li>a <code>headers</code> property</li> <li>a <code>expected_status</code> property</li> <li>a <code>arguments</code> property</li> <li>a <code>timeout</code> property</li> <li>a <code>secrets</code> property</li> </ul> <p>The <code>method</code> property MUST be a JSON string, such as <code>\"POST\"</code>, as per RFC 7231. It defaults to <code>\"GET\"</code>.</p> <p>The <code>headers</code> property MUST be a JSON object which properties are header names and values are header values, as per RFC 7231.</p> <p>When provided, the <code>arguments</code> property MUST be a JSON object which properties are parameters of the HTTP request.</p> <p>When <code>method</code> is <code>\"GET\"</code>, the <code>arguments</code> are mapped as a query-string of the URL. Otherwise, the <code>arguments</code> are passed as the request body\u2019s data and the encoding depends on the <code>\"Content-Type\"</code> provided in the <code>headers</code> object.</p> <p>The <code>timeout</code> property MUST be either a JSON number specifying how long the request should take to complete. Or a JSON array that MUST made of two JSON numbers, the first one indicating the connection timeout, the second the request timeout to respond.</p> <p>The <code>secrets</code> property MUST be a JSON array of JSON strings referencing identifiers declared in the top-level <code>secrets</code> property. It is assumed that when not declared, the Action requires no secrets.</p> <p>The HTTP provider MUST return an object with the following properties:</p> <ul> <li><code>status</code> which MUST be a valid HTTP returned code as defined in   RFC 7231</li> <li><code>headers</code> which MUST be an object</li> <li><code>body</code> which MUST be a string</li> </ul>"},{"location":"reference/api/experiment/#process-provider","title":"Process Provider","text":"<p>A Process Provider declares a process to be called.</p> <p>A Process Provider MUST declare the following:</p> <ul> <li>a <code>path</code> property</li> </ul> <p>The <code>path</code> property MUST be a JSON string of a path to an executable.</p> <p>In addition, the <code>provider</code> object MAY declare any of the followings:</p> <ul> <li>a <code>arguments</code> property</li> <li>a <code>timeout</code> property</li> <li>a <code>secrets</code> property</li> </ul> <p>The <code>arguments</code> property MUST be a JSON array or a JSON string which defines the process arguments. Those arguments are passed in order to the process arguments.</p> <p>The <code>timeout</code> property MUST be a JSON number specifying how long the process should take to complete.</p> <p>The <code>secrets</code> property MUST be a JSON array of JSON strings referencing identifiers declared in the top-level <code>secrets</code> property. It is assumed that when not declared, the Action requires no secrets.</p> <p>The Process provider MUST return an object with the following properties:</p> <ul> <li><code>status</code> which MUST be a scalar of the process return code</li> <li><code>stdout</code> which MUST be bytes sequence encoded with the <code>UTF-8</code> encoding   representing the stdout payload of the process</li> <li><code>stderr</code> which MUST be bytes sequence encoded with the <code>UTF-8</code> encoding   representing the stderr payload of the process</li> </ul>"},{"location":"reference/api/experiment/#rollbacks","title":"Rollbacks","text":"<p>Rollbacks declare the sequence of actions that attempt to put the system back to its initial state.</p> <p>The experiment MAY declare a single <code>rollbacks</code> property which is a JSON array consisting of Actions.</p> <p>A failed rollback MUST not bail the sequence of rollbacks.</p>"},{"location":"reference/api/experiment/#secrets","title":"Secrets","text":"<p>Secrets declare values that need to be passed on to Actions or Probes in a secure manner.</p> <p>The <code>secrets</code> property MUST be a JSON object. Its properties are identifiers referenced by Actions and Probes.</p> <p>The value of each identifier is a JSON object which properties are the secrets keys and the properties values are the secrets values.</p> <p>Referenced secrets MUST be injected into probes and actions when they are applied. Probes and actions MUST NOT modify the secrets.</p> <p>Secrets MUST be passed a mapping of keys and values to probes and actions.</p> <p>An example of a <code>secrets</code> element at the top-level:</p> JSONYAML <pre><code>{\n\"secrets\": {\n\"kubernetes\": {\n\"token\": \"XYZ\"\n}\n}\n}\n</code></pre> <pre><code>secrets:\nkubernetes:\ntoken: XYZ\n</code></pre> <p>This can then referenced from probes or actions:</p> JSONYAML <pre><code>{\n\"type\": \"probe\",\n\"secrets\": \"kubernetes\"\n}\n</code></pre> <pre><code>type: probe\nsecrets: kubernetes\n</code></pre>"},{"location":"reference/api/experiment/#inline-secrets","title":"Inline Secrets","text":"<p>Secrets MAY be inlined in the Experiment directly.</p> JSONYAML <pre><code>{\n\"secrets\": {\n\"kubernetes\": {\n\"token\": \"ABCDEF-1234-XYZ\"\n}\n}\n}\n</code></pre> <pre><code>secrets:\nkubernetes:\ntoken: ABCDEF-1234-XYZ\n</code></pre>"},{"location":"reference/api/experiment/#environment-secrets","title":"Environment Secrets","text":"<p>Secrets MAY be retrieved from the environment. In that case, they must be declared as a JSON object with a <code>type</code> property set to <code>\"env\"</code>. The environment variable MUST be declared in the <code>key</code> property as a JSON string.</p> JSONYAML <pre><code>{\n\"secrets\": {\n\"kubernetes\": {\n\"token\": {\n\"type\": \"env\",\n\"key\": \"KUBERNETES_TOKEN\"\n}\n}\n}\n}\n</code></pre> <pre><code>secrets:\nkubernetes:\ntoken:\ntype: env\nkey: KUBERNETES_TOKEN\n</code></pre>"},{"location":"reference/api/experiment/#vault-secrets","title":"Vault Secrets","text":"<p>Secrets MAY be retrieved from a HashiCorp vault instance. In that case, they must be declared as a JSON object with a <code>type</code> property set to <code>\"vault\"</code>. The path to the key MUST be declared in the <code>path</code> property as a JSON string.</p> JSONYAML <pre><code>{\n\"secrets\": {\n\"myapp\": {\n\"token\": {\n\"type\": \"vault\",\n\"path\": \"secrets/something\"\n}\n}\n}\n}\n</code></pre> <pre><code>secrets:\nmyapp:\ntoken:\ntype: vault\npath: secrets/something\n</code></pre> <p>When only the <code>path</code> property is set, the whole secrets payload at the given path MUST be set to the Chaos Toolkit secret key.</p> <p>A <code>key</code> property MAY be set to select a specific value from the Vault secret payload.</p> <p>The Vault url MUST be provided in the Configuration section via the <code>\"vault_addr\"</code> property.</p> <p>Vault authentication MUST at least support:</p> <ul> <li>token based authentication   The token MUST be provided in the Configuration section via the   <code>\"vault_token\"</code> property</li> <li>AppRole authentication   The role-id and secret-id MUST be provided in the Configuration section via   the <code>\"vault_role_id\"</code> and <code>\"vault_role_secret\"</code> properties</li> </ul> <p>The Vault KV secrets version MAY be provided via the <code>\"vault_kv_version\"</code> Configuration key. If not provided, it MUST default to <code>\"2\"</code>.</p> <p>Examples:</p> <p>Vault secret at path <code>secret/something</code>:</p> JSONYAML <pre><code>{\n\"foo\": \"bar\",\n\"baz\": \"hello\"\n}\n</code></pre> <pre><code>foo: bar\nbaz: hello\n</code></pre> <p>Then in your Chaos Toolkit experiment:</p> JSONYAML <pre><code>{\n\"secrets\": {\n\"myapp\": {\n\"token\": {\n\"type\": \"vault\",\n\"path\": \"secrets/something\"\n}\n}\n}\n}\n</code></pre> <pre><code>secrets:\nmyapp:\ntoken:\ntype: vault\npath: secrets/something\n</code></pre> <p>means the secrets will become:</p> JSONYAML <pre><code>\"token\": {\n\"foo\": \"bar\",\n\"baz\": \"hello\"\n}\n</code></pre> <pre><code>token:\nfoo: bar\nbaz: hello\n</code></pre> <p>However:</p> JSONYAML <pre><code>{\n\"secrets\": {\n\"myapp\": {\n\"token\": {\n\"type\": \"vault\",\n\"path\": \"secrets/something\",\n\"key\": \"foo\"\n}\n}\n}\n}\n</code></pre> <pre><code>secrets:\nmyapp:\ntoken:\ntype: vault\npath: secrets/something\nkey: foo\n</code></pre> <p>means the secrets will become:</p> JSONYAML <pre><code>\"token\": \"bar\"\n</code></pre> <pre><code>token: bar\n</code></pre>"},{"location":"reference/api/experiment/#configuration","title":"Configuration","text":"<p>Configuration is meant to provide runtime values to actions and probes.</p> <p>The <code>configuration</code> element MUST be a JSON object. The value of each property MUST be a JSON string, number, or object whose properties are considered the configuration lookup. Configuration must be passed to all Probes and actions requiring it. Probes and actions MUST NOT modify the configuration.</p> <p>Configurations MUST be passed a mapping of keys and values to probes and actions.</p> <p>An example of a <code>configuration</code> element at the top level:</p> JSONYAML <pre><code>{\n\"configuration\": {\n\"some_service\": \"http://127.0.0.1:8080\",\n\"vault_addr\": {\n\"type\": \"env\",\n\"key\": \"VAULT_ADDR\"\n}\n}\n}\n</code></pre> <pre><code>configuration:\nsome_service: 'http://127.0.0.1:8080'\nvault_addr:\ntype: env\nkey: VAULT_ADDR\n</code></pre>"},{"location":"reference/api/experiment/#inline-configurations","title":"Inline Configurations","text":"<p>Configurations MAY be inlined in the Experiment directly.</p> JSONYAML <pre><code>{\n\"configuration\": {\n\"some-service\": \"http://127.0.0.1:8080\"\n}\n}\n</code></pre> <pre><code>configuration:\nsome-service: 'http://127.0.0.1:8080'\n</code></pre>"},{"location":"reference/api/experiment/#environment-configurations","title":"Environment Configurations","text":"<p>Configurations MAY be retrieved from the environment. In that case, they must be declared as a JSON object with a <code>type</code> property set to <code>\"env\"</code>. The environment variable MUST be declared in the <code>key</code> property as a JSON string.</p> <p>The <code>default</code> key is OPTIONAL and MAY be used when the environment variable can be undefined and fallback to a default value for the experiment.</p> JSONYAML <pre><code>{\n\"configuration\": {\n\"vault_addr\": {\n\"type\": \"env\",\n\"key\": \"VAULT_ADDR\",\n\"default\": \"https://127.0.0.1:8200\"\n}\n}\n}\n</code></pre> <pre><code>configuration:\nvault_addr:\ntype: env\nkey: VAULT_ADDR\ndefault: 'https://127.0.0.1:8200'\n</code></pre>"},{"location":"reference/api/experiment/#variable-substitution","title":"Variable Substitution","text":"<p>Probes and Actions argument values MAY be dynamically resolved at runtime. </p> <p>Dynamic values MUST follow the syntax <code>${name}</code> where <code>name</code> is an identifier declared in either the Configuration or Secrets sections. When <code>name</code> is declared in both sections, the Configuration section MUST take precedence.</p> <p>Dynamic values MUST be substituted before being passed to Probes or Actions.</p> <p>Other values, such as the HTTP Probe url, MAY be substituted as well.</p>"},{"location":"reference/api/experiment/#controls","title":"Controls","text":"<p>Controls describe out-of-band capabilities applied when the experiment is executed. Controls are used to declare operations that should be carried by external tools.</p> <p>Controls MAY be declared at each of the following levels:</p> <ul> <li>experiment</li> <li>steady-state-hypothesis</li> <li>activity</li> </ul> <p>Controls MUST be applied before and after each of those levels. Schematically, this looks like this:</p> <pre><code>apply experiment control before experiment starts\nstart experiment\n    apply steady state control before steady-state probes are started\n        start steady-state processing\n            apply activity control before each probe is applied\n            run each probe\n            apply activity control after each probe is applied\n    apply steady state control after steady-state probes have completed\n    apply steady state control before method activities are started\n        start method processing\n            apply activity control before each activity is applied\n            run each activity\n            apply activity control after each activity is applied\n    apply steady state control after method activities have completed\n    apply steady state control before rollback activities are started\n        start rollback processing\n            apply activity control before each activity is applied\n            run each activity\n            apply activity control after each activity is applied\n    apply steady state control after rollback activities have completed\napply experiment control after experiment completes\n</code></pre> <p>Controls MAY be omitted anywhere and MUST NOT be applied at a level they are not declared.</p> <p>Controls MUST NOT fail the experiment\u2019s execution due to unforeseen conditions.</p> <p>Controls are declared with the <code>controls</code> property which is set to a JSON array.</p> <p>Controls MAY modify Configuration and Secrets. In that case changes MUST be made visible to the experiment.</p> <p>An item of that array MUST be a control, which is a JSON object which MUST have the following properties:</p> <ul> <li>a <code>name</code> property which MUST be a JSON string</li> <li>a <code>provider</code> property MUST be a JSON object</li> </ul> <p>The <code>provider</code> object indicates which implementation of the control to use. It MUST declare the following properties:</p> <ul> <li>a <code>type</code> JSON string which MUST be <code>\"python\"</code></li> <li>a <code>module</code> JSON string when the <code>type</code> property is <code>\"python\"</code>. It MUST be a   a Python module dotted path implementing the control interface</li> </ul> <p>A control object MAY also declare the following property:</p> <ul> <li>a <code>scope</code> property MUST be a JSON string</li> <li><code>automatic</code>, a JSON boolean which MUST be <code>true</code> by default (when omitted)</li> </ul> <p>The <code>scope</code> value MUST be one of <code>\"before\"</code> or <code>\"after\"</code>. When the <code>scope</code> property is omitted, the control MUST be applied before and after. When the <code>scope</code> property is set, the control MUST be applied only on that scope.</p> <p>When the <code>automatic</code> property is set to <code>false</code>, it MUST be understood that the control cannot be applied anywhere but where it is declared.</p> <p>Examples of Controls:</p> <p>Just a generic declaration of a control at the top-level of the experiment:</p> JSONYAML <pre><code>\"controls\": [\n{\n\"name\": \"tracing\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaostracing.control\"\n}\n}\n]\n</code></pre> <pre><code>controls:\n- name: tracing\nprovider:\ntype: python\nmodule: chaostracing.control\n</code></pre> <p>Another control by applied only as post-control:</p> JSONYAML <pre><code>\"controls\": [\n{\n\"name\": \"tracing\",\n\"scope\": \"post\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaostracing.control\"\n}\n}\n]\n</code></pre> <pre><code>controls:\n- name: tracing\nscope: post\nprovider:\ntype: python\nmodule: chaostracing.control\n</code></pre> <p>Finally, a top-level level control not applied anywhere else down the tree:</p> JSONYAML <pre><code>\"controls\": [\n{\n\"name\": \"tracing\",\n\"automatic\": false,\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaostracing.control\"\n}\n}\n]\n</code></pre> <pre><code>controls:\n- name: tracing\nautomatic: false\nprovider:\ntype: python\nmodule: chaostracing.control\n</code></pre>"},{"location":"reference/api/experiment/#extensions","title":"Extensions","text":"<p>An Experiment MAY declare an <code>extensions</code> property which MUST be an array of objects. Each object MUST declare a non-empty <code>name</code> property.</p> <p>Extensions are used in two scenarios:</p> <ul> <li>future core features that need to be ironed out by the community first</li> <li>vendor specific payload</li> </ul> <p>In both cases, their actual usage is runtime dependent, this specification does not declare any meaning to an extension.</p> <p>Below is an example of an Extension:</p> JSONYAML <pre><code>{\n\"extensions\": [{\n\"name\": \"vendorX\",\n\"data\": \"...\"\n}]\n}\n</code></pre> <pre><code>extensions:\n- name: vendorX\ndata: ...\n</code></pre>"},{"location":"reference/api/experiment/#examples","title":"Examples","text":"<p>The following examples MUST NOT be considered normative.</p>"},{"location":"reference/api/experiment/#minimal-experiment","title":"Minimal Experiment","text":"<p>Here is an example of the most minimal experiment:</p> JSONYAML <pre><code>{\n\"title\": \"Moving a file from under our feet is forgivable\",\n\"description\": \"Our application should re-create a file that was removed\",\n\"contributions\": {\n\"reliability\": \"high\",\n\"availability\": \"high\"\n},\n\"steady-state-hypothesis\": {\n\"title\": \"The file must be around first\",\n\"probes\": [\n{\n\"type\": \"probe\",\n\"name\": \"file-must-exist\",\n\"tolerance\": true,\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"os.path\",\n\"func\": \"exists\",\n\"arguments\": {\n\"path\": \"some/file\"\n}\n}\n}\n]\n},\n\"method\": [\n{\n\"type\": \"action\",\n\"name\": \"file-be-gone\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"os\",\n\"func\": \"remove\",\n\"arguments\": {\n\"path\": \"some/file\"\n}\n},\n\"pauses\": {\n\"after\": 5\n}\n},\n{\n\"ref\": \"file-must-exist\"\n}\n]\n}\n</code></pre> <pre><code>title: Moving a file from under our feet is forgivable\ndescription: Our application should re-create a file that was removed\ncontributions:\nreliability: high\navailability: high\nsteady-state-hypothesis:\ntitle: The file must be around first\nprobes:\n- type: probe\nname: file-must-exist\ntolerance: true\nprovider:\ntype: python\nmodule: os.path\nfunc: exists\narguments:\npath: some/file\nmethod:\n- type: action\nname: file-be-gone\nprovider:\ntype: python\nmodule: os\nfunc: remove\narguments:\npath: some/file\npauses:\nafter: 5\n- ref: file-must-exist\n</code></pre>"},{"location":"reference/api/experiment/#more-complex-experiment","title":"More Complex Experiment","text":"<p>Below is an example of a fully featured experiment that uses various extensions to perform actions, probing and steady-state hypothesis validation.</p> JSONYAML <pre><code>{\n\"title\": \"Are our users impacted by the loss of a function?\",\n\"description\": \"While users query the Astre function, they should not be impacted if one instance goes down.\",\n\"contributions\": {\n\"reliability\": \"high\",\n\"availability\": \"high\",\n\"performance\": \"medium\",\n\"security\": \"none\"\n},\n\"tags\": [\n\"kubernetes\",\n\"openfaas\",\n\"cloudnative\"\n],\n\"configuration\": {\n\"prometheus_base_url\": \"http://demo.foo.bar\"\n},\n\"secrets\": {\n\"global\": {\n\"auth\": \"Basic XYZ\"\n}\n},\n\"controls\": [\n{\n\"name\": \"tracing\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaostracing.control\"\n}\n}\n],\n\"steady-state-hypothesis\": {\n\"title\": \"Function is available\",\n\"probes\": [\n{\n\"type\": \"probe\",\n\"name\": \"function-must-exist\",\n\"tolerance\": 200,\n\"provider\": {\n\"type\": \"http\",\n\"secrets\": [\"global\"],\n\"url\": \"http://demo.foo.bar/system/function/astre\",\n\"headers\": {\n\"Authorization\": \"${auth}\"\n}\n}\n},\n{\n\"type\": \"probe\",\n\"name\": \"function-must-respond\",\n\"tolerance\": 200,\n\"provider\": {\n\"type\": \"http\",\n\"timeout\": [3, 5],\n\"secrets\": [\"global\"],\n\"url\": \"http://demo.foo.bar/function/astre\",\n\"method\": \"POST\",\n\"headers\": {\n\"Content-Type\": \"application/json\",\n\"Authorization\": \"${auth}\"\n},\n\"arguments\": {\n\"city\": \"Paris\"\n}\n}\n}\n]\n},\n\"method\": [\n{\n\"type\": \"action\",\n\"name\": \"simulate-user-traffic\",\n\"background\": true,\n\"provider\": {\n\"type\": \"process\",\n\"path\": \"vegeta\",\n\"arguments\": \"-cpus 2 attack -targets=data/scenario.txt -workers=2 -connections=1 -rate=3 -timeout=3s -duration=30s -output=result.bin\"\n}\n},\n{\n\"type\": \"action\",\n\"name\": \"terminate-one-function\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosk8s.pod.actions\",\n\"func\": \"terminate_pods\",\n\"arguments\": {\n\"ns\": \"openfaas-fn\",\n\"label_selector\": \"faas_function=astre\",\n\"rand\": true\n}\n},\n\"pauses\": {\n\"before\": 5\n}\n},\n{\n\"type\": \"probe\",\n\"name\": \"fetch-openfaas-gateway-logs\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosk8s.pod.probes\",\n\"func\": \"read_pod_logs\",\n\"arguments\": {\n\"label_selector\": \"app=gateway\",\n\"last\": \"35s\",\n\"ns\": \"openfaas\"\n}\n}\n},\n{\n\"type\": \"probe\",\n\"name\": \"query-total-function-invocation\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosprometheus.probes\",\n\"func\": \"query_interval\",\n\"secrets\": [\"global\"],\n\"arguments\": {\n\"query\": \"gateway_function_invocation_total{function_name='astre'}\",\n\"start\": \"1 minute ago\",\n\"end\": \"now\",\n\"step\": 1\n}\n}\n}\n],\n\"rollbacks\": []\n}\n</code></pre> <pre><code>---\ntitle: Are our users impacted by the loss of a function?\ndescription: While users query the Astre function, they should not be impacted if one instance goes down.\ncontributions:\nreliability: high\navailability: high\nperformance: medium\nsecurity: none\ntags:\n- kubernetes\n- openfaas\n- cloudnative\nconfiguration:\nprometheus_base_url: http://demo.foo.bar\nsecrets:\nglobal:\nauth: Basic XYZ\ncontrols:\n- name: tracing\nprovider:\ntype: python\nmodule: chaostracing.control\nsteady-state-hypothesis:\ntitle: Function is available\nprobes:\n- type: probe\nname: function-must-exist\ntolerance: 200\nprovider:\ntype: http\nsecrets:\n- global\nurl: http://demo.foo.bar/system/function/astre\nheaders:\nAuthorization: \"${auth}\"\n- type: probe\nname: function-must-respond\ntolerance: 200\nprovider:\ntype: http\ntimeout:\n- 3\n- 5\nsecrets:\n- global\nurl: http://demo.foo.bar/function/astre\nmethod: POST\nheaders:\nContent-Type: application/json\nAuthorization: \"${auth}\"\narguments:\ncity: Paris\nmethod:\n- type: action\nname: simulate-user-traffic\nbackground: true\nprovider:\ntype: process\npath: vegeta\narguments: \"-cpus 2 attack -targets=data/scenario.txt -workers=2 -connections=1 -rate=3 -timeout=3s -duration=30s -output=result.bin\"\n- type: action\nname: terminate-one-function\nprovider:\ntype: python\nmodule: chaosk8s.pod.actions\nfunc: terminate_pods\narguments:\nns: openfaas-fn\nlabel_selector: faas_function=astre\nrand: true\npauses:\nbefore: 5\n- type: probe\nname: fetch-openfaas-gateway-logs\nprovider:\ntype: python\nmodule: chaosk8s.pod.probes\nfunc: read_pod_logs\narguments:\nlabel_selector: app=gateway\nlast: 35s\nns: openfaas\n- type: probe\nname: query-total-function-invocation\nprovider:\ntype: python\nmodule: chaosprometheus.probes\nfunc: query_interval\nsecrets:\n- global\narguments:\nquery: gateway_function_invocation_total{function_name='astre'}\nstart: 1 minute ago\nend: now\nstep: 1\nrollbacks: []\n</code></pre>"},{"location":"reference/api/journal/","title":"Experiment Journal","text":""},{"location":"reference/api/journal/#introduction","title":"Introduction","text":"<p>This document describes the syntax and grammar of a Chaos Engineering experiment\u2019s output, called a journal. One should be able to walkthrough the experiment\u2019s run through its journal alone.</p> <p>This specification makes sense in regards to the Experiment specification itself. It is indeed a mirror to that document.</p>"},{"location":"reference/api/journal/#conventions-used-in-this-document","title":"Conventions Used in This Document","text":"<p>The key words \u201cMUST\u201d, \u201cMUST NOT\u201d, \u201cREQUIRED\u201d, \u201cSHALL\u201d, \u201cSHALL NOT\u201d, \u201cSHOULD\u201d, \u201cSHOULD NOT\u201d, \u201cRECOMMENDED\u201d, \u201cMAY\u201d, and \u201cOPTIONAL\u201d in this document are to be interpreted as described in RFC 2119.</p> <p>The terms \u201cJSON\u201d, \u201cJSON text\u201d, \u201cJSON value\u201d, \u201cmember\u201d, \u201celement\u201d, \u201cobject\u201d, \u201carray\u201d, \u201cnumber\u201d, \u201cstring\u201d, \u201cboolean\u201d, \u201ctrue\u201d, \u201cfalse\u201d, and \u201cnull\u201d in this document are to be interpreted as defined in RFC 7159.</p>"},{"location":"reference/api/journal/#other-formats","title":"Other formats","text":"<p>While this specification uses JSON to define its elements, implementations may allow loading from other formats, such as YAML. As long as the output of such format respects the specification herein.</p>"},{"location":"reference/api/journal/#journal-elements","title":"Journal Elements","text":""},{"location":"reference/api/journal/#overview","title":"Overview","text":"<p>A Journal is one potential output of a Chaos Engineering experiment. The objective of such journal is to collect all events that took place during the experiment\u2019s run.</p> <p>The journal contains static information, such as the experiment that was run, as well as runtime entries.</p>"},{"location":"reference/api/journal/#format","title":"Format","text":"<p>A journal is a JSON object.</p>"},{"location":"reference/api/journal/#required-properties","title":"Required Properties","text":"<p>A journal MUST declare:</p> <ul> <li>a <code>experiment</code> property</li> <li>a <code>status</code> property</li> <li>a <code>start</code> property</li> <li>a <code>end</code> property</li> <li>a <code>duration</code> property</li> <li>a <code>deviated</code> property</li> </ul> <p>The <code>experiment</code> property MUST be a copy of the run experiment as-is and is therefore a JSON object. It MUST follow the Experiment definition.</p> <p>The \u0300<code>status</code> property MUST be a JSON string, one of:</p> <ul> <li><code>\"completed\"</code>: when the experiment runs fully. It does not indicate the   activities in the experiment succeeded, only that they were executed as   expected</li> <li><code>\"failed\"</code>: when one of the activity reports a failed condition</li> <li><code>\"aborted\"</code>: when the experiment breaks for unforeseen reason</li> <li><code>\"interrupted\"</code>: when the experiment is interrupted (for instance after a   signal is received)</li> </ul> <p>Note</p> <p>It is important to understand the <code>\"completed\"</code> status expresses that everything ran all the way. An action may not have resulted in what the operator wanted but it did not fail. Always review the entire journal to fully appreciate the actual outcome of the experiment.</p> <p>There are two reasons it could be marked as <code>\"failed\"</code>. Either a tolerance failed or if an extension made a check for a condition. So, for instance, let\u2019s say the extension made a HTTP call to your service, that call returned a 400 rather than 200. If the extension was not designed to care for this difference, then the status will be marked as <code>\"completed\"</code>. However, if the extension validated the HTTP response, it may have decided to fail the action which would lead to a \u0300 \u201cfailed\u201d` status.</p> <p>The <code>\"aborted\"</code> and <code>\"interrupted\"</code> are different, the former means of a crash somehow (say, because of a bug). The latter indicates a signal was received. Both MUST bail the entire process.</p> <p>The <code>deviated</code> property MUST be a boolean flag that MUST be set to <code>true</code> when the steady-state was executed after the experimental method but reported that, at least, one of its probes failed to match the expected tolerance.</p> <p>The <code>start</code> property MUST be a JSON string formatted as per RFC 3339 in UTC timezone.</p> <p>The <code>end</code> property MUST be a JSON string formatted as per RFC 3339 in UTC timezone.</p> <p>The <code>duration</code> MUST be a JSON number of difference between the <code>end</code> datetime and the <code>start</code> datetime.</p>"},{"location":"reference/api/journal/#recommended-properties","title":"Recommended Properties","text":"<p>In addition to those required properties, the journal SHOULD also declare the followings:</p> <ul> <li>a <code>steady_states</code> property</li> <li>a <code>run</code> property</li> <li>a <code>rollbacks</code> property</li> </ul> <p>The <code>steady_states</code> property MUST be a JSON object defining the result of the steady state hypothesis outcome.</p> <p>The <code>run</code> property MUST be a JSON array defining the result of each activity in the method element of the experiment.</p> <p>The <code>rollbacks</code> property MUST be a JSON array defining the result of each action in the rollbacks element of the experiment.</p>"},{"location":"reference/api/journal/#optional-properties","title":"Optional Properties","text":"<p>In addition to those required properties, the journal MAY also declare the followings:</p> <ul> <li>a <code>platform</code> property</li> <li>a <code>node</code> property</li> </ul> <p>The <code>platform</code> property MUST be a JSON string defining the machine on which the experiment was executed. The content is free form but may be similar to the output of the <code>uname -a</code> command.</p> <p>The <code>node</code> property MUST be a JSON string representing the name of the machine where the experiment was run. The content is free form.</p>"},{"location":"reference/api/journal/#steady-state","title":"Steady State","text":"<p>The <code>steady_states</code> property holds the outcomes of the steady state hypothesis.</p> <p>The <code>steady_states</code> property MAY declare the following properties:</p> <ul> <li>a <code>before</code> property</li> <li>a <code>after</code> property</li> </ul> <p>The <code>before</code> property MUST be a JSON object describing the outcome of the hypothesis run before the method is executed.</p> <p>The <code>after</code> property MUST be a JSON object describing the outcome of the hypothesis run after the method is executed.</p> <p>Notice that either of those properties MAY be missing if they were not run.</p>"},{"location":"reference/api/journal/#steady-state-outcomes","title":"Steady State Outcomes","text":"<p>Both the <code>before</code> and <code>after</code> properties follow the same definition.</p> <ul> <li>a <code>steady_state_met</code> property</li> <li>a <code>probes</code> property</li> </ul> <p>The <code>steady_state_met</code> property MUST be a JSON boolean. It MUST be <code>true</code> if the steady state hypothesis was met, <code>false</code> otherwise.</p> <p>A steady state is met when all its probes matched their tolerance. A steady state is not met at the first non-matching tolerance probe.</p> <p>The <code>probes</code> property MUST be a JSON array of probes results.</p> <p>Each probe result MUST declare the following properties:</p> <ul> <li>a <code>activity</code> property</li> <li>a <code>status</code> property</li> <li>a <code>start</code> property</li> <li>a <code>end</code> property</li> <li>a <code>duration</code> property</li> <li>a <code>tolerance_met</code> property</li> <li>a <code>output</code> property</li> </ul> <p>The <code>activity</code> property MUST be a JSON object, a raw copy of the executed probe.</p> <p>The <code>status</code> property MUST be a JSON string, one of <code>\"succeeded\"</code> or <code>\"failed\"</code>.</p> <p>The <code>start</code> property MUST be a JSON string formatted as per RFC 3339 in UTC timezone.</p> <p>The <code>end</code> property MUST be a JSON string formatted as per RFC 3339 in UTC timezone.</p> <p>The <code>duration</code> MUST be a JSON number of difference between the <code>end</code> datetime and the <code>start</code> datetime.</p> <p>The <code>tolerance_met</code> MUST be a JSON boolean indicating if the probe matched its tolerance or not.</p> <p>The <code>output</code> MUST be a JSON string or <code>null</code>.</p> <p>In addition, the probe result MAY contain an additional property:</p> <ul> <li>a <code>exception</code> property</li> </ul> <p>This property is set when the probe failed in an unforeseeable way and MUST be a JSON array or JSON string of the error trace. </p>"},{"location":"reference/api/journal/#run","title":"Run","text":"<p>The <code>run</code> property holds the outcomes of the method element.</p> <p>The <code>run</code> property MUST be a JSON array of activity results.</p> <p>Each activity result MUST declare the following properties:</p> <ul> <li>a <code>activity</code> property</li> <li>a <code>status</code> property</li> <li>a <code>start</code> property</li> <li>a <code>end</code> property</li> <li>a <code>duration</code> property</li> <li>a <code>output</code> property</li> </ul> <p>The <code>activity</code> property MUST be a JSON object, a raw copy of the executed probe or action.</p> <p>The <code>status</code> property MUST be a JSON string, one of <code>\"succeeded\"</code> or <code>\"failed\"</code>.</p> <p>The <code>start</code> property MUST be a JSON string formatted as per RFC 3339 in UTC timezone.</p> <p>The <code>end</code> property MUST be a JSON string formatted as per RFC 3339 in UTC timezone.</p> <p>The <code>duration</code> MUST be a JSON number of difference between the <code>end</code> datetime and the <code>start</code> datetime.</p> <p>The <code>output</code> MUST be a JSON string or <code>null</code>.</p> <p>In addition, the activity result MAY contain an additional property:</p> <ul> <li>a <code>exception</code> property</li> </ul> <p>This property is set when the activity failed in an unforeseeable way and MUST be a JSON array or JSON string of the error trace.</p>"},{"location":"reference/api/journal/#rollbacks","title":"Rollbacks","text":"<p>The <code>rollbacks</code> property holds the outcomes of the rollbacks element.</p> <p>The <code>rollbacks</code> property MUST be a JSON array of action results.</p> <p>Each action result MUST declare the following properties:</p> <ul> <li>a <code>activity</code> property</li> <li>a <code>status</code> property</li> <li>a <code>start</code> property</li> <li>a <code>end</code> property</li> <li>a <code>duration</code> property</li> <li>a <code>output</code> property</li> </ul> <p>The <code>activity</code> property MUST be a JSON object, a raw copy of the executed action.</p> <p>The <code>status</code> property MUST be a JSON string, one of <code>\"succeeded\"</code> or <code>\"failed\"</code>.</p> <p>The <code>start</code> property MUST be a JSON string formatted as per RFC 3339 in UTC timezone.</p> <p>The <code>end</code> property MUST be a JSON string formatted as per RFC 3339 in UTC timezone.</p> <p>The <code>duration</code> MUST be a JSON number of difference between the <code>end</code> datetime and the <code>start</code> datetime.</p> <p>The <code>output</code> MUST be a JSON string or <code>null</code>.</p> <p>In addition, the activity result MAY contain an additional property:</p> <ul> <li>a <code>exception</code> property</li> </ul> <p>This property is set when the action failed in an unforeseeable way and MUST be a JSON array or JSON string of the error trace. </p> <p>Rollbacks MUST NOT to be applied when the experiment status is <code>\"interrupted\"</code>.</p>"},{"location":"reference/developing/core/","title":"Core Projects","text":"<p>The Chaos Toolkit is made of several projects that work together to provide its service.</p>"},{"location":"reference/developing/core/#chaostoolkit","title":"chaostoolkit","text":"<p>The chaostoolkit project is the command-line interface (CLI), in other words the command executed by users to run their experiments.</p> <p>That project tries to remain as shallow as possible, only providing the user interface commands by gluing other projects together.</p> <p>This project is implemented in Python 3.</p>"},{"location":"reference/developing/core/#chaostoolkit-lib","title":"chaostoolkit-lib","text":"<p>The chaostoolkit-lib project is the core library which implements the core concepts of the Chaos Toolkit.</p> <p>This project is implemented in Python 3.</p>"},{"location":"reference/developing/core/#chaostoolkit-documentation","title":"chaostoolkit-documentation","text":"<p>The chaostoolkit-documentation is the documentation source and renderer of the Chaos Toolkit. Namely, that project generates the website you are currently reading.</p> <p>This project is implemented in Python 3 by generating HTML from Markdown documents.</p>"},{"location":"reference/developing/core/#chaostoolkit-kubernetes","title":"chaostoolkit-kubernetes","text":"<p>The chaostoolkit-kubernetes project is the Kubernetes extension.</p> <p>This project is implemented in Python 3.</p>"},{"location":"reference/developing/core/#chaostoolkit-addons","title":"chaostoolkit-addons","text":"<p>The chaostoolkit-addons project is a set of addons for Chaos Toolkit: useful controls, probes, actions and tolerances.</p> <p>This project is implemented in Python 3.</p>"},{"location":"reference/developing/core/#chaostoolkit-reporting","title":"chaostoolkit-reporting","text":"<p>The chaostoolkit-reporting project is a plugin for Chaos Toolkit to create PDF/HTMl reports from executions.</p> <p>This project is implemented in Python 3.</p>"},{"location":"reference/developing/core/#chaostoolkit-bundler","title":"chaostoolkit-bundler","text":"<p>The chaostoolkit-bundler project is a binary package of Chaos Toolkit and its most common extensions. In case you want a drop in Chaos Toolkit for your system.</p> <p>This project is implemented in Python 3.</p>"},{"location":"reference/developing/extensions/","title":"Extension Projects","text":"<p>In addition to the core projects, the Chaos Toolkit manages some extension projects which provide probes and/or actions for experiments.</p> <p>Extensions can be found on the incubator GitHub organisation.</p>"},{"location":"reference/developing/guidelines/","title":"Developer Guidelines","text":"<p>Contributors to the Chaos Toolkit are always welcome. This guide describes the general elements you probably need to know to get started. Once past those elements, you should dive into the code of each project and come discuss on our Slack.</p>"},{"location":"reference/developing/guidelines/#overview","title":"Overview","text":""},{"location":"reference/developing/guidelines/#programming-environment","title":"Programming Environment","text":"<p>The programming environment really is up to you. However, since the Chaos Toolkit is implemented in Python so make sure to have the right tooling for it.</p> <p>The most basics are:</p> <ul> <li>Python 3.6+ installed.</li> <li>A virtual environment so you can deploy the dependencies in a specific   environment</li> </ul> <p>If you\u2019re not familiar with Python, you will find a few helpful books online, such The Hitchhiker\u2019s Guide to Python.</p>"},{"location":"reference/developing/guidelines/#the-ultimate-trick","title":"The Ultimate Trick","text":"<p>Whenever you code on one of the projects, you should run the following command so that the project you are hacking on is part of your virtual environment without being installed:</p> <pre><code>cd &lt;project-name&gt;\npython setup.py develop\n</code></pre> <p>Sometimes, your virtual env may be borked and not point to your development directory. In that case, make sure to remove any previously installed version of the project:</p> <pre><code>pip uninstall &lt;project-name&gt;\n</code></pre> <p>Then make sure your virtual environment point at your local directory with:</p> <pre><code>pip freeze\n</code></pre>"},{"location":"reference/developing/guidelines/#github","title":"GitHub","text":"<p>The Chaos Toolkit projects are hosted on GitHub. If you wish to contribute, you will need to have an account there.</p> <p>The general workflow is to fork the project you wish to contribute to, make your changes in a dedicated branch, rebase against the original master and finally submit a pull-request to the project with a clear description of the what and why.</p>"},{"location":"reference/developing/guidelines/#chaos-toolkit-projects-at-a-glance","title":"Chaos Toolkit Projects At A Glance","text":"<p>The Chaos Toolkit is made of several projects. The core ones are:</p> <ul> <li>chaostoolkit: the CLI</li> <li>chaostoolkit-lib: the core   library that propels the CLI</li> </ul> <p>Basically, those projects represent the Chaos Toolkit itself. However, the toolkit is naked without extensions. The currently core extensions are:</p> <ul> <li>chaostoolkit-kubernetes</li> <li>chaostoolkit-addons</li> </ul> <p>In addition, there are a bunch of incubating projects.</p>"},{"location":"reference/developing/guidelines/#creating-an-extension","title":"Creating an Extension","text":"<p>Please review the various approaches to extend the toolkit.</p>"},{"location":"reference/developing/guidelines/#creating-a-notification-plugin","title":"Creating a Notification Plugin","text":"<p>The Chaos Toolkit triggers events while it runs. Those events may be forwarded to any endpoint that you care for through HTTP or, when you need more control, a full Python project.</p> <p>There is no template for such a project yet but it is very close to an extension project except it doesn\u2019t have probes and actions. You can therefore start by cloning the extension template project and start from there.</p> <p>Instead, it should define a function in a module. That function takes two parameters:</p> <ul> <li>the notification channel settings (coming from the   Chaos Toolkit settings file) as a dictionary</li> <li>the event payload as a Python dictionary which is documented   here</li> </ul> <p>The event has a <code>payload</code> key which is the content associated to the event. It can be one of:</p> <ul> <li><code>None</code> when there was no payload ()</li> <li>a string</li> <li>an experiment dictionary</li> <li>an journal dictionary</li> </ul> <p>Three kind of events can be triggered: <code>started</code>, <code>completed</code> and <code>failed</code> for each phase of the flow. Those events are defined here.</p> <p>A typical notification callback function will look like this:</p> <pre><code>from typing import Any, Dict\n\nfrom chaoslib.notification import RunFlowEvent\nfrom chaoslib.types import EventPayload\nimport logzero\n\ndef notify(settings: Dict[str, Any], event: EventPayload):\n    if event[\"name\"] == RunFlowEvent.RunStarted.value:\n        logzero.info(\"Event phase \" + event[\"phase\"])\n        logzero.info(\"Event timestamp \" + event[\"ts\"])\n        logzero.info(\"Event payload \" + event[\"payload\"])\n        logzero.info(\"Event error \" + event.get(\"error\", \"N/A\"))\n</code></pre> <p><code>logzero</code> is a third-party package that the Chaos Toolkit uses to log when it runs.</p>"},{"location":"reference/developing/technologies/","title":"Technology Choices","text":""},{"location":"reference/developing/technologies/#python-3","title":"Python 3","text":"<p>The Chaos Toolkit is implemented in Python 3. A high-level language with a long successfully story for writing great software. It\u2019s a common choice for tooling purpose.</p> <p>The language supports readability well and has a large ecosystem of libraries. It is also well-spread and easy to install. The choice to not support Python 2 is a look at Python\u2019s present and future.</p> <p>The choice for a dynamic language was also motivated because the Chaos Toolkit manipulates a lot of strings and that task is made straightforward with Python.</p> <p>Although Python natively does not generate (though it can be done) standalone binaries like golang would. We do not believe this will harm the project and hope that package managers will eventually provide native installers.</p>"},{"location":"reference/developing/technologies/#functional","title":"Functional","text":"<p>Well, this project is not truly a functional piece of code but the code relies as little as possible on stateful constructions as provided by classes.</p> <p>Mutable data structures are used but mostly created and returned from functions rather than modified.</p> <p>Generally speaking, the project draws inspirations from certain ideas of  functional paradigms but does not enforce them strictly. One notable area where the code strays away from these principles is the use of exceptions rather than returning error codes. This may change if the community expresses such an intention.</p>"},{"location":"reference/developing/values/","title":"Key Project Values","text":"<p>The following key values of the Chaos Toolkit reflect the mindset the community has when engineering the Chaos Toolkit project. Refer to our Code of Conduct as well.</p>"},{"location":"reference/developing/values/#simplicity","title":"Simplicity","text":"<p>The Chaos Toolkit aims at being a simple piece of technology both from a user and developer perspective.</p> <p>To achieve simplicity, the Chaos Toolkit comes as a command line interface driven by a description file. As a user, this means no code and no need to  learn a programming language. As a developer, this reduces the functional surface area to consider.</p>"},{"location":"reference/developing/values/#extensibility","title":"Extensibility","text":"<p>The Chaos Toolkit does not wish to be a monolith and strives to be extended to fully reach its goal through community driven efforts.</p> <p>By using a description file, the implementation is not prescribed by the Chaos Toolkit project. Although we fully expect the community to eventually settle on certain implementations of probes and actions.</p>"},{"location":"reference/developing/values/#readability","title":"Readability","text":"<p>We believe code readability is a factor for positive maintenance and evolutivity.</p> <p>Readable code never goes out of fashion. As the code of the Chaos Toolkit is mostly written in Python, best practices such as defined in PEP8.</p>"},{"location":"reference/developing/values/#diversity","title":"Diversity","text":"<p>Although not strictly speaking referring to the technological aspect of the  project, having diversity in the community will contribute to a better project overall.</p>"},{"location":"reference/extending/approaches/","title":"Extending the Chaos Toolkit","text":"<p>The Chaos Toolkit is designed to be extended with new probes and actions so that you can work with any failure injection and system observability systems that you choose. The toolkit has a growing number of open source extensions for just this purpose, but the intention is that you may also want to extend the Chaos Toolkit for your own unique, possible closed, systems as well.</p> <p>The ChaosToolkit currently supports three extension approaches:</p> <ul> <li>Python function: see this page for more information on creating Python extensions</li> <li>Process</li> <li>HTTP</li> </ul> <p>You can extend your actions and probes by implementing them using one of these approaches.</p> <p>Tip</p> <p>The Chaos Toolkit maintains a set of open-source extensions ready to be integrated into your Chaos experiments.</p>"},{"location":"reference/extending/create-control-extension/","title":"Create a Control Extension","text":"<p>A control extension implements the interface defined by the Chaos Toolkit to support the Controls element of the specification.</p> <p>Controls are good for changing the experiment or its environment during execution. They have the power to impact the experiment, configuration, secrets on the fly, which is unlike probes and actions.</p>"},{"location":"reference/extending/create-control-extension/#controls-interface","title":"Controls Interface","text":"<p>When implementing a control module, you must simply define a set of functions that are called by the Chaos Toolkit when executing the experiment.</p> <p>Tip</p> <p>All of these functions are optional, only implement the one you need.</p> <pre><code>from typing import Any, Dict, List\n\nfrom chaoslib.types import Activity, Configuration, \\\n    Experiment, Hypothesis, Journal, Run, Secrets, Settings\n\n\ndef configure_control(configuration: Configuration = None,\n                      secrets: Secrets = None, settings: Settings = None,\n                      experiment: Experiment = None):\n\"\"\"\n    Configure the control's global state\n\n    This is called once only per Chaos Toolkit's run and should be used to\n    initialize any state your control may require.\n\n    The `settings` are only passed when the control is declared in the\n    settings file of the Chaos Toolkit.\n    \"\"\"\n    pass\n\n\ndef cleanup_control():\n\"\"\"\n    Cleanup the control's global state\n\n    Called once only during the experiment's execution.\n    \"\"\"\n    pass\n\n\ndef before_loading_experiment_control(context: str, **kwargs):\n\"\"\"\n    before loading the experiment from its source.\n\n    The context is the file path or URL given to the loader. Use this loader\n    if you want to interact with that source before it is loaded.\n    \"\"\"\n    pass\n\n\ndef after_loading_experiment_control(context: str, state: Experiment, **kwargs):\n\"\"\"\n    after loading the experiment from its source.\n\n    Use this loader if you want to interact with the experiment once it's been\n    loaded and parsed but before the validation or execution take place.\n    \"\"\"\n    pass\n\n\ndef before_experiment_control(context: Experiment,\n                              configuration: Configuration = None,\n                              secrets: Secrets = None, **kwargs):\n\"\"\"\n    before-control of the experiment's execution\n\n    Called by the Chaos Toolkit before the experiment's begin but after the\n    configuration and secrets have been loaded.\n    \"\"\"\n    pass\n\n\ndef after_experiment_control(context: Experiment, state: Journal, \n                             configuration: Configuration = None,\n                             secrets: Secrets = None, **kwargs):\n\"\"\"\n    after-control of the experiment's execution\n\n    Called by the Chaos Toolkit after the experiment's completed. It passes the\n    journal of the execution. At that stage, the after control has no influence\n    over the execution however. Please see\n    https://docs.chaostoolkit.org/reference/api/journal/#journal-elements\n    for more information about the journal.\n    \"\"\"\n    pass\n\n\ndef before_hypothesis_control(context: Hypothesis,\n                              configuration: Configuration = None,\n                              secrets: Secrets = None, **kwargs):\n\"\"\"\n    before-control of the hypothesis's execution\n\n    Called by the Chaos Toolkit before the steady-state hypothesis is\n    applied.\n    \"\"\"\n    pass\n\n\ndef after_hypothesis_control(context: Hypothesis, state: Dict[str, Any],\n                             configuration: Configuration = None,\n                             secrets: Secrets = None, **kwargs):\n\"\"\"\n    after-control of the hypothesis's execution\n\n    Called by the Chaos Toolkit after the steady-state hypothesis is\n    complete. The `state` contains the result of the hypothesis. Refer to\n    https://docs.chaostoolkit.org/reference/api/journal/#steady-state-outcomes\n    for the description of that state.\n    \"\"\"\n    pass\n\n\ndef before_method_control(context: Experiment, \n                          configuration: Configuration = None,\n                          secrets: Secrets = None, **kwargs):\n\"\"\"\n    before-control of the method's execution\n\n    Called by the Chaos Toolkit before the activities of the method are\n    applied.\n    \"\"\"\n    pass\n\n\ndef after_method_control(context: Experiment, state: List[Run], \n                         configuration: Configuration = None,\n                         secrets: Secrets = None, **kwargs):\n\"\"\"\n    after-control of the method's execution\n\n    Called by the Chaos Toolkit after the activities of the method have been\n    applied. The `state` is the list of activity results. See\n    https://docs.chaostoolkit.org/reference/api/journal/#run for more\n    information.\n    \"\"\"\n    pass\n\n\ndef before_rollback_control(context: Experiment, \n                            configuration: Configuration = None,\n                            secrets: Secrets = None, **kwargs):\n\"\"\"\n    before-control of the rollback's execution\n\n    Called by the Chaos Toolkit before the actions of the rollback are\n    applied.\n    \"\"\"\n    pass\n\n\ndef after_rollback_control(context: Experiment, state: List[Run], \n                           configuration: Configuration = None,\n                           secrets: Secrets = None, **kwargs):\n\"\"\"\n    after-control of the rollback's execution\n\n    Called by the Chaos Toolkit after the actions of the rollback have been\n    applied. The `state` is the list of actions results. See\n    https://docs.chaostoolkit.org/reference/api/journal/#run for more\n    information.\n    \"\"\"\n    pass\n\n\ndef before_activity_control(context: Activity, \n                            configuration: Configuration = None,\n                            secrets: Secrets = None, **kwargs):\n\"\"\"\n    before-control of the activity's execution\n\n    Called by the Chaos Toolkit before the activity is applied.\n    \"\"\"\n    pass\n\n\ndef after_activity_control(context: Activity, state: Run,  \n                           configuration: Configuration = None,\n                           secrets: Secrets = None, **kwargs):\n\"\"\"\n    after-control of the activity's execution\n\n    Called by the Chaos Toolkit before the activity is applied. The result of\n    the execution is passed as `state`. See\n    https://docs.chaostoolkit.org/reference/api/journal/#run for more\n    information.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/extending/create-control-extension/#use-your-control","title":"Use your control","text":"<p>Define those functions into a module that is used as a provider. For instance, assume the above definition is stored into a module <code>chaosstuff.control</code>, in other words a <code>control.py</code> module of the <code>chaosstuff</code> package.</p> <p>The package must obviously be available to the <code>PYTHONPATH</code> in which the <code>chaos</code> runs.</p>"},{"location":"reference/extending/create-control-extension/#declare-it-in-the-experiment","title":"Declare it in the experiment","text":"<p>Controls can be applied per-experiment only:</p> JSONYAML <pre><code>\"controls\": [\n{\n\"name\": \"my-stuff\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosstuff.control\"\n}\n}\n]\n</code></pre> <pre><code>controls:\n- name: my-stuff\nprovider:\ntype: python\nmodule: chaosstuff.control\n</code></pre>"},{"location":"reference/extending/create-control-extension/#declare-it-in-your-settings","title":"Declare it in your settings","text":"<p>Controls can be also applied globally to all runs by declaring them in the Chaos Toolkit settings file:</p> <pre><code>controls:\nmy-stuff:\nprovider:\ntype: python\nmodule: chaosstuff.control\n</code></pre>"},{"location":"reference/extending/create-control-extension/#things-to-note","title":"Things to note","text":""},{"location":"reference/extending/create-control-extension/#unforeseen-errors","title":"Unforeseen errors","text":"<p>The Chaos Toolkit will not let a control abort the execution of the experiment. So if an exception is raised, it will be caught by the Chaos Toolkit, logged and the execution will carry on.</p>"},{"location":"reference/extending/create-control-extension/#interrupting-the-execution","title":"Interrupting the execution","text":"<p>While unforeseen errors in your controls cannot stop the execution, you can interrupt the execution by raising <code>chaoslib.exceptions.InterruptExecution</code> from any of your control functions.</p> <p>Note however, this is a harsh way to terminate the execution since, none of the rollbacks will be applied.</p> <p>Here is an example:</p> <pre><code>from chaoslib.exceptions import InterruptExecution\n\n\ndef after_activity_control(context: Activity, state: Run,  \n                           configuration: Configuration = None,\n                           secrets: Secrets = None, **kwargs):\n    if check_stuff(state[\"output\"]):\n        raise InterruptExecution(\"Well things went really bad!\")\n</code></pre> <p>In that case, the experiment\u2019s execution will have its <code>status</code> set to <code>\"interrupted\"</code> as described here.</p>"},{"location":"reference/extending/extending-with-python/","title":"Extending Chaos Toolkit with Python","text":""},{"location":"reference/extending/extending-with-python/#create-your-new-chaos-toolkit-extension-project","title":"Create your new Chaos Toolkit extension project","text":"<p>All Chaos Toolkit extensions follow the same structure and you can benefit from a project template. You can create a repository using that template from the GitHub UI or using the gh.</p> <pre><code>$ gh repo create mytest --private -p chaostoolkit/chaostoolkit-extension-template\n</code></pre>"},{"location":"reference/extending/extending-with-python/#where-to-put-your-code","title":"Where to put your code","text":"<p>There are two extension points for a Chaos Toolkit Python extension, and they are captured in two files: <code>actions.py</code> and <code>probes.py</code>.</p> <p>It is conventional to use the <code>actions.py</code> module as the place where you expose the actions that you would like to conduct as part of your Chaos Toolkit experimental method against the environment you want to inject failure into.</p> <p>It\u2019s also conventional to use the <code>probes.py</code> module as the place where you can integrate with your system\u2019s existing observability so that those values can be used either for an experiment\u2019s Steady State Hypothesis, or as simple additional data-gathering probes that can be declared throughout an experiment\u2019s method.</p>"},{"location":"reference/extending/extending-with-python/#running-discover-on-a-new-extension","title":"Running <code>Discover</code> on a New Extension","text":"<p>Chaos Toolkit extensions often implement functionality that assists in  discovering what a system, and the extension against that system, supports. This is executed using the <code>chaos discover</code> command.</p> <p>When writing your own implementation of discovery you will often want to test  the new functionality locally. To do this you should first execute from your  extension workspace:</p> <p><code>$ python setup.py develop</code></p> <p>Then you can exercise your discovery functionality using the <code>--no-install</code> flag  on the <code>chaos discover</code> command, for example:</p> <p><code>chaos discover --no-install ext-name</code></p>"},{"location":"reference/extending/extending-with-python/#log-from-your-extension","title":"Log From Your Extension","text":"<p>You can write to the Chaos Toolkit log by using the logzero package.</p> <pre><code>from logzero import logger\n\nlogger.info(\"Hello!\")\n</code></pre> <p>Make sure to add <code>logzero</code> as an entry of the <code>requirements.txt</code> file of your extension.</p>"},{"location":"reference/tutorials/authoring_operating/","title":"Authoring vs Operating","text":"<p>The Chaos Toolkit specifies an experimental protocol and format for your chaos engineering capabilities. It is often interesting to distinguish, at least in your mind, two roles.</p>"},{"location":"reference/tutorials/authoring_operating/#author","title":"Author","text":"<p>The author of an experiment is responsible for defining the structure of the experiment and its objective. The author does not have to be the one who comes with the question the experiment tries to produce evidence for. Rather, the author knows how to structure the experiment and ensures the outcome of an experiment\u2019s execution can be interpreted in an objective way.</p> <p>An author manipulates the following elements: steady-state hypothesis, method, rollbacks.</p>"},{"location":"reference/tutorials/authoring_operating/#operator","title":"Operator","text":"<p>The operator of an experiment executes it. This role is not as clear cut as the author\u2019s role and, quite often, both are the same person. However, it is useful to keep in mind what an experiment requires to be operated. Since you may end up with a fleet of Chaos Toolkit experiments running concurrently, the operator should work to ensure the executions happen in a safe and controlled manner.</p> <p>An operator manipulates the following elements: controls, settings</p>"},{"location":"reference/tutorials/batch/","title":"Running Chaos Toolkit experiments as AWS Batch Jobs","text":"<p>It is common when using AWS for hosting your infrastructure that you\u2019ll have strict security policies in place. These policies will usually only allow for internal traffic within AWS, amongst various other things. A question we\u2019re asked a lot is <code>can I run Chaos Toolkit from AWS, to run against AWS?</code>. The answer is simply, yes, you can.</p>"},{"location":"reference/tutorials/batch/#why-batch","title":"Why Batch?","text":"<p>You may have followed our Running Chaos Toolkit from an EC2 instance guide and wonder why we would write a guide for Batch - Batch has some benefits over EC2:</p> <ul> <li>Your infrastructure isn\u2019t running all the time</li> <li>You can use Docker images to encapsulate your experiment environment</li> <li>You can submit multiple jobs to run different experiments rather than blocking on one experiment in an EC2 instance</li> </ul>"},{"location":"reference/tutorials/batch/#why-not-ecs-and-fargate","title":"Why not ECS and Fargate?","text":"<p>We sometimes get asked about how to run Chaos Toolkit on ECS with Fargate, whilst we understand why you might want to do this, Chaos Toolkit experiments aren\u2019t analogous to something like a microservice. We don\u2019t run Chaos Toolkit continuously and request it to run jobs, rather we invoke Chaos Toolkit when we want to use it.</p> <p>Because of this difference in thinking, we recommend you use Batch (With Fargate as the compute provider) to invoke Chaos Toolkit experiments.</p>"},{"location":"reference/tutorials/batch/#the-steps","title":"The Steps","text":"<p>For the purposes of this guide, we\u2019ll run you through setting up your Chaos Toolkit experiments manually. If however, you\u2019re familiar with the AWS Cloud Development Kit (CDK), we have an example repository deploying the same infrastructure using CDK here.</p> <p>There are a few pre-requisites required to be able to follow this guide:</p> <ul> <li>You\u2019ll need access to the AWS Console (We\u2019re assuming you\u2019re comfortable here)</li> <li>You\u2019ll need AWS CLI installed and configured</li> <li>You\u2019ll need to be able to create EC2 instances (Or have someone do this for you)</li> <li>You\u2019ll need to be able to create IAM Roles and Policies (Or have someone do this for you)</li> <li>You\u2019ll need to be able to create Batch Compute Environments, Jobs, and Queues (Or have someone do this for you)</li> <li>You\u2019ll need to be able to create ECR Repositories and push to them (Or have someone to do this for you)</li> </ul>"},{"location":"reference/tutorials/batch/#1-create-your-system-an-ec2-instance","title":"1. Create your system (an EC2 instance)","text":"<p>Similar to our Running Chaos Toolkit from an EC2 instance guide, we\u2019ll be using an EC2 instance as our \u2018system\u2019 to run our experiment against. We\u2019ll setup our SSH to ensure that the EC2 instance is in a <code>running</code> state.</p> AWS ConsoleAWS CLI <ul> <li>Navigate to the EC2 console and select <code>Launch Instance</code></li> <li>For this guide, we\u2019ll select the <code>Amazon Linux 2 AMI</code> at the top of the list</li> <li>For this guide, we\u2019ll select a <code>t2.micro</code> (But you can choose a larger one)</li> <li>Go onto <code>Configure Instance Details</code></li> <li>Select the VPC to deploy into via the <code>Network</code> dropdown</li> <li>Select the Subnet to deploy into via the <code>Subnet</code> dropdown</li> <li>Go onto <code>Add Storage</code> - For now, the defaults will be fine</li> <li>Go onto <code>Add Tags</code> - We recommend at minimum, adding a tag <code>{\"OWNER\": \"your-name\"}</code></li> <li>Go onto <code>Configure Security Group</code></li> <li>Click the <code>X</code> to the right of the SSH rule, you won\u2019t need this</li> <li>Go onto <code>Review and Launch</code> - Select <code>Launch</code></li> <li>Select <code>Proceed without a key pair</code>, check the tickbox, and click <code>Launch Instances</code></li> </ul> <ul> <li>Create the EC2 instance for our \u2018system\u2019, replacing <code>YOUR_NAME</code> with your name: <pre><code>aws ec2 run-instances \\\n    --image-id ami-0d26eb3972b7f8c96 \\\n    --instance-type t2.micro \\\n    --count 1 \\\n    --tag-specifications 'ResourceType=instance,Tags=[{Key=OWNER,Value=YOUR_NAME}]' \\\n    --no-cli-pager\n</code></pre></li> </ul> <p>You can leave this instance up for the duration of this guide.</p>"},{"location":"reference/tutorials/batch/#2-create-your-experiment","title":"2. Create your experiment","text":"<p>In an empty directory, create a folder named <code>experiments</code>:</p> <pre><code>mkdir experiments\n</code></pre> <p>Create a file named <code>experiment-1.json</code> inside <code>experiments/</code> with the following contents:</p> <pre><code>{\n\"title\": \"Running Chaos Toolkit from AWS Batch\",\n\"description\": \"N/A\",\n\"tags\": [],\n\"steady-state-hypothesis\": {\n\"title\": \"EC2 is RUNNING\",\n\"probes\": [\n{\n\"type\": \"probe\",\n\"name\": \"instance_state\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.ec2.probes\",\n\"func\": \"instance_state\",\n\"arguments\": {\n\"state\": \"running\",\n\"instance_ids\": [\n\"&lt;INSTANCE_ID&gt;\"\n],\n\"filters\": []\n}\n},\n\"tolerance\": true\n}\n]\n},\n\"method\": [],\n\"configuration\": {\n\"aws_region\": \"&lt;REGION&gt;\"\n}\n}\n</code></pre> <p>Replace the value of <code>&lt;INSTANCE_ID&gt;</code> with the value of the id of the deployed instance. Replace <code>&lt;REGION&gt;</code> with the name of the region the instance is deployed in.</p>"},{"location":"reference/tutorials/batch/#3-setup-your-docker-image","title":"3. Setup your Docker image","text":"<p>AWS Batch requires us to have a Docker image within the Job definition, this container will be what does the work for our Batch Job.</p> <p>Make a file named <code>Dockerfile</code> alongside <code>experiments/</code> with the following contents:</p> <pre><code>FROM chaostoolkit/chaostoolkit:latest\n\nRUN pip install chaostoolkit-aws\n\nRUN mkdir /home/svc/experiments\n\nCOPY experiments /home/svc/experiments\n\nWORKDIR /home/svc/experiments\n</code></pre>"},{"location":"reference/tutorials/batch/#4-create-your-ecr-repository-and-push-the-image","title":"4. Create your ECR repository and push the image","text":"AWS ConsoleAWS CLI <ul> <li>Navigate to the ECR console and select <code>Repositories</code></li> <li>Select <code>Create Repository</code></li> <li>Leave the repository set to <code>Private</code> and enter a name for your repository<ul> <li>For the purpose of this guide, we\u2019ll be using <code>ctk-batch</code></li> </ul> </li> <li>Select <code>Create Repository</code></li> <li>Select <code>&lt;repository-name&gt;</code> from the table</li> <li>Select <code>View push commands</code></li> <li>Follow the commands outlined there (We\u2019ll show you them below as an example)</li> </ul> <ul> <li>Create the ECR repository: <pre><code>aws ecr create-repository \\\n    --repository-name ctk-batch \\\n    --no-cli-pager\n</code></pre></li> </ul> <p>Logging in to ECR with Docker <pre><code>aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin &lt;your-aws-account-id&gt;.dkr.ecr.eu-west-2.amazonaws.com\n</code></pre></p> <pre><code>Login Succeeded\n</code></pre> <p>Building the image <pre><code>docker build -t ctk-batch .\n</code></pre></p> <pre><code>[+] Building 1.8s (10/10) FINISHED\n =&gt; [internal] load build definition from Dockerfile        0.0s\n =&gt; =&gt; transferring dockerfile: 220B                        0.0s\n =&gt; [internal] load .dockerignore                           0.0s\n =&gt; =&gt; transferring context: 2B                             0.0s\n =&gt; [internal] load metadata for docker.io/chaostoolkit/chaostoolkit:latest                                                         1.5s\n =&gt; [1/5] FROM docker.io/chaostoolkit/chaostoolkit:latest@sha256:3801eda37de7e8f00fb556220fff7935fea45d248881f4253cd9c29b4d3023f3   0.0s\n =&gt; =&gt; resolve docker.io/chaostoolkit/chaostoolkit:latest@sha256:3801eda37de7e8f00fb556220fff7935fea45d248881f4253cd9c29b4d3023f3   0.0s\n =&gt; [internal] load build context                           0.0s\n =&gt; =&gt; transferring context: 959B                           0.0s\n =&gt; CACHED [2/5] RUN pip install chaostoolkit-aws           0.0s\n =&gt; CACHED [3/5] RUN mkdir /home/svc/experiments            0.0s\n =&gt; [4/5] COPY experiments /home/svc/experiments            0.0s\n =&gt; [5/5] WORKDIR /home/svc/experiments                     0.0s\n =&gt; exporting to image                                      0.1s\n =&gt; =&gt; exporting layers                                     0.0s\n =&gt; =&gt; writing image sha256:4a3ce8f2824518bffa47ff3d293488f18f83e25711bedc32e13611a5c7e7e0af                                        0.0s\n =&gt; =&gt; naming to docker.io/library/ctk-batch                0.0s\n</code></pre> <p>Tagging the image <pre><code>docker tag ctk-batch:latest &lt;your-aws-account-id&gt;.dkr.ecr.eu-west-2.amazonaws.com/ctk-batch:latest\n</code></pre></p> <p>Pushing the image <pre><code>docker push &lt;your-aws-account-id&gt;.dkr.ecr.eu-west-2.amazonaws.com/ctk-batch:latest\n</code></pre></p> <pre><code>The push refers to repository [&lt;your-aws-account-id&gt;.dkr.ecr.eu-west-2.amazonaws.com/ctk-batch]\n5f70bf18a086: Pushed\ned804ed04ee1: Pushed\n8ac8250b5bff: Pushed\n65bb6a66824b: Pushed\n381a8a9c329b: Pushed\n7a767cefe1f5: Pushed\n011386fb6049: Pushed\nac4086fc0a4e: Pushed\n065eb9ef9cc4: Pushed\n93ee5bc36b87: Pushed\n9cc956b239dd: Pushed\nbc276c40b172: Pushed\nlatest: digest: sha256:9702b9cf63a6e4961689a661340fc0573d28d0e7f506b90fa5d080e4e7c9d275 size: 2826\n</code></pre>"},{"location":"reference/tutorials/batch/#5-create-your-batch-compute-environment","title":"5. Create your Batch Compute environment","text":"<p>To actually run your Jobs, Batch needs a Compute environment configured. This is where you tell AWS what runs the jobs (i.e EC2 instances/Fargate/etc.).</p> AWS ConsoleAWS CLI <ul> <li>Navigate to the Batch console and select <code>Compute environments</code></li> <li>Select <code>Create</code></li> <li>Leave <code>Managed</code> selected and provide a name<ul> <li>For the purpose of this guide we\u2019ll use <code>ctk-batch-comp-env</code></li> </ul> </li> <li>Leave <code>Fargate</code> selected under <code>Instance configuration</code> but set <code>Maximum vCPUs</code> to <code>1</code></li> <li>If you want to use a specific VPC, Subnets, and Security Group, select those in <code>Networking</code><ul> <li>For this guide, we\u2019ll use the values AWS filled in</li> </ul> </li> <li>Add a tag - We recommend at minimum, adding a tag <code>{\"OWNER\": \"your-name\"}</code></li> <li>Select <code>Create compute environment</code></li> </ul> <ul> <li> <p>To create your Compute environment, you\u2019ll need to choose which VPC to deploy into. Take note of the VPC ID of the VPC you want to deploy into from this command: <pre><code>aws ec2 describe-vpcs \\\n    --no-cli-pager\n</code></pre></p> </li> <li> <p>You\u2019ll also need to know the subnets you\u2019ll provide it, take note of the output for the following command, note down the subnet IDs you want to use, replacing <code>VPC_ID</code> with the VPC ID from above into: <pre><code>aws ec2 describe-subnets \\\n    --filter Name=vpc-id,Values=VPC_ID \\\n    --no-cli-pager\n</code></pre></p> </li> <li> <p>You\u2019ll also need to know the security groups to assign to your compute environment, take note of the output for the following command, note down the security group IDs you want to use, replacing <code>VPC_ID</code> with the VPC ID you\u2019re deploying into: <pre><code>aws ec2 describe-security-groups \\\n    --filter Name=vpc-id,Values=VPC_ID \\\n    --no-cli-pager\n</code></pre></p> </li> <li> <p>Create the Batch Compute environment, replacing <code>YOUR_NAME</code> with your name and replacing <code>SUBNET_IDS</code> with a comma seperated list of subnets and <code>SECURITY_GROUP_IDS</code> with a comma seperated list of security groups from the above commands: <pre><code>aws batch create-compute-environment \\\n    --compute-environment-name ctk-batch-comp-env \\\n    --type MANAGED \\\n    --state ENABLED \\\n    --compute-resources type=FARGATE,maxvCpus=1,subnets=SUBNET_IDS,securityGroupIds=SECURITY_GROUP_IDS \\\n    --tags OWNER=YOUR_NAME \\\n    --no-cli-pager\n</code></pre></p> </li> </ul>"},{"location":"reference/tutorials/batch/#6-create-your-batch-job-queue","title":"6. Create your Batch Job queue","text":"<p>When you submit Jobs, Batch uses a Job queue to manage what is and needs to be running and where it needs to run.</p> AWS ConsoleAWS CLI <ul> <li>Navigate to the Batch console and select <code>Job queues</code></li> <li>Select <code>Create</code></li> <li>Give a name for the Job queue<ul> <li>For the purpose of this guide we\u2019ll use <code>ctk-batch-job-queue</code></li> </ul> </li> <li>Leave priority as <code>1</code></li> <li>Add a tag - We recommend at minimum, adding a tag <code>{\"OWNER\": \"your-name\"}</code></li> <li>In the <code>Connected compute environments</code> section, select your Compute environment from the dropdown</li> <li>Select <code>Create</code></li> </ul> <ul> <li>Create the Batch Job queue, replacing <code>YOUR_NAME</code> with your name: <pre><code>aws batch create-job-queue \\\n    --job-queue-name ctk-batch-job-queue \\\n    --state ENABLED \\\n    --priority 1 \\\n    --compute-environment-order order=1,computeEnvironment=ctk-batch-comp-env \\\n    --tags OWNER=YOUR_NAME \\\n    --no-cli-pager\n</code></pre></li> </ul>"},{"location":"reference/tutorials/batch/#7-create-your-batch-job-execution-role","title":"7. Create your Batch Job execution role","text":"<p>Because you\u2019ve set up an ECR repository with your Docker image in, you need to provide Batch with an execution role that will allow it to pull the image from ECR. It will also enable Batch to output the logs of the container to CloudWatch.</p> <p>Don\u2019t be confused when we refer to <code>Elastic Container Service</code>, Batch is using it under the hood.</p> AWS ConsoleAWS CLI <ul> <li>Navigate to the IAM console and select <code>Roles</code></li> <li>Select <code>Create role</code></li> <li>Select <code>Elastic Container Service</code> from the list</li> <li>Select <code>Elastic Container Service Task</code> from the <code>Select your use case</code> list</li> <li>Select <code>Next: Permissions</code></li> <li>In the search bar, type <code>AmazonECSTaskExecutionRolePolicy</code> and select it</li> <li>Select <code>Next: Tags</code></li> <li>Add a tag - We recommend at minimum, adding a tag <code>{\"OWNER\": \"your-name\"}</code></li> <li>Select <code>Next: Review</code></li> <li>Provide a name for the Role<ul> <li>For the purpose of this guide we\u2019ll use <code>ctk-batch-execution-role</code></li> </ul> </li> <li>Select <code>Create Role</code></li> </ul> <ul> <li> <p>Create a file named <code>execution-assume-role.json</code> with the following contents: <pre><code>{\n\"Version\": \"2012-10-17\",\n\"Statement\": [\n{\n\"Effect\": \"Allow\",\n\"Principal\": {\n\"Service\": [\n\"ecs-tasks.amazonaws.com\"\n]\n},\n\"Action\": \"sts:AssumeRole\"\n}\n]\n}\n</code></pre></p> </li> <li> <p>Create the execution role, replacing <code>YOUR_NAME</code> with your name: <pre><code>aws iam create-role \\\n    --role-name ctk-batch-execution-role \\\n    --assume-role-policy-document file://execution-assume-role.json \\\n    --tags Key=OWNER,Value=YOUR_NAME \\\n    --no-cli-pager\n</code></pre></p> </li> <li> <p>Attach the <code>AmazonECSTaskExecutionRolePolicy</code> policy to the role: <pre><code>aws iam attach-role-policy \\\n    --role-name ctk-batch-execution-role \\\n    --policy-arn arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy \\\n    --no-cli-pager\n</code></pre></p> </li> </ul>"},{"location":"reference/tutorials/batch/#8-create-your-batch-job-job-role","title":"8. Create your Batch Job job role","text":"<p>The nature of <code>chaostoolkit-aws</code> means that we use <code>boto3</code> to make AWS requests within our experiment. To be able to make these calls, the container that is running our experiment needs credentials and permissions to do so.</p> <p>By creating a job role for our Job, we can:</p> <ul> <li>Provide our Job with credentials with AWS</li> <li>Outline exactly what our Job is allowed to do</li> </ul> AWS ConsoleAWS CLI <ul> <li>Navigate to the IAM console and select <code>Roles</code></li> <li>Select <code>Create role</code></li> <li>Select <code>Elastic Container Service</code> from the list</li> <li>Select <code>Elastic Container Service Task</code> from the <code>Select your use case</code> list</li> <li>Select <code>Next: Permissions</code></li> <li>Select <code>Create policy</code> (A new window will open)</li> <li>Move to the <code>JSON</code> tab and paste the following: <pre><code>{\n\"Version\": \"2012-10-17\",\n\"Statement\": [\n{\n\"Effect\": \"Allow\",\n\"Action\": [\n\"ec2:DescribeInstance*\"\n],\n\"Resource\": \"*\"\n}\n]\n}\n</code></pre></li> <li>Select <code>Next: Tags</code></li> <li>Add a tag - We recommend at minimum, adding a tag <code>{\"OWNER\": \"your-name\"}</code></li> <li>Select <code>Next: Review</code></li> <li>Provide a name for the Policy<ul> <li>For the purpose of this guide we\u2019ll use <code>ctk-batch-job-policy</code></li> </ul> </li> <li>Select <code>Create Policy</code></li> <li>Navigate back to the Role tab</li> <li>In the search bar, type <code>ctk-batch-job-policy</code> and select it (You may have to click the refresh button)</li> <li>Select <code>Next: Tags</code></li> <li>Add a tag - We recommend at minimum, adding a tag <code>{\"OWNER\": \"your-name\"}</code></li> <li>Select <code>Next: Review</code></li> <li>Provide a name for the Role<ul> <li>For the purpose of this guide we\u2019ll use <code>ctk-batch-job-role</code></li> </ul> </li> <li>Select <code>Create Role</code></li> </ul> <ul> <li> <p>Create a file named <code>job-assume-role.json</code> with the following contents: <pre><code>{\n\"Version\": \"2012-10-17\",\n\"Statement\": [\n{\n\"Effect\": \"Allow\",\n\"Principal\": {\n\"Service\": [\n\"ecs-tasks.amazonaws.com\"\n]\n},\n\"Action\": \"sts:AssumeRole\"\n}\n]\n}\n</code></pre></p> </li> <li> <p>Create the job role, replacing <code>YOUR_NAME</code> with your name: <pre><code>aws iam create-role \\\n    --role-name ctk-batch-job-role \\\n    --assume-role-policy-document file://job-assume-role.json \\\n    --tags Key=OWNER,Value=YOUR_NAME \\\n    --no-cli-pager\n</code></pre></p> </li> <li> <p>Create a file named \u2018job-policy.json` with the following contents: <pre><code>{\n\"Version\": \"2012-10-17\",\n\"Statement\": [\n{\n\"Effect\": \"Allow\",\n\"Action\": [\n\"ec2:DescribeInstance*\"\n],\n\"Resource\": \"*\"\n}\n]\n}\n</code></pre></p> </li> <li> <p>Create a policy for the job role, replacing <code>YOUR_NAME</code> with your name: <pre><code>aws iam create-policy \\\n    --policy-name ctk-batch-job-policy \\\n    --policy-document file://job-policy.json \\\n    --tags Key=OWNER,Value=YOUR_NAME \\\n    --no-cli-pager\n</code></pre></p> </li> <li> <p>Attach the policy to the job role, replacing <code>AWS_ACCOUNT_ID</code> with your AWS account id: <pre><code>aws iam attach-role-policy \\\n    --role-name ctk-batch-job-role \\\n    --policy-arn arn:aws:iam::AWS_ACCOUNT_ID:policy/ctk-batch-job-policy \\\n    --no-cli-pager\n</code></pre></p> </li> </ul>"},{"location":"reference/tutorials/batch/#9-create-your-batch-job-definition","title":"9. Create your Batch Job definition","text":"<p>This is where we tell AWS what our Job is and needs.</p> AWS ConsoleAWS CLI <ul> <li>Navigate to the Batch console and select <code>Job definitions</code></li> <li>Select <code>Create</code></li> <li>Provide a name<ul> <li>For the purpose of this guide we\u2019ll use <code>ctk-batch-job-def</code></li> </ul> </li> <li>Leave <code>Fargate</code> selected</li> <li>Scroll down to <code>Container properties</code></li> <li>For <code>Image</code>, provide the URI of your ECR image from earlier<ul> <li>For example, when writing this guide, ours is: <code>&lt;our-aws-account-id&gt;.dkr.ecr.eu-west-2.amazonaws.com/ctk-batch:latest</code></li> </ul> </li> <li>Leave <code>Bash</code> selected and inside command put: <code>run experiment-1.json</code></li> <li>Select <code>0.25</code> for <code>vCpus</code> and <code>0.5 GB</code> for <code>Memory</code></li> <li>Select <code>ctk-batch-execution-role</code> from the <code>Execution role</code> dropdown</li> <li>If your Compute environment is using Public subnets, select <code>Assign public IP</code><ul> <li>If you\u2019re using Private subnets, please follow this StackOverflow post on what best setup to have to enable your jobs to communicate with ECR</li> </ul> </li> <li>Select <code>Additional configuration</code></li> <li>Select <code>ctk-batch-job-role</code> from the <code>Job role</code> dropdown</li> <li>Scroll down to the <code>Log configuration</code> section</li> <li>Select <code>awslogs</code> from the <code>Log driver</code> dropdown</li> <li>Scroll down to the <code>Tags</code> section</li> <li>Add a tag - We recommend at minimum, adding a tag <code>{\"OWNER\": \"your-name\"}</code></li> <li>Select <code>Enable</code> under <code>Propagate Tags</code></li> <li>Select <code>Create</code></li> </ul> <ul> <li> <p>Create a file named <code>container-properties.json</code> with the following contents: <pre><code>{\n\"image\": \"ECR_IMAGE_URI\",\n\"command\": [\"run\", \"experiment-1.json\"],\n\"jobRoleArn\": \"arn:aws:iam::AWS_ACCOUNT_ID:role/ctk-batch-job-role\",\n\"executionRoleArn\": \"arn:aws:iam::AWS_ACCOUNT_ID:role/ctk-batch-execution-role\",\n\"resourceRequirements\": [\n{\n\"value\": \"512\",\n\"type\": \"MEMORY\"\n},\n{\n\"value\": \"0.25\",\n\"type\": \"VCPU\"\n}\n],\n\"logConfiguration\": {\n\"logDriver\": \"awslogs\"\n},\n\"networkConfiguration\": {\n\"assignPublicIp\": \"ENABLED\"\n},\n\"fargatePlatformConfiguration\": {\n\"platformVersion\": \"LATEST\"\n}\n}\n</code></pre></p> </li> <li> <p>Replace <code>ECR_IMAGE_URI</code> in the file with the URI of the image you pushed to ECR. Replace <code>AWS_ACCOUNT_ID</code> your AWS account ID.</p> </li> <li> <p>If you\u2019re running your jobs in public subnets, leave <code>\"assignPublicIp\": \"ENABLED\"</code> as it is, however, if you are not running them in public subnets, we recommend you look at this StackOverflow post on what best setup to have to enable your jobs to communicate with ECR.</p> </li> <li> <p>Create your Batch Job definition, replacing <code>YOUR_NAME</code> with your name: <pre><code>aws batch register-job-definition \\\n    --job-definition-name ctk-batch-job-def \\\n    --type container \\\n    --container-properties file://container-properties.json \\\n    --platform-capabilities FARGATE \\\n    --tags OWNER=YOUR_NAME \\\n    --propagate-tags \\\n    --no-cli-pager\n</code></pre></p> </li> </ul>"},{"location":"reference/tutorials/batch/#10-run-your-experiment","title":"10. Run your experiment","text":"<p>Now that you have:</p> <ul> <li>Setup your \u2018system\u2019</li> <li>Setup your container with its dependencies and experiments</li> <li>Setup your ECR repository</li> <li>Setup your required IAM Roles and Policies</li> <li>Setup your Batch Job Compute Environment, Queue, and Definition</li> </ul> <p>It\u2019s a great time to try and run it!</p> AWS ConsoleAWS CLI <ul> <li>Navigate to the Batch console and select <code>Jobs</code></li> <li>Select <code>ctk-batch-job-queue</code> from the <code>Please select a job queue</code> dropdown</li> <li>Select <code>Submit new job</code></li> <li>Enter a name (This can be anything)</li> <li>Select <code>ctk-batch-job-def</code> from the <code>Job definition</code> dropdown</li> <li>Select <code>ctk-batch-job-queue</code> from the <code>Job queue</code> dropdown</li> <li>Scroll down to the <code>Tags</code> section</li> <li>Add a tag - We recommend at minimum, adding a tag <code>{\"OWNER\": \"your-name\"}</code></li> <li>Select <code>Submit</code></li> <li>Select <code>ctk-batch-job-queue</code> from the <code>Please select a job queue</code> dropdown</li> <li>You can see your job, select it</li> <li>Under <code>Job status</code> you\u2019ll see the different states move along (Hit the refresh button)</li> <li>Once <code>Succeeded</code> is reached, you can select the link under <code>Log stream name</code></li> </ul> <p>Here you\u2019ll find the CloudWatch logs of the experiment:</p> <pre><code>No older events at this moment. Retry\n[2021-08-19 14:02:42 INFO] Validating the experiment's syntax\n[2021-08-19 14:02:42 INFO] Experiment looks valid\n[2021-08-19 14:02:42 INFO] Running experiment: Running Chaos Toolkit from AWS Batch\n[2021-08-19 14:02:42 INFO] Steady-state strategy: default\n[2021-08-19 14:02:42 INFO] Rollbacks strategy: default\n[2021-08-19 14:02:42 INFO] Steady state hypothesis: EC2 is RUNNING\n[2021-08-19 14:02:42 INFO] Probe: instance_state\n[2021-08-19 14:02:43 INFO] Steady state hypothesis is met!\n[2021-08-19 14:02:43 INFO] Playing your experiment's method now...\n[2021-08-19 14:02:43 INFO] No declared activities, let's move on.\n[2021-08-19 14:02:43 INFO] Steady state hypothesis: EC2 is RUNNING\n[2021-08-19 14:02:43 INFO] Probe: instance_state\n[2021-08-19 14:02:43 INFO] Steady state hypothesis is met!\n[2021-08-19 14:02:43 INFO] Let's rollback...\n[2021-08-19 14:02:43 INFO] No declared rollbacks, let's move on.\n[2021-08-19 14:02:43 INFO] Experiment ended with status: completed\nNo newer events at this moment. Auto retry paused. Resume\n</code></pre> <ul> <li> <p>Run your Job, replacing <code>YOUR_NAME</code> with your name, take note of <code>jobId</code> in the output: <pre><code>aws batch submit-job \\\n    --job-name ctk-batch-example-1 \\\n    --job-queue ctk-batch-job-queue \\\n    --job-definition ctk-batch-job-def \\\n    --propagate-tags \\\n    --tags OWNER=YOUR_NAME \\\n    --no-cli-pager\n</code></pre></p> </li> <li> <p>Describe your job, making note of the value of <code>logStreamName</code>, replace <code>JOB_ID</code> with the <code>jobId</code> from above: <pre><code>aws batch describe-jobs \\\n    --jobs JOB_ID \\\n    --no-cli-pager\n</code></pre></p> </li> <li> <p>Checkout the logs of your job, replacing <code>LOG_STREAM</code> with the log stream name from above: <pre><code>aws logs get-log-events \\\n    --log-group-name /aws/batch/job \\\n    --log-stream-name LOG_STREAM \\\n    --output text \\\n    --no-cli-pager\n</code></pre></p> </li> </ul> <p>You\u2019ll then see the CloudWatch logs of the experiment: <pre><code>b/36345990587319449028074048616721581140117476148622393344      f/36345990607367818961553078820962191867228353142498787343\nEVENTS  1629810588018   [2021-08-24 13:09:45 INFO] Validating the experiment's syntax   1629810585420\nEVENTS  1629810588018   [2021-08-24 13:09:45 INFO] Experiment looks valid       1629810585571\nEVENTS  1629810588018   [2021-08-24 13:09:45 INFO] Running experiment: Running Chaos Toolkit from AWS Batch     1629810585572\nEVENTS  1629810588018   [2021-08-24 13:09:45 INFO] Steady-state strategy: default       1629810585577\nEVENTS  1629810588018   [2021-08-24 13:09:45 INFO] Rollbacks strategy: default  1629810585577\nEVENTS  1629810588018   [2021-08-24 13:09:45 INFO] Steady state hypothesis: EC2 is RUNNING      1629810585577\nEVENTS  1629810588018   [2021-08-24 13:09:45 INFO] Probe: instance_state        1629810585578\nEVENTS  1629810588018   [2021-08-24 13:09:46 INFO] Steady state hypothesis is met!      1629810586238\nEVENTS  1629810588018   [2021-08-24 13:09:46 INFO] Playing your experiment's method now...      1629810586238\nEVENTS  1629810588018   [2021-08-24 13:09:46 INFO] No declared activities, let's move on.       1629810586238\nEVENTS  1629810588018   [2021-08-24 13:09:46 INFO] Steady state hypothesis: EC2 is RUNNING      1629810586238\nEVENTS  1629810588018   [2021-08-24 13:09:46 INFO] Probe: instance_state        1629810586239\nEVENTS  1629810588018   [2021-08-24 13:09:46 INFO] Steady state hypothesis is met!      1629810586318\nEVENTS  1629810588018   [2021-08-24 13:09:46 INFO] Let's rollback...    1629810586319\nEVENTS  1629810588018   [2021-08-24 13:09:46 INFO] No declared rollbacks, let's move on.        1629810586319\nEVENTS  1629810588018   [2021-08-24 13:09:46 INFO] Experiment ended with status: completed      1629810586319\n</code></pre></p>"},{"location":"reference/tutorials/batch/#summary","title":"Summary","text":"<p>Like our Running Chaos Toolkit from an EC2 instance guide, our experiment was extremely simple. Again, this guide was not meant to teach you to write experiments. The purpose of the guide was to show you how you might run Chaos Toolkit from AWS to interact with your AWS infrastructure, in a more reactive process.</p> <p>Rather than having an EC2 instance running and not doing any work, you have the ability now to fire off Chaos Toolkit experiments and only use the compute you need.</p> <p>You should now have an appreciation and the ability to:</p> <ul> <li>Create a containerised setup for Chaos Toolkit</li> <li>Setup IAM Roles and Policies to restrict and enable your Batch Jobs to run</li> <li>Create and run Batch Jobs which will carry out your Chaos Toolkit experiments<ul> <li>More importantly, within your infrastructures networking limits</li> </ul> </li> </ul>"},{"location":"reference/tutorials/batch/#extras","title":"Extras","text":"<p>Whilst the above guide will tell you all you need to know to get started with AWS Batch and running Chaos Toolkit experiments with jobs, it is very manual and has a few shortcomings that are easily fixed with some more work.</p>"},{"location":"reference/tutorials/batch/#aws-cloud-development-kit-cdk","title":"AWS Cloud Development Kit (CDK)","text":"<p>As mentioned near the start of this guide, we have this repository which contains an AWS CDK project which deploys almost the same infrastructure as this guide.</p> <p>The infrastructure differs slightly in:</p> <ul> <li>We create our own new VPC</li> <li>We specifically place our Compute environment in private subnets</li> <li>AWS CDK auto-magically sets up networking infrastructure for us to communicate with ECR without having to give our Jobs public IP addresses</li> </ul> <p>We also modify the <code>experiment-1.json</code> file to accept an environment variable for the EC2 instance ID as this will be provided by CDK.</p> <p>If you wish to try this project out, clone the repository and ensure you install all of the requirements first.</p> <p>Once you\u2019re setup with the requirements, you can check what infrastructure will be deployed with:</p> <pre><code>make diff\n</code></pre> <pre><code>...\nResources\n[+] AWS::S3::Bucket journal-bucket-your-name-dev journalbucketyour-namedev58D204DE\n[+] AWS::S3::BucketPolicy journal-bucket-your-name-dev/Policy journalbucketyour-namedevPolicyDFBFADE1\n[+] Custom::S3AutoDeleteObjects journal-bucket-your-name-dev/AutoDeleteObjectsCustomResource journalbucketyour-namedevAutoDeleteObjectsCustomResourceB5FE1104\n[+] AWS::IAM::Role Custom::S3AutoDeleteObjectsCustomResourceProvider/Role CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092\n[+] AWS::Lambda::Function Custom::S3AutoDeleteObjectsCustomResourceProvider/Handler CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F\n[+] AWS::EC2::VPC vpc-your-name-dev vpcyour-namedev8A672852\n[+] AWS::EC2::Subnet vpc-your-name-dev/PublicSubnet1/Subnet vpcyour-namedevPublicSubnet1Subnet4E80B3F7\n[+] AWS::EC2::RouteTable vpc-your-name-dev/PublicSubnet1/RouteTable vpcyour-namedevPublicSubnet1RouteTable3BA26768\n[+] AWS::EC2::SubnetRouteTableAssociation vpc-your-name-dev/PublicSubnet1/RouteTableAssociation vpcyour-namedevPublicSubnet1RouteTableAssociationF3D844E7\n[+] AWS::EC2::Route vpc-your-name-dev/PublicSubnet1/DefaultRoute vpcyour-namedevPublicSubnet1DefaultRouteD7E793DD\n[+] AWS::EC2::EIP vpc-your-name-dev/PublicSubnet1/EIP vpcyour-namedevPublicSubnet1EIP712EAA5B\n[+] AWS::EC2::NatGateway vpc-your-name-dev/PublicSubnet1/NATGateway vpcyour-namedevPublicSubnet1NATGatewayCC6D84C6\n[+] AWS::EC2::Subnet vpc-your-name-dev/PublicSubnet2/Subnet vpcyour-namedevPublicSubnet2Subnet3E3E0046\n[+] AWS::EC2::RouteTable vpc-your-name-dev/PublicSubnet2/RouteTable vpcyour-namedevPublicSubnet2RouteTable1AB520E0\n[+] AWS::EC2::SubnetRouteTableAssociation vpc-your-name-dev/PublicSubnet2/RouteTableAssociation vpcyour-namedevPublicSubnet2RouteTableAssociation2FEAAF25\n[+] AWS::EC2::Route vpc-your-name-dev/PublicSubnet2/DefaultRoute vpcyour-namedevPublicSubnet2DefaultRouteC103C9D2\n[+] AWS::EC2::EIP vpc-your-name-dev/PublicSubnet2/EIP vpcyour-namedevPublicSubnet2EIP6AD92B60\n[+] AWS::EC2::NatGateway vpc-your-name-dev/PublicSubnet2/NATGateway vpcyour-namedevPublicSubnet2NATGatewayA09AEBA1\n[+] AWS::EC2::Subnet vpc-your-name-dev/PrivateSubnet1/Subnet vpcyour-namedevPrivateSubnet1SubnetB315A65A\n[+] AWS::EC2::RouteTable vpc-your-name-dev/PrivateSubnet1/RouteTable vpcyour-namedevPrivateSubnet1RouteTableA5FAAF1C\n[+] AWS::EC2::SubnetRouteTableAssociation vpc-your-name-dev/PrivateSubnet1/RouteTableAssociation vpcyour-namedevPrivateSubnet1RouteTableAssociationE3B5D7DD\n[+] AWS::EC2::Route vpc-your-name-dev/PrivateSubnet1/DefaultRoute vpcyour-namedevPrivateSubnet1DefaultRoute9152FB24\n[+] AWS::EC2::Subnet vpc-your-name-dev/PrivateSubnet2/Subnet vpcyour-namedevPrivateSubnet2Subnet414716F0\n[+] AWS::EC2::RouteTable vpc-your-name-dev/PrivateSubnet2/RouteTable vpcyour-namedevPrivateSubnet2RouteTable225072CD\n[+] AWS::EC2::SubnetRouteTableAssociation vpc-your-name-dev/PrivateSubnet2/RouteTableAssociation vpcyour-namedevPrivateSubnet2RouteTableAssociationF9EA82A2\n[+] AWS::EC2::Route vpc-your-name-dev/PrivateSubnet2/DefaultRoute vpcyour-namedevPrivateSubnet2DefaultRoute7BE0AFBF\n[+] AWS::EC2::InternetGateway vpc-your-name-dev/IGW vpcyour-namedevIGW70FB840E\n[+] AWS::EC2::VPCGatewayAttachment vpc-your-name-dev/VPCGW vpcyour-namedevVPCGWB8F53F81\n[+] AWS::EC2::SecurityGroup instance-your-name-dev/InstanceSecurityGroup instanceyour-namedevInstanceSecurityGroup50C02701\n[+] AWS::IAM::Role instance-your-name-dev/InstanceRole instanceyour-namedevInstanceRoleF653EE93\n[+] AWS::IAM::InstanceProfile instance-your-name-dev/InstanceProfile instanceyour-namedevInstanceProfile6799F951\n[+] AWS::EC2::Instance instance-your-name-dev instanceyour-namedev8DD0F85A\n[+] AWS::IAM::Role batch-service-role-your-name-dev batchserviceroleyour-namedevB064BF84\n[+] AWS::IAM::Role batch-execution-role-your-name-dev batchexecutionroleyour-namedev39DE3188\n[+] AWS::IAM::Policy batch-execution-policy-your-name-dev batchexecutionpolicyyour-namedev8BCEF321\n[+] AWS::IAM::Role batch-job-role-your-name-dev batchjobroleyour-namedevAC17F802\n[+] AWS::IAM::Policy batch-job-role-your-name-dev/DefaultPolicy batchjobroleyour-namedevDefaultPolicy44B9665C\n[+] AWS::IAM::Policy batch-job-policy-your-name-dev batchjobpolicyyour-namedev9C329AAB\n[+] AWS::Batch::ComputeEnvironment compute-env-your-name-dev computeenvyour-namedev\n[+] AWS::Batch::JobQueue job-queue-your-name-dev jobqueueyour-namedev\n[+] AWS::Batch::JobDefinition job-def-your-name-dev jobdefyour-namedev\n</code></pre> <p>To deploy the infrastructure, run:</p> <pre><code>make deploy\n</code></pre> <pre><code>...\nChaosToolkitBatchExampleStack-your-name-dev: creating CloudFormation changeset...\n[\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7] (35/43)\n09:24:07 | CREATE_IN_PROGRESS   | AWS::CloudFormation::Stack            | ChaosToolkitBatchExampleStack-your-name-dev\n09:24:52 | CREATE_IN_PROGRESS   | AWS::IAM::InstanceProfile             | instance-your-name-dev/InstanceProfile\n09:25:13 | CREATE_IN_PROGRESS   | AWS::EC2::NatGateway                  | vpc-your-name-dev/PublicSubnet2/NATGateway\n09:25:13 | CREATE_IN_PROGRESS   | AWS::EC2::NatGateway                  | vpc-your-name-dev/PublicSubnet1/NATGateway\n...\n</code></pre> <p>You can then navigate to the Batch console and run jobs as previously outlined in the guide above.</p>"},{"location":"reference/tutorials/batch/#storing-your-journal","title":"Storing your journal","text":"<p>You might have noticed that being able to view the Chaos Toolkit experiment journal presents a pickle of a situation. As Batch Job containers are ephemeral, once the Job has run and terminated (either successfully or not), the place your experiment just ran in is destroyed for good.</p> <p>There are likely several ways you could get around this issue, you could implement an extension to upload journals somewhere, you could extend chaostoolkit-aws to upload journal runs to S3 or to an EBS volume (if you\u2019d deployed that too).</p> <p>In the CDK example, we actually snuck in a way to store journals; we use a wrapper script which calls <code>chaostoolkit</code> and then uses <code>boto3</code> in a Python script to upload the journal to S3, into a bucket we also deploy in the stack.</p> <p>Take a look at our <code>Dockerfile</code> compared to the one in the guide above:</p> <pre><code>FROM chaostoolkit/chaostoolkit:latest\n\nRUN pip install chaostoolkit-aws\n\nRUN mkdir /home/svc/experiments\n\nCOPY experiments /home/svc/experiments\nCOPY run_experiment.sh /home/svc/experiments/\nCOPY upload_journal.py /home/svc/experiments/\n\nWORKDIR /home/svc/experiments\n\nENTRYPOINT [ \"sh\", \"run_experiment.sh\" ]\n</code></pre> <p>We\u2019ve added two new <code>COPY</code> statements, moving our wrapper script and our upload script into the container. We\u2019ve also added an override to the containers <code>ENTRYPOINT</code> value, which in <code>chaostoolkit/chaostoolkit:latest</code> is <code>chaos</code>.</p> <p>The wrapper script is very simple, it just looks like:</p> <pre><code>#!/bin/bash\n\nchaos run $1 --journal-path=/home/svc/experiments/journal.json\n\npython3 upload_journal.py\n</code></pre> <p>Our upload script is also very basic:</p> <pre><code>import os\nfrom datetime import datetime\n\nimport boto3\n\n\ndef upload_journal():\n    s3 = boto3.client(\"s3\")\n    with open(\"/home/svc/experiments/journal.json\", \"rb\") as journal:\n        s3.upload_fileobj(\n            journal,\n            os.environ[\"JOURNAL_BUCKET\"],\n            f\"{datetime.now().strftime('%Y%m%d-%H%M%S')}.json\",\n        )\n\n\nif __name__ == \"__main__\":\n    upload_journal()\n</code></pre> <p>With these changes and a small modification to the <code>command</code> of our Job definition, we can now invoke our experiment, specify a location for our journal, and then upload the journal with a suitable name - we set our journal name to the current <code>datetime</code>. You could also include your experiment name if you have many of them.</p>"},{"location":"reference/tutorials/blockchain/","title":"Chaos Engineering experiments against a blockchain","text":"<p>Credits</p> <p>This article has been authored by Yolanne Lee and you can find the original article code on Yolanne\u2019s repository</p> <p>Blockchains are interesting concepts to test using chaos engineering principles. This is because they operate based on user usage, taking advantage of a network of participants and internal algorithms to create a distributed, decentralized ledger.</p> <p>This tutorial will not focus on teaching core blockchain concepts. While the setup may be done by simply pulling from my github repository, you may alternatively invest some time reading through the great tutorial here!</p> <p>If you choose to proceed with the tutorial, you will need to ensure that your HTTP requests match logically with those in this tutorial.</p> <p>Ready? Great! Let\u2019s get started.</p>"},{"location":"reference/tutorials/blockchain/#setup","title":"Setup","text":"<p>First, clone the code using the command below in your command line. This fetches an up-to-date version of all files required to run the experiment.</p> <p><code>$ git clone https://github.com/yolannel/CTKBlockchain</code></p> <p>Assuming you are running Python 3.6 or higher, you can install all required dependencies via the following command in your command line. Please note that it is highly recommended that you work inside of a virtual environment. A simple explanation of virtual environments may be found here; if you\u2019re running PyCharm or another editor which has in-built venv support then check your project settings!</p> <p><code>$ pip install -U -r requirements.txt</code></p> <p>Now you\u2019re all set up to dive into the experiments!</p>"},{"location":"reference/tutorials/blockchain/#chaos-toolkit-and-blockchain","title":"Chaos Toolkit and Blockchain","text":""},{"location":"reference/tutorials/blockchain/#looking-forward","title":"Looking forward","text":"<p>Blockchains are inherently user dependent which is why it presents a unique case to test with Chaos Toolkit. This tutorial will guide you through the thought process of creating two experiments:</p> <ol> <li>Testing a simple transaction</li> <li>Testing the consensus mechanism</li> </ol> <p>We will follow the above order because the consensus mechanism naturally builds off of the transaction model. If you require additional help at any point regarding the CTK, you can view the documentation.</p> <p>You can consider an experiment as an automator for the process you\u2019d normally do to test your program: you preset a full task flow so that your testing is repeatable and easy to run. The results of your experiment are also automatically recorded, so you can continuously expose your system to stressors and understand its strengths and weaknesses from reading the records which are automatically recorded in your journal file.</p>"},{"location":"reference/tutorials/blockchain/#transaction-experiment","title":"Transaction Experiment","text":"<p>We\u2019ll use this as an introduction to the CTK experiment as well. An experiment is a single json file which tests a functionality of your program. It has several components that must be declared:</p> <ul> <li><code>title</code></li> <li>This forces you to be organised with your experiments. The title should be     clear for anyone reading it to understand what is being performed in the     experiment.</li> <li><code>description</code></li> <li>Similarly, a more detailed description which clarifies the experiment should     be included. In my case, I use this property to describe the expected     behaviour of the system so the tester knows right off the bat what is     happening.</li> <li><code>method</code></li> <li>This is where the majority of your work goes. More details are included     below.</li> </ul> <p>When we start to think about creating an experiment, we need to have a well-defined goal of testing. For example, the blockchain should support making a simple transaction which can be mined; before and after mining, the chain should exist and be callable. No rollbacks should be supported since a blockchain should be immutable.</p> <p>This is the beginning of my experiment:</p> <pre><code>{\n\"title\": \"Can we make a new transaction?\",\n\"description\": \"The system should respond to a transaction request.\",\n\"tags\": [\"tx\"],\n...\n</code></pre> <p>The format of the json file is quite simple. Similarly to a dictionary, there is a property, and a value assigned to the property. In the case of a property which can take multiple values, such as <code>\"tags\"</code>, square brackets are put around the values. Try adding an additional tag to the experiment by adding a comma after the first value and adding a second tag!</p> <p>Below, we see the <code>\"steady-state-hypothesis\"</code>. We previously mentioned what the blockchain should be capable of both before and after the experiment. The steady state hypothesis tests for this condition - in this case, the condition is simply that the chain should exist.</p> <p>We also introduce a probe! This is the workhorse of any experiment. Probes are able to carry out tests and listen for responses. They have the following properties:</p> <ul> <li><code>type</code></li> <li>REQUIRED. The type should always be set to <code>\"probe\"</code></li> <li><code>name</code></li> <li>REQUIRED. This is, again, for human readability. The name should describe     what the probe does.</li> <li><code>tolerance</code></li> <li>This takes a value or set of values that we can consider a \u2018good\u2019 response.     Since my probe is an http request, the tolerance is set to the http status     code corresponding to a successful call. You can see line 165 of     blockchain.py that a successful chain GET request returns a status code     of 200.</li> <li><code>provider</code></li> <li>REQUIRED. This defines what type of probe is being asked for: <code>\"python\"</code>,     <code>\"http\"</code> or <code>\"process\"</code>.</li> <li>For a http probe, you must include an <code>\"url\"</code> property which is what you\u2019d     normally test with manually.</li> <li>You may also include a <code>\"timeout\"</code> property which only considers a response     successful (or within tolerance) if it is received within a certain     timeframe. Units are in seconds.</li> <li>Note that the probe is encapsulated within square brackets. You can define   additional probes within the square brackets which are separated by commas.</li> </ul> <pre><code>    \"steady-state-hypothesis\": {\n\"title\": \"Chain exists\",\n\"probes\": [\n{\n\"type\": \"probe\",\n\"name\": \"chain-exists\",\n\"tolerance\": 200,\n\"provider\": {\n\"type\": \"http\",\n\"timeout\": 5,\n\"url\": \"http://127.0.0.1:5000/chain\"\n}\n}\n]\n},\n</code></pre> <p>Now we reach the main body of the json file, the method. The basic structure is simply a list of probes and actions. Actions are very similar to probes, but should introduce new information or a change to the system being tested rather than simply checking its state.</p> <p>As an example, checking that the chain exists is a probe but creating a new transaction is an action.</p> <p>We have to POST a request, which differs from the previous check-chain probe which used a simple \u2018GET\u2019, so we define the <code>\"method\"</code> to be POST.</p> <p>The <code>\"header\"</code> is a property which defines header names. These provide information/context about the type of information being sent - in our case, the content should be read as a json request so the header defines the content-type.</p> <p>Certain arguments must be included (see line 173 in blockchain.py) in the json for the request to be valid according to our blockchain.py file:</p> <ul> <li><code>\"sender\"</code></li> <li><code>\"recipient\"</code></li> <li><code>\"amount\"</code></li> </ul> <p>We can include arguments in our action by simply including <code>\"arguments\"</code> and listing them in name-value pairs.</p> <pre><code>\"method\": [\n{\n\"type\": \"action\",\n\"name\": \"make-new-transaction\",\n\"provider\": {\n\"type\": \"http\",\n\"timeout\": 1,\n\"url\": \"http://127.0.0.1:5000/transactions/new\",\n\"method\": \"POST\",\n\"headers\": {\n\"Content-Type\": \"application/json\"\n},\n\"arguments\": {\n\"sender\": \"me\",\n\"recipient\": \"new-other-address\",\n\"amount\": 20\n}\n}\n},\n{\n\"type\": \"probe\",\n\"name\": \"check-chain\",\n\"provider\": {\n\"type\": \"http\",\n\"url\": \"http://127.0.0.1:5000/mine\"\n}\n},\n{\n\"type\": \"action\",\n\"name\": \"mine-block\",\n\"provider\": {\n\"type\": \"http\",\n\"timeout\": 3,\n\"url\": \"http://127.0.0.1:5000/mine\"\n}\n},\n{\n\"type\": \"probe\",\n\"name\": \"check-chain\",\n\"provider\": {\n\"type\": \"http\",\n\"url\": \"http://127.0.0.1:5000/mine\"\n}\n}\n],\n</code></pre> <p>Finally, we reach the rollbacks! When designing an experiment, you should be aware of the capabilities of your system and also what it should be able to do. For example, I could include code in my blockchain.py file that allows a user to delete a transaction which hasn\u2019t been mined yet; however, this would violate the operation of a blockchain because blockchains derive trust from immutability (as mentioned before). So, you can see below that no rollbacks are included because a user should not be able to delete changes nor does my blockchain.py file include an option to.</p> <pre><code>\"rollbacks\": [\n]\n}\n</code></pre>"},{"location":"reference/tutorials/blockchain/#running-the-experiment","title":"Running the experiment","text":"<p>In your command line, you should create the blockchain before running the experiment by running the blockchain.py file:</p> <p><code>$ python blockchain.py</code></p> <p>Then, you can run the experiment by using the command:</p> <p><code>$ chaos run testTransaction.json</code></p> <p>That\u2019s your first experiment!</p>"},{"location":"reference/tutorials/blockchain/#consensus-experiment","title":"Consensus Experiment","text":"<p>While our blockchain is a very simple one, it should be able to demonstrate arguably the key reason why we can call it \u2018decentralized\u2019 and \u2018distributed\u2019: the consensus mechanism. As before, see the brilliant tutorial linked above if you really want to get into the details!</p> <p>On a topical level, the consensus mechanism is how you determine the global truth. If one person posts a transaction on a block that was mined at the exact same time, it could accidentally branch off of the original chain. Additionally, there must be a verifiable task involved in mining that is unbiased and sufficiently difficult, but still easy to check. Both of these requirements are addressed by the consensus mechanism, which is the task required to mine a block.</p> <p>We will demo a simple Proof of Work, which essentially is an extremely difficult computation to solve a math puzzle. We will then start a second chain as an example of the branching that may occasionally occur; this blockchain resolves itself by taking the longest chain.</p> <p>We will not walk through the entire experiment this time, but the procedure planned out is as follows.</p> <ol> <li>Like before, we should ensure that the chain exist on two separate nodes.</li> <li>Simulate activity.</li> <li>Check the chains exist still.</li> <li>Resolve the chains to identify the global truth.</li> </ol> <p>Steps 1 and 3 should be familiar to you and I invite you to try coding them yourself! Step 2 brings an opportunity to show another use case for CTK. So far we have used the http provider, but we may also use a python provider.</p> <pre><code>{\n\"type\": \"action\",\n\"name\": \"simulate activity\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"os\",\n\"func\": \"system\",\n\"arguments\": {\n\"command\": \"python -c \\\"import activity; activity.run(100)\\\"\"\n}\n}\n}\n</code></pre> <ul> <li>To make this experiment os-agnostic, we use python to run a python file   through the os.system.</li> <li><code>module</code></li> <li>This should be a Python module - in our case, we use the os module since it     comes with the core Python libraries.</li> <li><code>func</code></li> <li>This should be a function in the specified module that can be run.</li> <li><code>arguments</code></li> <li>If a function takes arguments, check the documentation so you know how the     arguments are titled and you can list them in the standard JSON format.     Here, the argument is a command and the input is     <code>'\"python -c \\\"import activity; activity.run(100)\\\"\"</code></li> </ul> <p>The <code>activity.py</code> file run by simulate activity randomly posts transactions from either of the two nodes and occasionally mines a block. For reference, the approximate probability of posting a transaction to any of the two chains is 75% and accordingly, the probability of mining from either of the two chains is 25%.</p> <p>Finally, we want to resolve the chains. This is an http request which we\u2019ve learned earlier, and I again invite you to try your hand at it!</p>"},{"location":"reference/tutorials/blockchain/#running-the-experiment_1","title":"Running the experiment","text":"<p>In your command line, you should create the blockchain and start both nodes (here we use 127.0.0.1:5000 and 127.0.0.1:5001) before running the experiment:</p> <p><code>$ python blockchain.py --port 5000</code></p> <p>.. and on a new terminal,</p> <p><code>$ python blockchain.py --port 5001</code></p> <p>Then, you can run the experiment by using the command:</p> <p><code>$ chaos run testConsensus.json</code></p> <p>You\u2019ve completed the tutorial!</p>"},{"location":"reference/tutorials/blockchain/#some-key-takeaways","title":"Some key takeaways","text":"<ul> <li>The http provider makes it simple to test user requests that are very common   in web applications</li> <li>The Python provider is a very powerful tool that can run \u2018on its own\u2019 or other   Python files</li> <li>The CTK at the core of it tests your system on what could possibly happen</li> <li>This means it is context specific - walking through this tutorial, you     have seen how the experiments should be tailored to how the system should     work, like how there are no rollback options.</li> <li>On an even more abstracted level, the CTK is an automation tool - note how the   consensus test essentially automates a lot of usage and then checks. This   actually makes it incredibly powerful even if you aren\u2019t specifically running   a chaos experiment because there is a set process that you create which is   replicable. Think of experiments as blueprints for what you want to try!</li> </ul>"},{"location":"reference/tutorials/blockchain/#thanks","title":"Thanks","text":"<p>Chaos Toolkit is an open source project hosted on Github. If you have any issues then raise them on the Github, and if you\u2019d like to contribute, start here!</p> <p>The blockchain tutorial linked in the beginning is completely external to this tutorial and all credits go to Daniel van Flymen.</p>"},{"location":"reference/tutorials/containerising/","title":"Containerising Chaos Toolkit","text":"<p>You may find yourself in a situation that requires you to run your Chaos Toolkit Experiments from within a container. This may be to encapsulate the dependencies required or to run CTK in a different environment, for whichever reason you have, containerising CTK is straightforward.</p> <p>Chaos Toolkit provides three images you can use as bases for your own needs:</p> <ul> <li><code>chaostoolkit/chaostoolkit</code> which is tagged <code>latest</code> and per new releases   version. It\u2019s based on Python 3.7 Alpine base image. So it\u2019s not suitable   for every configuration when you need specific software in your image</li> <li><code>chaostoolkit/chaostoolkit:basic</code> is based on Python 3.10 Debian Bullseye base   image. It only contains Chaos Toolkit as per the previous image but is based   on Debian with a more recent Python version</li> <li><code>chaostoolkit/chaostoolkit:full</code> is based on Python 3.10 Debian Bullseye base   image. It contains Chaos Toolkit and a list of extensions and is based   on Debian with a more recent Python version</li> </ul>"},{"location":"reference/tutorials/containerising/#using-the-vanilla-chaostoolkit-image","title":"Using the vanilla <code>chaostoolkit</code> image","text":"<p>Chaos Toolkit builds and pushes a Docker Image upon every release of a new version of the chaostoolkit package. This can then be used out of the box by referring to it locally on the command line with:</p> <pre><code>docker run chaostoolkit/chaostoolkit:latest info core\n</code></pre> <pre><code>Unable to find image 'chaostoolkit/chaostoolkit:latest' locally\nlatest: Pulling from chaostoolkit/chaostoolkit\nDigest: sha256:3801eda37de7e8f00fb556220fff7935fea45d248881f4253cd9c29b4d3023f3\nStatus: Downloaded newer image for chaostoolkit/chaostoolkit:latest\nNAME                VERSION   \nCLI                 1.9.2     \nCore library        1.19.0\n</code></pre> <p>It should be noted that this only contains vanilla <code>chaostoolkit</code>.</p> <p>You could then mount a directory containing your experiments (if they are only using vanilla <code>chaostoolkit</code>) and run them:</p> <pre><code>docker run \\\n-v $PWD/experiments:/experiments \\\nchaostoolkit/chaostoolkit:latest \\\n--log-file /experiments/chaostoolkit.log \\\nrun /experiments/experiment.json \\\n--journal-path /experiments/journal.json\n</code></pre> <p>You\u2019d then find in <code>$PWD/experiments</code>:</p> <pre><code>ls $PWD/experiments\n</code></pre> <pre><code>chaostoolkit.log experiment.json  journal.json\n</code></pre>"},{"location":"reference/tutorials/containerising/#containerising-with-extensions","title":"Containerising with extensions","text":"<p>You can obviously use the <code>chaostoolkit/chaostoolkit:full</code> image which contains the most commonly used extensions. But you can also tailor to your need as follows. We will be using the <code>chaostoolkit/chaostoolkit:basic</code> image as base so we build using a Debian image.</p>"},{"location":"reference/tutorials/containerising/#chaostoolkit-aws-example","title":"<code>chaostoolkit-aws</code> example","text":"<p>If for example, you needed certain AWS activities for your chaos experiments, you could create a Dockerfile like so:</p> <pre><code>FROM chaostoolkit/chaostoolkit:basic\n\nRUN pip install chaostoolkit-aws\n</code></pre> <p>To then use this, you\u2019d first build the image:</p> <pre><code>docker build -t ctk-aws .\n</code></pre> <pre><code>[+] Building 2.1s (6/6) FINISHED                                                                                                                                                            \n =&gt; [internal] load build definition from Dockerfile                                                                                0.0s\n =&gt; =&gt; transferring dockerfile: 114B                                                                                                0.0s\n =&gt; [internal] load .dockerignore                                                                                                   0.0s\n =&gt; =&gt; transferring context: 2B                                                                                                     0.0s\n =&gt; [internal] load metadata for docker.io/chaostoolkit/chaostoolkit:latest                                                         2.0s\n =&gt; [1/2] FROM docker.io/chaostoolkit/chaostoolkit:latest@sha256:3801eda37de7e8f00fb556220fff7935fea45d248881f4253cd9c29b4d3023f3   0.0s\n =&gt; =&gt; resolve docker.io/chaostoolkit/chaostoolkit:latest@sha256:3801eda37de7e8f00fb556220fff7935fea45d248881f4253cd9c29b4d3023f3   0.0s\n =&gt; CACHED [2/2] RUN pip install chaostoolkit-aws                                                                                   0.0s\n =&gt; exporting to image                                                                                                              0.0s\n =&gt; =&gt; exporting layers                                                                                                             0.0s\n =&gt; =&gt; writing image sha256:84f4579bee5ff42881a226643dbe37c8bc1e0ecb60e153c46395f9dc62a8f256                                        0.0s\n =&gt; =&gt; naming to docker.io/library/ctk-aws                                                                                          0.0s\n</code></pre> <p>Then you\u2019d confirm <code>chaostoolkit-aws</code> is available with:</p> <pre><code>docker run ctk-aws info extensions\n</code></pre> <pre><code>NAME                                    VERSION   LICENSE                       DESCRIPTION\nchaostoolkit-aws                        0.16.0    Apache License Version 2.0    AWS\n</code></pre>"},{"location":"reference/tutorials/ec2/","title":"Running Chaos Toolkit from an EC2 instance","text":"<p>It is common when using AWS for hosting your infrastructure that you\u2019ll have strict security policies in place. These policies will usually only allow for internal traffic within AWS, amongst various other things. A question we\u2019re asked a lot is <code>can I run Chaos Toolkit from AWS, to run against AWS?</code>. The answer is simply, yes, you can.</p>"},{"location":"reference/tutorials/ec2/#why-ec2","title":"Why EC2?","text":"<p>The reasons for providing a guide on running Chaos Toolkit from an EC2 instance are simple enough:</p> <ul> <li>Most AWS users are comfortable with EC2</li> <li>It is the most analogous service to running something on your own workstation</li> </ul>"},{"location":"reference/tutorials/ec2/#the-steps","title":"The Steps","text":"<p>There are a few pre-requisites required to be able to follow this guide:</p> <ul> <li>You\u2019ll need access to the AWS Console (We\u2019re assuming you\u2019re comfortable here)<ul> <li>Or you\u2019ll need AWS CLI installed and configured</li> </ul> </li> <li>You\u2019ll need to be able to create EC2 instances (Or have someone do this for you)</li> <li>You\u2019ll need to be able to create IAM Roles and Policies (Or have someone do this for you)</li> <li>You\u2019ll need to be able to use Systems Manager - Session Manager</li> </ul>"},{"location":"reference/tutorials/ec2/#1-create-your-instance","title":"1. Create your instance","text":"AWS ConsoleAWS CLI <ul> <li>Navigate to the EC2 console and select <code>Launch Instance</code></li> <li>For this guide, we\u2019ll select the <code>Amazon Linux 2 AMI</code> at the top of the list</li> <li>For this guide, we\u2019ll select a <code>t2.micro</code> (But you can choose a larger one)</li> <li>Go onto <code>Configure Instance Details</code></li> <li>Select the VPC to deploy into via the <code>Network</code> dropdown</li> <li>Select the Subnet to deploy into via the <code>Subnet</code> dropdown</li> <li>To the right of <code>IAM role</code>, select <code>Create a new IAM role</code><ul> <li>Create an instance profile as per the <code>Creating an instance profile with minimal Session Manager permissions (console)</code> in this Session Manager Documentation</li> <li>Go back to the EC2 wizard and select the newly created role in the dropdown (You may have to click the refresh button)</li> </ul> </li> <li>Go onto <code>Add Storage</code> - For now, the defaults will be fine</li> <li>Go onto <code>Add Tags</code> - We recommend at minimum, adding a tag <code>{\"OWNER\": \"your-name\"}</code></li> <li>Go onto <code>Configure Security Group</code></li> <li>Click the <code>X</code> to the right of the SSH rule, you won\u2019t need this</li> <li>Go onto <code>Review and Launch</code> - Select <code>Launch</code></li> <li>Select <code>Proceed without a key pair</code>, check the tickbox, and click <code>Launch Instances</code></li> </ul> <p>To be able to connect to your instance via Session Manager, you\u2019ll first need to create a few IAM components.</p> <ul> <li> <p>Create a file named <code>assume-role.json</code> with the following contents: <pre><code>{\n\"Version\": \"2012-10-17\",\n\"Statement\": [\n{\n\"Effect\": \"Allow\",\n\"Principal\": {\n\"Service\": [\n\"ec2.amazonaws.com\"\n]\n},\n\"Action\": \"sts:AssumeRole\"\n}\n]\n}\n</code></pre></p> </li> <li> <p>Create your instances IAM instance profile: <pre><code>aws iam create-instance-profile \\\n    --instance-profile-name CTK-EC2-INSTANCE-PROFILE \\\n    --no-cli-pager\n</code></pre></p> </li> <li> <p>Create your instances IAM role, replacing <code>YOUR_NAME</code> with your name: <pre><code>aws iam create-role \\\n    --role-name CTK-EC2-ROLE \\\n    --assume-role-policy-document file://assume-role.json \\\n    --tags Key=OWNER,Value=YOUR_NAME \\\n    --no-cli-pager\n</code></pre></p> </li> <li> <p>Create a file named <code>role-policy.json</code> with the following contents: <pre><code>{\n\"Version\": \"2012-10-17\",\n\"Statement\": [\n{\n\"Effect\": \"Allow\",\n\"Action\": [\n\"ssm:UpdateInstanceInformation\",\n\"ssmmessages:CreateControlChannel\",\n\"ssmmessages:CreateDataChannel\",\n\"ssmmessages:OpenControlChannel\",\n\"ssmmessages:OpenDataChannel\"\n],\n\"Resource\": \"*\"\n},\n{\n\"Effect\": \"Allow\",\n\"Action\": [\n\"s3:GetEncryptionConfiguration\"\n],\n\"Resource\": \"*\"\n}\n]\n}\n</code></pre></p> </li> <li> <p>Create the policy, replacing <code>YOUR_NAME</code> with your name: <pre><code>aws iam create-policy \\\n    --policy-name CTK-EC2-SESSION-MANAGER-POLICY \\\n    --policy-document file://role-policy.json \\\n    --tags Key=OWNER,Value=YOUR_NAME \\\n    --no-cli-pager\n</code></pre></p> </li> <li> <p>Attach your policy to your role, replacing <code>AWS_ACCOUNT_ID</code> with your AWS account id: <pre><code>aws iam attach-role-policy \\\n    --role-name CTK-EC2-ROLE \\\n    --policy-arn arn:aws:iam::AWS_ACCOUNT_ID:policy/CTK-EC2-SESSION-MANAGER-POLICY \\\n    --no-cli-pager\n</code></pre></p> </li> <li> <p>Attach your role to your instance profile: <pre><code>aws iam add-role-to-instance-profile \\\n    --instance-profile-name CTK-EC2-INSTANCE-PROFILE \\\n    --role-name CTK-EC2-ROLE \\\n    --no-cli-pager\n</code></pre></p> </li> </ul> <p>Now that your instances IAM entities are sorted, you can create your instance.</p> <ul> <li>Create your instance, using the instance profile created earlier, replacing <code>YOUR_NAME</code> with your name: <pre><code>aws ec2 run-instances \\\n    --image-id ami-0d26eb3972b7f8c96 \\\n    --instance-type t2.micro \\\n    --iam-instance-profile Name=CTK-EC2-INSTANCE-PROFILE \\\n    --count 1 \\\n    --tag-specifications 'ResourceType=instance,Tags=[{Key=OWNER,Value=YOUR_NAME}]' \\\n    --no-cli-pager\n</code></pre></li> </ul>"},{"location":"reference/tutorials/ec2/#2-connect-to-your-instance","title":"2. Connect to your instance","text":"<ul> <li>Navigate to the Systems Manager console and select <code>Session Manager</code></li> <li>Select <code>Start Session</code></li> <li>Select your instance from the <code>Target instances</code> table</li> <li>Select <code>Start session</code></li> <li>A new tab will open with a terminal session open in the browser</li> </ul>"},{"location":"reference/tutorials/ec2/#3-setup-chaos-toolkit","title":"3. Setup Chaos Toolkit","text":"<p>You\u2019ll see a prompt like:</p> <pre><code>sh-4.2$\n</code></pre> <p>Change to the home directory with:</p> <pre><code>cd ~\n</code></pre> <p>Create a new directory for your experimentation and navigate inside:</p> <pre><code>mkdir my-experiments &amp;&amp; cd my-experiments\n</code></pre> <p>Create a virtual environment for the Chaos Toolkit dependencies:</p> <pre><code>python3 -m venv .venv &amp;&amp; source .venv/bin/activate &amp;&amp; python3 -m pip install --upgrade pip\n</code></pre> <p>Install <code>chaostoolkit</code> and its AWS extension <code>chaostoolkit-aws</code>:</p> <pre><code>pip3 install chaostoolkit chaostoolkit-aws\n</code></pre>"},{"location":"reference/tutorials/ec2/#4-create-an-experiment","title":"4. Create an experiment","text":"<p>For the purpose of this guide, we will just create an experiment with a Steady State Hypothesis that interrogates EC2 and checks that our current instance, is in the <code>running</code> state. We don\u2019t have a method, we\u2019re merely showing that we can talk to AWS from within AWS.</p> <p>Create a file named <code>experiment.json</code> with the following contents:</p> <pre><code>{\n\"title\": \"Running Chaos Toolkit from an EC2 instance\",\n\"description\": \"N/A\",\n\"tags\": [],\n\"steady-state-hypothesis\": {\n\"title\": \"Current EC2 is RUNNING\",\n\"probes\": [\n{\n\"type\": \"probe\",\n\"name\": \"instance_state\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"chaosaws.ec2.probes\",\n\"func\": \"instance_state\",\n\"arguments\": {\n\"state\": \"running\",\n\"instance_ids\": [\n\"&lt;INSTANCE_ID&gt;\"\n],\n\"filters\": []\n}\n},\n\"tolerance\": true\n}\n]\n},\n\"method\": [],\n\"configuration\": {\n\"aws_region\": \"&lt;REGION&gt;\"\n}\n}\n</code></pre> <p>Replace the value of <code>&lt;INSTANCE_ID&gt;</code> with the value of the id of the current instance. Replace <code>&lt;REGION&gt;</code> with the name of the region the instance is deployed in.</p> <p>You can then run the experiment with:</p> <pre><code>chaos run ./experiment.json\n</code></pre> <pre><code>[2021-08-18 10:12:29 INFO] Validating the experiment's syntax\n[2021-08-18 10:12:29 INFO] Experiment looks valid\n[2021-08-18 10:12:29 INFO] Running experiment: Running Chaos Toolkit from an EC2 instance\n[2021-08-18 10:12:29 INFO] Steady-state strategy: default\n[2021-08-18 10:12:29 INFO] Rollbacks strategy: default\n[2021-08-18 10:12:29 INFO] Steady state hypothesis: Current EC2 is RUNNING\n[2021-08-18 10:12:29 INFO] Probe: instance_state\n[2021-08-18 10:12:29 ERROR]   =&gt; failed: botocore.exceptions.ClientError: An error occurred\n(UnauthorizedOperation) when calling the DescribeInstances operation: You are not authorized to\nperform this operation.\n[2021-08-18 10:12:29 WARNING] Probe terminated unexpectedly, so its tolerance could not be validated\n[2021-08-18 10:12:29 CRITICAL] Steady state probe 'instance_state' is not in the given tolerance so\nfailing this experiment\n[2021-08-18 10:12:29 INFO] Experiment ended with status: failed\n</code></pre> <p>You\u2019ll notice the error you just received:</p> <pre><code>failed: botocore.exceptions.ClientError: An error occurred\n(UnauthorizedOperation) when calling the DescribeInstances operation: You are not\nauthorized to perform this operation.\n</code></pre> <p>This is because your instance profile role you created earlier doesn\u2019t have a suitable policy statement allowing you to describe EC2 instances.</p> <p>Navigate to the IAM console and find the Policy you created earlier, add the following statement to it:</p> <pre><code>{\n\"Effect\": \"Allow\",\n\"Action\": [\n\"ec2:DescribeInstance*\"\n],\n\"Resource\": \"*\"\n}\n</code></pre> <p>Run your experiment again:</p> <pre><code>chaos run ./experiment.json\n</code></pre> <pre><code>[2021-08-18 10:24:56 INFO] Validating the experiment's syntax\n[2021-08-18 10:24:56 INFO] Experiment looks valid\n[2021-08-18 10:24:56 INFO] Running experiment: Running Chaos Toolkit from an EC2\ninstance\n[2021-08-18 10:24:56 INFO] Steady-state strategy: default\n[2021-08-18 10:24:56 INFO] Rollbacks strategy: default\n[2021-08-18 10:24:56 INFO] Steady state hypothesis: Current EC2 is RUNNING\n[2021-08-18 10:24:56 INFO] Probe: instance_state\n[2021-08-18 10:24:56 INFO] Steady state hypothesis is met!\n[2021-08-18 10:24:56 INFO] Playing your experiment's method now...\n[2021-08-18 10:24:56 INFO] No declared activities, let's move on.\n[2021-08-18 10:24:56 INFO] Steady state hypothesis: Current EC2 is RUNNING\n[2021-08-18 10:24:56 INFO] Probe: instance_state\n[2021-08-18 10:24:56 INFO] Steady state hypothesis is met!\n[2021-08-18 10:24:56 INFO] Let's rollback...\n[2021-08-18 10:24:56 INFO] No declared rollbacks, let's move on.\n[2021-08-18 10:24:56 INFO] Experiment ended with status: completed\n</code></pre> <p>As you\u2019ll notice, your EC2 profile now has the suitable permissions. This should ultimately give you a good sense on how IAM allows you to give specific permissions to the instances running your Chaos Toolkit experiments.</p>"},{"location":"reference/tutorials/ec2/#summary","title":"Summary","text":"<p>Whilst the experiment within this guide was simple, the guide was not meant to teach you how to write experiments. The purpose of the guide was to show you how you might run Chaos Toolkit from AWS to interact with your AWS infrastructure.</p> <p>You should now have an appreciation and the ability to:</p> <ul> <li>Create an EC2 instance within your AWS network</li> <li>Securely connect to that instance via Session Manager<ul> <li>Negating the need for Security Group policies or SSH access</li> </ul> </li> <li>Setup and run Chaos Toolkit from an EC2 instance</li> <li>Modify the IAM policies for your instance to increase/decrease the experiments ability to interact with your systems.</li> </ul>"},{"location":"reference/tutorials/ec2/#notes","title":"Notes","text":"<p>It should be noted that several things could be done differently in this guide to suit your own setup, they could be as follows:</p> <ul> <li>Using a containerised setup like prescribed in this guide within your instance</li> <li>Using a git repository (whether pulled or created) to use version control on the instance and keep your experiments in version control</li> <li>Storing experiments/experiment journals/experiment logs in S3 so they\u2019re accessible to others in your organisation</li> <li>Connecting via SSH (if your organisation is less concerned about allowing traffic from your local IP)</li> </ul>"},{"location":"reference/tutorials/extend/","title":"Learn the basic of extending the Chaos Toolkit","text":"<p>The Chaos Toolkit comes with a rich catalog of extensions. Sometimes however, this library is not enough. So, how do you go about extending the Chaos Toolkit?</p> <p>It turns out there are a variety of ways.</p>"},{"location":"reference/tutorials/extend/#generate-a-binary-and-execute-it-from-the-experiment","title":"Generate a binary and execute it from the experiment","text":"<p>The Chaos Toolkit is written in Python 3, but you may not have the Python skills or willingness to develop it. One quick solution is to write your own small binary (say you are a rust or golang shop) and call it as a <code>process</code> action. Keep in mind that the binary may be used as a probe in the steady-state so ensure its returned value is easily processed via regex or jsonpath tolerance types. At the very least, the process should signal through its exit code if it completed normally (with 0).</p> <p>For example, let\u2019s create a simple binary with rust. In a file named <code>echo.rs</code>:</p> <pre><code>use std::env;\n\nfn main() {\nlet args: Vec&lt;String&gt; = env::args().collect();\nprintln!(&amp;args[1..]);\n}\n</code></pre> <pre><code>rustc echo.rs\n</code></pre> <pre><code>./echo hello world\n</code></pre> <pre><code>[\"hello\", \"world\"]\n</code></pre> <pre><code>echo $?\n</code></pre> <pre><code>0\n</code></pre> <p>An action using this binary would look like this:</p> JSONYAML <pre><code>{\n\"name\": \"echo-my-message\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"process\",\n\"path\": \"echo\",\n\"arguments\": \"hello world\"\n}\n}\n</code></pre> <pre><code>name: echo-my-message\ntype: action\nprovider:\ntype: process\npath: echo\narguments: hello world\n</code></pre> <p>This assumes the binary is on the <code>chaos</code> PATH and the user has permissions.</p>"},{"location":"reference/tutorials/extend/#call-a-http-endpoint","title":"Call a HTTP endpoint","text":"<p>Sometimes, you have HTTP endpoints that are used internally for specific operational tasks. They are internals and crafted for your unique needs. This can be enough to create the bespoke condition for your probes and actions to call via a <code>http</code> provider.</p>"},{"location":"reference/tutorials/extend/#create-a-simple-python-function","title":"Create a simple Python function","text":"<p>While extending with a piece of Python code may sound more work, it does not have to be. Indeed, you can create a simple Python module and have a set of functions that are called from your experiment directly. THe trick is to ensure the module can be found in the PYTHONPATH.</p> <p>Let\u2019s see an example:</p> <p>Assuming a Python module called <code>kettle.py</code>:</p> <pre><code>from chaoslib.types import Configuration, Secrets\n\n__all__ = [\"put_on\"]\n\n\ndef put_on(temperature: int = 90, configuration: Configuration = None,\n           secrets: Secrets = None) -&gt; None:\n\"\"\"\n    Sets the kettle to the expected temperature (celsius) and put it on.\n\n    Will return when the kettle has reached it.\n    \"\"\"\n    # do something here\n    pass\n</code></pre> <p>If <code>kettle.py</code> lives next to <code>experiment.json</code> then the action could be:</p> <pre><code>{\n\"name\": \"put-kettle-on\",\n\"type\": \"action\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"kettle\",\n\"func\": \"put_on\",\n\"arguments\": {\n\"temperature\": 80\n}\n}\n}\n</code></pre> <p>You could finally make it available as follows:</p> <pre><code>ls\n</code></pre> <pre><code>kettle.py experiment.json\n</code></pre> <pre><code>export PYTHONPATH=`pwd`\nchaos run experiment.json\n</code></pre> <p>The Python module does not have to live next to the experiment. It can also contain more than one function of course.</p>"},{"location":"reference/tutorials/run-flow/","title":"Learn all about the experiment execution\u2019s flow","text":""},{"location":"reference/tutorials/run-flow/#execution-flow-diagram","title":"Execution Flow Diagram","text":"<p>The diagram below shows the flow used by Chaos Toolkit when running an experiment:</p> <p></p>"},{"location":"reference/tutorials/run-flow/#whats-happening-when-running-an-experiment","title":"What\u2019s happening when running an experiment?","text":"<p>Chaos Toolkit runs an experiment as given in the experiment\u2019s file. The default behavior is straightforward, it runs the activities from the file sequentially in the order they are declared.</p> <p>The first block executed, if found, is the steady-state hypothesis block. In this particular instances, it acts as a sort of a gateway to say \u201cthe system is normal and meeting its baseline, you can carry on\u201d. By doing so, we notify the world is in a state which we can comprehend and make sense of.</p> <p>Then, the method is applied. Usually the method consists of at least an action but can also contain probes and other actions. The first action defines the turbulence we want to introduce into the system and see if it impacts our initial baseline. Other actions should be few in numbers or they may render the reading of the results challenging. Probes are merely data collectors of what is happening in your system as the turbulence is happening. It helps the analysis.</p> <p>Next, the steady state hypothesis is executed again but, this time, it tells us if our baseline has deviated considering the perturbation.</p> <p>Finally, rollbacks are applied. They serve to usually undo the condition but should not be misunderstood as a way to put the system back to a normal state when the deviation really triggered a dire chain of events for your system.</p>"},{"location":"reference/tutorials/run-flow/#one-experiment-but-a-variety-of-execution-strategies","title":"One experiment but a variety of execution strategies","text":"<p>Schematically, the execution flow runs the hypothesis, the method, the hypothesis again and finally the rollbacks. However, this flow can somewhat controlled via the Chaos Toolkit runtime flags.</p>"},{"location":"reference/tutorials/run-flow/#hypothesis-strategies","title":"Hypothesis strategies","text":"<p>The default behavior is to execute the hypothesis before and after the method. Unless, the hypothesis fails during the \u201cbefore\u201d phase. In that case, the execution terminates as <code>\"failed\"</code> to signal the system wasn\u2019t in an appropriate baseline state for the experiment to make sense.</p> <p>The <code>chaos run</code> command provides the <code>--hypothesis-strategy</code> flag to change the default behavior.</p> <p>Sometimes, you have an experiment where you know the state is not appropriate but you want to see if a specific condition could bring it back and make the hypothesis valid after the method was applied. In that case, you should use <code>--hypothesis-strategy=after-method-only</code>.</p> <p>On the contrary, if you don\u2019t want to assert any deviation, you can decide to run the hypothesis only before with <code>--hypothesis-strategy=before-method-only</code>.</p> <p>More interesting use cases can then be applied. What if you have a long method and wish to not wait until it finishes to verify the hypothesis. Well, then you can use <code>`--hypothesis-strategy=continuously</code> to indicate that, on top of the default behavior, you want the hypothesis block to be applied during the method periodically. You can change the period, which defaults to every second, with <code>--hypothesis-frequency=10</code>. Notice that, in that case, Chaos Toolkit will not interrupt as soon as a deviation is found. To do that, you need to pass the additional <code>--fail-fast</code> flag.</p> <p>Finally, you can also use <code>--hypothesis-strategy=during-method-only</code> to have the same behavior as <code>continuously</code> but removing the default verification before and after the method.</p>"},{"location":"reference/tutorials/run-flow/#rollback-strategies","title":"Rollback strategies","text":"<p>Rollbacks are always executed save for three conditions:</p> <ul> <li>the hypothesis failed on its first pass. Before the method was applied.   There is nothing to rollback in that case.</li> <li>the Chaos Toolkit received a signal such as SIGINT.   Maybe the operator wants to investigate the system as it is.</li> <li>a control triggered an interruption</li> </ul> <p>You may change that behavior with a <code>chaos run</code> flag.</p> <p>Pass <code>--rollback-strategy=always</code> to apply rollbacks no matter the state of the execution.</p> <p>Use <code>--rollback-strategy=never</code> to never play them. This can be useful  during authoring of the experiment sometimes.</p> <p>Use <code>--rollback-strategy=deviated</code> to play rollbacks only if a deviation was found.</p>"},{"location":"reference/tutorials/run-flow/#terminating-the-execution-gracefully","title":"Terminating the execution gracefully","text":"<p>Chaos Engineering is a powerful practice that may lead to undesirable side effects in your system. Sometimes, it is expected that an operator, or an automated service, terminates an experiment much earlier to prevent further difficulties.</p>"},{"location":"reference/tutorials/run-flow/#lets-start-with-the-default-behavior","title":"Let\u2019s start with the default behavior","text":"<p>When an experiment runs to its end it means that, even if a deviation was found, the Chaos Toolkit should leave nothing hanging around, such as zombie processes. Also, if rollbacks were declared and requested to be applied, they will be played. In other words, if your experiment is properly constructed,  you should not have to do anything else.</p> <p>Chaos Toolkit makes no promises that your system will be back to its normal however. The discovery you make along the way usually resolves in impacts that cannot be anticipated.</p> <p>This means that when an experiment finishes, your system may well be in a very strange state but it does not mean Chaos Toolkit failed at doing its job. In fact, it\u2019s quite the exact nature of the beast: Chaos Engineering is making those pain points very clear to all.</p> <p>Experiments can be interrupted. In that case, Chaos Toolkit tries its best to abide by the runtime condition that you set. For instance, if you decided to always play the rollbacks, Chaos Toolkit will execute them. The default behavior is not to play them however for the simple reason that if you interrupted an experiment, you may well want to investigate the system and if rollbacks were executed, you may lose some important traces or state.</p>"},{"location":"reference/tutorials/run-flow/#digging-into-the-interruptions-flow","title":"Digging into the interruption\u2019s flow","text":"<p>When the Chaos Toolkit receives a signal, it starts the termination flow of the experiment:</p> <ul> <li>When this happens during the first pass of   the steady-state hypothesis block, this means the experiment finishes before   its method is applied. In that case, rollbacks do not need to be played in any   case.</li> <li>When the signal is caught during the method, remaining activities are not   executed and the current running experiment is completed. Rollbacks are played   if the strategy requested they are played. Otherwise, they are ignored.   If an activity is running in the background, the experiment will wait until   it finishes.</li> <li>When the signal is caught during the rollbacks, remaining actions are not   played and the experiment finishes.</li> </ul>"},{"location":"reference/tutorials/run-flow/#reacting-to-signals-aka-being-a-good-citizen","title":"Reacting to signals, aka being a good citizen","text":"<p>The Chaos Toolkit knows it makes operators confident it will act appropriately upon receiving a variety of signals. It supports therefore the following signals:</p> <ul> <li> <p><code>SIGINT</code>    Mostly received when the operator hits Ctrl-C. This triggers the   interruption flow.</p> </li> <li> <p><code>SIGTERM</code>   This signal is often used by other processes to indicate the Chaos Toolkit   process ought to terminate. For instance, this is the signal sent to   Kubernetes pods (with a graceful period before the harsher SIGKILL)</p> </li> <li> <p><code>SIGUSR1</code>/<code>SIGUSR2</code> (Unix only)   These two signals are rarely sent by operators but are used so that experiment   extension author can programmatically terminate the experiment without   having to wait for any blocking operation. </p> </li> </ul> <p>In all cases, the termination flow is triggered. The only different one is <code>SIGUSR2</code> which will always ignore rollbacks and will not wait for background activities to terminate normally. In other words, <code>SIGUSR2</code> is the only way you can terminate harshly an experiment.</p> <p>Otherwise, there are no visible difference between <code>SIGINT</code>, <code>SIGTERM</code> and <code>SIGUSR1</code>.</p>"},{"location":"reference/tutorials/tolerance/","title":"Learn all about Steady-State Hypothesis Tolerances","text":"<p>A Chaos Engineering experiment starts and ends with a steady-state hypothesis.</p> <p>The objective is initially to act as a validation gateway whereby, if the steady-state is not met before we execute the method, then the experiment bails out. What can you learn from an unknown state already?</p> <p>Then, once the method has been applied, the goal is understand if the system coped with the turbulence or if it deviated, implying a weakness may have been uncovered.</p> <p>To achieve this, the Chaos Toolkit experiment expects you use probes to query your system\u2019s state during the steady-state hypothesis. The validation of the probes\u2019 output is performed by what we call tolerances.</p>"},{"location":"reference/tutorials/tolerance/#lets-get-started-with-a-basic-example","title":"Let\u2019s get started with a basic example","text":"<p>Let\u2019s take the simple experiment below:</p> JSONYAML <pre><code>{\n\"title\": \"Our default language is English\",\n\"description\": \"We find the expected English language in the file\",\n\"steady-state-hypothesis\": {\n\"title\": \"Our hypothesis is that lang file is in English\",\n\"probes\": [\n{\n\"type\": \"probe\",\n\"name\": \"lookup-lang-file\",\n\"tolerance\": true,\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"os.path\",\n\"func\": \"exists\",\n\"arguments\": {\n\"path\": \"default.locale.txt\"\n}\n}\n},\n{\n\"type\": \"probe\",\n\"name\": \"lookup-text-in-lang-file\",\n\"tolerance\": 0,\n\"provider\": {\n\"type\": \"process\",\n\"path\": \"grep\",\n\"arguments\": \"welcome=hello default.locale.txt\"\n}\n}\n]\n},\n\"method\": [\n{\n\"type\": \"action\",\n\"name\": \"switch-language-to-french\",\n\"provider\": {\n\"type\": \"process\",\n\"path\": \"sed\",\n\"arguments\": \"-i s/hello/bonjour/ default.locale.txt\"\n}\n}\n],\n\"rollbacks\": [\n{\n\"type\": \"action\",\n\"name\": \"switch-language-back-to-english\",\n\"provider\": {\n\"type\": \"process\",\n\"path\": \"sed\",\n\"arguments\": \"-i s/bonjour/hello/ default.locale.txt\"\n}\n}\n]\n}\n</code></pre> <pre><code>title: Our default language is English\ndescription: We find the expected English language in the file\nsteady-state-hypothesis:\ntitle: Our hypothesis is that lang file is in English\nprobes:\n- type: probe\nname: lookup-lang-file\ntolerance: true\nprovider:\ntype: python\nmodule: os.path\nfunc: exists\narguments:\npath: default.locale.txt\n- type: probe\nname: lookup-text-in-lang-file\ntolerance: 0\nprovider:\ntype: process\npath: grep\narguments: welcome=hello default.locale.txt\nmethod:\n- type: action\nname: switch-language-to-french\nprovider:\ntype: process\npath: sed\narguments: '-i s/hello/bonjour/ default.locale.txt'\nrollbacks:\n- type: action\nname: switch-language-back-to-english\nprovider:\ntype: process\npath: sed\narguments: '-i s/bonjour/hello/ default.locale.txt'\n</code></pre> <p>This experiment looks for the welcome message in the default locale file and expected <code>\"hello\"</code>.</p> <p>Here is an example of it running:</p> <pre><code>chaos run experiment.json\n</code></pre> <pre><code>[2019-06-25 21:37:59 INFO] Validating the experiment's syntax\n[2019-06-25 21:37:59 INFO] Experiment looks valid\n[2019-06-25 21:37:59 INFO] Running experiment: Our default language is English\n[2019-06-25 21:37:59 INFO] Steady state hypothesis: Our hypothesis is that lang file is in English\n[2019-06-25 21:37:59 INFO] Probe: lookup-lang-file\n[2019-06-25 21:37:59 INFO] Probe: lookup-text-in-lang-file\n[2019-06-25 21:37:59 INFO] Steady state hypothesis is met!\n[2019-06-25 21:37:59 INFO] Action: switch-language-to-french\n[2019-06-25 21:37:59 INFO] Steady state hypothesis: Our hypothesis is that lang file is in English\n[2019-06-25 21:37:59 INFO] Probe: lookup-lang-file\n[2019-06-25 21:37:59 INFO] Probe: lookup-text-in-lang-file\n[2019-06-25 21:37:59 INFO] Steady state hypothesis is met!\n[2019-06-25 21:37:59 INFO] Let's rollback...\n[2019-06-25 21:37:59 INFO] Rollback: switch-language-back-to-english\n[2019-06-25 21:37:59 INFO] Action: switch-language-back-to-english\n[2019-06-25 21:37:59 INFO] Experiment ended with status: completed\n</code></pre> <p>In this experiment, we have two probes checking two basic facets of our system. First, we ensure the locale file exists and then we validate the file contains our expected value.</p> <p>Let\u2019s now analyse the two tolerances we used.</p> <p>First, we use a Python provider which calls the os.path.exists(path) standard library function. This function returns a boolean and that is what the tolerance checks for.</p> <p>The second probe calls a process which sets its exit code to <code>0</code> when the command succeeds. Again, this is the value that the tolerance validates.</p> <p>Now that we know the basics, let\u2019s move on to see what are the supported tolerances.</p>"},{"location":"reference/tutorials/tolerance/#built-in-supported-tolerances","title":"Built-in supported tolerances","text":"<p>The experiment specification describes the supported tolerances but let\u2019s review them more pragmatically here.</p> <p>Chaos Toolkit aims at being easy for simple tasks whenever it can. In this case, for the general use-cases, we support the following tolerances:</p> <ul> <li><code>boolean</code>: set the tolerance property to <code>true</code> | <code>false</code></li> <li><code>integer</code>: set the tolerance property to any integer (negative or positive)</li> <li><code>string</code>: set the tolerance property to a string</li> <li><code>list</code>: set the tolerance property to a sequence of values that can be   compared to the output by value</li> </ul> <p>In these three cases, the probe\u2019s output must equal the given tolerance.</p> <p>On top of this native types, we support also more advance cases such as:</p> <ul> <li><code>range</code>: set the tolerance property to:</li> </ul> JSONYAML <pre><code>{\n\"type\": \"range\",\n\"range\": [6.4, 7.5]\n}\n</code></pre> <pre><code>type: range\nrange:\n- 6.4\n- 7.5\n</code></pre> <p>The <code>range</code> is an inclusive min-max range made of numerical values. This is    handy when validating a gauge for instance.</p> <ul> <li><code>regex</code>: set the tolerance property to:</li> </ul> JSONYAML <pre><code>{\n\"type\": \"regex\",\n\"target\": \"stdout\",\n\"pattern\": \"^welcome=hello$\"\n}\n</code></pre> <pre><code>type: regex\ntarget: stdout\npattern: \"^welcome=hello$\"\n</code></pre> <ul> <li><code>pattern</code> must be a valid regular expression, for now supported by the Python engine. This is useful when looking for a value in a raw string.</li> <li><code>target</code> is optional, and allows changing the default target for a given provider.</li> </ul> <p>Currently supported targets per provider are as follows:</p> Provider Default Values process <code>\"status\"</code> <code>\"stdout\"</code>, <code>\"stderr\"</code> http <code>\"status\"</code> <code>\"headers\"</code>, <code>\"body\"</code> python Undefined Undefined <ul> <li><code>jsonpath</code>: set the tolerance property to:</li> </ul> JSONYAML <pre><code>{\n\"type\": \"jsonpath\",\n\"path\": \"...\"\n}\n</code></pre> <pre><code>type: jsonpath\npath: ...\n</code></pre> <p>The <code>path</code> must be a valid JSONPath supported by the jsonpath2 library. This is handy when looking for a value in a mapping output.</p> <ul> <li><code>probe</code>: set the tolerance property to:</li> </ul> JSONYAML <pre><code>{\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n...\n}\n}\n</code></pre> <pre><code>type: probe\nprovider:\ntype: python\n</code></pre> <p>In that case the tolerance is run as yet another probe which must return    a boolean. The probe must accept an argument called <code>value</code> that is set    to the output of the steady-state probe. In essence, a probe validating the    output of another probe. This is advanced stuff only used when the builtin    probes won\u2019t cut it.</p>"},{"location":"reference/tutorials/tolerance/#common-scenarios","title":"Common scenarios","text":"<p>Let\u2019s now review how to apply these tolerances to most common scenarios.</p>"},{"location":"reference/tutorials/tolerance/#validate-the-return-code-of-a-boolean-python-probe","title":"Validate the return code of a boolean Python probe","text":"<p>In this case, the simple <code>boolean</code> tolerance will do.</p> <p>For instance:</p> JSONYAML <pre><code>{\n\"type\": \"probe\",\n\"name\": \"lookup-lang-file\",\n\"tolerance\": true,\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"os.path\",\n\"func\": \"exists\",\n\"arguments\": {\n\"path\": \"default.locale.txt\"\n}\n}\n}\n</code></pre> <pre><code>type: probe\nname: lookup-lang-file\ntolerance: true\nprovider:\ntype: python\nmodule: os.path\nfunc: exists\narguments:\npath: default.locale.txt\n</code></pre>"},{"location":"reference/tutorials/tolerance/#validate-the-exit-code-of-a-process","title":"Validate the exit code of a process","text":"<p>In this case, the simple <code>integer</code> tolerance will do. Indeed, the Chaos Toolkit will look by default to the exit code of the process for validation.</p> <p>In the above example:</p> JSONYAML <pre><code>{\n\"type\": \"probe\",\n\"name\": \"lookup-text-in-lang-file\",\n\"tolerance\": 0,\n\"provider\": {\n\"type\": \"process\",\n\"path\": \"grep\",\n\"arguments\": \"welcome=hello default.locale.txt\"\n}\n}\n</code></pre> <pre><code>type: probe\nname: lookup-text-in-lang-file\ntolerance: 0\nprovider:\ntype: process\npath: grep\narguments: welcome=hello default.locale.txt\n</code></pre> <p>Assuming, we would be expecting an error, which commonly translates to an exit code <code>1</code>, we would switch to <code>\"tolerance\": 1</code>.</p>"},{"location":"reference/tutorials/tolerance/#validate-the-status-code-of-a-http-probe","title":"Validate the status code of a HTTP probe","text":"<p>In this case, the simple <code>integer</code> tolerance will do. Indeed, the Chaos Toolkit will look by default to the status code of the HTTP response for validation.</p> <p>For instance:</p> JSONYAML <pre><code>{\n\"type\": \"probe\",\n\"name\": \"resource-must-exist\",\n\"tolerance\": 200,\n\"provider\": {\n\"type\": \"http\",\n\"url\": \"https://example.com/api/v1/entity\"\n}\n}\n</code></pre> <pre><code>type: probe\nname: resource-must-exist\ntolerance: 200\nprovider:\ntype: http\nurl: 'https://example.com/api/v1/entity'\n</code></pre>"},{"location":"reference/tutorials/tolerance/#specific-scenarios","title":"Specific scenarios","text":""},{"location":"reference/tutorials/tolerance/#validate-the-stdoutstderr-of-a-process","title":"Validate the stdout/stderr of a process","text":"<p>Assuming you want to validate the actual standard output of a process, you need to got a regular expression approach, as follows:</p> JSONYAML <pre><code>{\n\"type\": \"probe\",\n\"name\": \"lookup-text-in-lang-file\",\n\"tolerance\": {\n\"type\": \"regex\",\n\"pattern\": \"welcome=hello\",\n\"target\": \"stdout\"\n},\n\"provider\": {\n\"type\": \"process\",\n\"path\": \"cat\",\n\"arguments\": \"default.locale.txt\"\n}\n}\n</code></pre> <pre><code>type: probe\nname: lookup-text-in-lang-file\ntolerance:\ntype: regex\npattern: welcome=hello\ntarget: stdout\nprovider:\ntype: process\npath: cat\narguments: default.locale.txt\n</code></pre> <p>The important extra property to set here is <code>target</code> which tells the Chaos Toolkit where to locate the value to apply the pattern against. The reason we set <code>stdout</code> here is because a process probe returns an object made of three properties: <code>\"status\"</code>, <code>\"stdout\"</code> and <code>\"stderr\"</code>.</p>"},{"location":"reference/tutorials/tolerance/#validate-the-json-body-of-a-http-probe","title":"Validate the JSON body of a HTTP probe","text":"<p>In this case, use a <code>jsonpath</code> tolerance.</p> <p>For instance, let\u2019s assume you receive the following JSON payload:</p> <pre><code>{\n\"foo\": [{\"baz\": \"hello\"}, {\"baz\": \"bonjour\"}]\n}\n</code></pre> JSONYAML <pre><code>{\n\"type\": \"probe\",\n\"name\": \"resource-must-exist\",\n\"tolerance\": {\n\"type\": \"jsonpath\",\n\"path\": \"$.foo.*[?(@.baz)].baz\",\n\"expect\": [\"hello\", \"bonjour\"],\n\"target\": \"body\"\n},\n\"provider\": {\n\"type\": \"http\",\n\"url\": \"https://example.com/api/v1/entities\"\n}\n}\n</code></pre> <pre><code>type: probe\nname: resource-must-exist\ntolerance:\ntype: jsonpath\npath: '$.foo.*[?(@.baz)].baz'\nexpect:\n- hello\n- bonjour\ntarget: body\nprovider:\ntype: http\nurl: 'https://example.com/api/v1/entities'\n</code></pre> <p>The <code>expect</code> property tells the Chaos Toolkit what are the values to match against once the JSON Path has been applied against the <code>body</code> of the response of the HTTP probe\u2019s output.</p> <p>You may also validate against a number of extracted values instead:</p> JSONYAML <pre><code>{\n\"type\": \"probe\",\n\"name\": \"resource-must-exist\",\n\"tolerance\": {\n\"type\": \"jsonpath\",\n\"path\": \"$.foo.*[?(@.baz)].baz\",\n\"count\": 2,\n\"target\": \"body\"\n},\n\"provider\": {\n\"type\": \"http\",\n\"url\": \"https://example.com/api/v1/entities\"\n}\n}\n</code></pre> <pre><code>type: probe\nname: resource-must-exist\ntolerance:\ntype: jsonpath\npath: '$.foo.*[?(@.baz)].baz'\ncount: 2\ntarget: body\nprovider:\ntype: http\nurl: 'https://example.com/api/v1/entities'\n</code></pre>"},{"location":"reference/tutorials/tolerance/#validate-the-output-of-a-python-probe-returning-a-mapping","title":"Validate the output of a Python probe returning a mapping","text":"<p>In this case, use a <code>jsonpath</code> tolerance.</p> <p>For instance, let\u2019s assume you receive the following payload:</p> <pre><code>{\n\"foo\": [{\"baz\": \"hello\"}, {\"baz\": \"bonjour\"}]\n}\n</code></pre> JSONYAML <pre><code>{\n\"type\": \"probe\",\n\"name\": \"resource-must-exist\",\n\"tolerance\": {\n\"type\": \"jsonpath\",\n\"path\": \"$.foo.*[?(@.baz)].baz\",\n\"expect\": [\"hello\", \"bonjour\"]\n},\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"...\",\n\"func\": \"...\"\n}\n}\n</code></pre> <pre><code>type: probe\nname: resource-must-exist\ntolerance:\ntype: jsonpath\npath: '$.foo.*[?(@.baz)].baz'\nexpect:\n- hello\n- bonjour\nprovider:\ntype: python\nmodule: ...\nfunc: ...\n</code></pre> <p>The <code>expect</code> property tells the Chaos Toolkit what are the values to match against once the JSON Path has been applied against the probe\u2019s output.</p> <p>You may also validate against a number of extracted values instead:</p> JSONYAML <pre><code>{\n\"type\": \"probe\",\n\"name\": \"resource-must-exist\",\n\"tolerance\": {\n\"type\": \"jsonpath\",\n\"path\": \"$.foo.*[?(@.baz)].baz\",\n\"count\": 2\n},\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"...\",\n\"func\": \"...\"\n}\n}\n</code></pre> <pre><code>type: probe\nname: resource-must-exist\ntolerance:\ntype: jsonpath\npath: '$.foo.*[?(@.baz)].baz'\ncount: 2\nprovider:\ntype: python\nmodule: ...\nfunc: ...\n</code></pre>"},{"location":"reference/tutorials/tolerance/#advanced-scenarios","title":"Advanced Scenarios","text":"<p>The last case you may be reviewing now is when the default tolerances cannot support your use case. Then, you want to create your own tolerance by writing a new probe that takes the output, of the tolerance under validation, as an argument. Usually, this tolerance probe is implemented in Python to have more power but this isn\u2019t compulsory.</p> <p>For instance, the following:</p> JSONYAML <pre><code>{\n\"type\": \"probe\",\n\"name\": \"lookup-text-in-lang-file\",\n\"tolerance\": 0,\n\"provider\": {\n\"type\": \"process\",\n\"path\": \"grep\",\n\"arguments\": \"welcome=hello default.locale.txt\"\n}\n}\n</code></pre> <pre><code>type: probe\nname: lookup-text-in-lang-file\ntolerance: 0\nprovider:\ntype: process\npath: grep\narguments: welcome=hello default.locale.txt\n</code></pre> <p>could be written as follows:</p> JSONYAML <pre><code>{\n\"type\": \"probe\",\n\"name\": \"lookup-text-in-lang-file\",\n\"tolerance\": {\n\"name\": \"search-text\",\n\"type\": \"probe\",\n\"provider\": {\n\"type\": \"python\",\n\"module\": \"my.package\",\n\"func\": \"search_text\",\n\"arguments\": {\n\"path\": \"default.local.txt\",\n\"search_for\": \"welcome=hello\"\n}\n}\n},\n\"provider\": {\n\"type\": \"process\",\n\"path\": \"cat\",\n\"arguments\": \"default.locale.txt\"\n}\n}\n</code></pre> <pre><code>type: probe\nname: lookup-text-in-lang-file\ntolerance:\nname: search-text\ntype: probe\nprovider:\ntype: python\nmodule: my.package\nfunc: search_text\narguments:\npath: default.local.txt\nsearch_for: welcome=hello\nprovider:\ntype: process\npath: cat\narguments: default.locale.txt\n</code></pre> <p>In that case, implement the <code>search_text(path: str, search_for: str, value: dict) -&gt; bool</code> function in the <code>my.package</code> Python module.</p> <pre><code>import re\n\n\ndef search_text(path: str, search_for: str, value: dict = None) -&gt; bool:\n    with open(path) as f:\n        content = f.read()\n        return re.compile(search_for).match(value[\"stdout\"]) is not None\n</code></pre> <p>As you can see, the <code>value</code> argument is not declared but must exist in the signature of the function. It is injected by the Chaos Toolkit and is set to the probe\u2019s output.</p>"},{"location":"reference/usage/cli/","title":"Overview","text":"<p>The heart of the Chaos Toolkit is the <code>chaos</code> command line.</p> <p>Activate the Python virtual environment</p> <p>If you run the Chaos Toolkit directly, rather than using a container, always ensure you have activated the virtual environment so that it can be found along its dependencies:</p> <pre><code>source ~/.venvs/chaostk/bin/activate\n</code></pre> <p>Once installed, the Chaos Toolkit CLI will display the commands it supports  by executing:</p> <p><pre><code>chaos --help\n</code></pre> <pre><code>Usage: chaos [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --version                   Show the version and exit.\n  --verbose                   Display debug level traces.\n  --no-version-check          Do not search for an updated version of the\n                              chaostoolkit.\n  --change-dir TEXT           Change directory before running experiment.\n  --no-log-file               Disable logging to file entirely.\n  --log-file TEXT             File path where to write the command's log.\n                              [default: chaostoolkit.log]\n  --log-format [string|json]  Console logging format: string, json.\n  --settings TEXT             Path to the settings file.  [default:\n                              /Users/ciaran/.chaostoolkit/settings.yaml]\n  --help                      Show this message and exit.\n\nCommands:\n  discover  Discover capabilities and experiments.\n  info      Display information about the Chaos Toolkit environment.\n  init      Initialize a new experiment from discovered capabilities.\n  run       Run the experiment loaded from SOURCE, either a local file or...\n  settings  Read, write or remove from your settings file.\n  validate  Validate the experiment at SOURCE.\n</code></pre></p>"},{"location":"reference/usage/cli/#configure-the-chaos-toolkit","title":"Configure the Chaos Toolkit","text":"<p>For the most part, the Chaos Toolkit does not need to be configured. However, if it does, the settings are stored in a YAML file on your local machine.</p> <p>Tip</p> <p>Unless you enable one of the features requiring extra configuration, you don\u2019t need to create that file. If a feature requires extra configuration, its documentation will say so.</p>"},{"location":"reference/usage/cli/#create-the-settings-file","title":"Create the settings file","text":"<p>The settings file for the Chaos Toolkit should be located under the following path:</p> <pre><code>$HOME/.chaostoolkit/settings.yaml\n</code></pre> <p>As this file may hold sensitive data, it is advised to make it readable only for your own user:</p> <pre><code>chmod 600 $HOME/.chaostoolkit/settings.yaml\n</code></pre>"},{"location":"reference/usage/cli/#how-to-investigate-issues","title":"How to Investigate Issues","text":"<p>When your experiment fails to work as you would expect, you should start looking at the <code>chaostoolkit.log</code> file written to by the <code>chaos</code> command.</p> <p>This file contains a lot of traces from the Chaos Toolkit core but also any extensions that used the toolkit\u2019s logger.</p> <p>As new logs are appended to that file, it may grow big. Do not hesitate to wipe it out from time to time.</p> <p>Please, do make sure to visit our Slack or GitHub when you have a question around how the toolkit does things. The community will be pleased to help you out.</p>"},{"location":"reference/usage/discover/","title":"The <code>chaos discover</code> command","text":"<p>You use the <code>chaos discover</code> command to specify a Chaos Toolkit integration extension and, if supported by the integration, to then explore your target environment in order  to build a <code>discovery report</code> that can be used by the <code>chaos init</code> command to help  you bootstrap your own chaos engineering experiments.</p> <p>You can see the options available to you by executing:</p> <p><pre><code>chaos discover --help\n</code></pre> <pre><code>Usage: chaos discover [OPTIONS] PACKAGE\n\n  Discover capabilities and experiments.\n\nOptions:\n  --no-system-info       Do not discover system information.\n  --no-install           Assume package already in PYTHONPATH.\n  --discovery-path TEXT  Path where to save the the discovery outcome.\n                         [default: ./discovery.json]\n  --help                 Show this message and exit.\n</code></pre></p> <p>A tutorial on how to use the <code>chaos discover</code> command is available as part of the  Chaos Toolkit\u2019s Getting Started tutorials.</p>"},{"location":"reference/usage/discover/#discovering-capabilities-and-experiments","title":"Discovering capabilities and experiments","text":"<p>To execute <code>discover</code> all you need to do is specify the Chaos Toolkit integration extension that you\u2019d like to use, for example to use Kubernetes:</p> <p><pre><code>chaos discover chaostoolkit-kubernetes\n</code></pre> <pre><code>[2021-07-30 11:43:38 INFO] Attempting to download and install package 'chaostoolkit-kubernetes'\n[2021-07-30 11:43:45 INFO] Package downloaded and installed in current environment\n[2021-07-30 11:43:45 INFO] Discovering capabilities from chaostoolkit-kubernetes\n[2021-07-30 11:43:45 INFO] Searching for actions in chaosk8s.actions\n[2021-07-30 11:43:45 INFO] Searching for probes in chaosk8s.probes\n[2021-07-30 11:43:45 INFO] Searching for actions in chaosk8s.deployment.actions\n[2021-07-30 11:43:45 INFO] Searching for actions in chaosk8s.deployment.probes\n[2021-07-30 11:43:45 INFO] Searching for actions in chaosk8s.node.actions\n[2021-07-30 11:43:45 INFO] Searching for actions in chaosk8s.node.probes\n[2021-07-30 11:43:45 INFO] Searching for actions in chaosk8s.pod.actions\n[2021-07-30 11:43:45 INFO] Searching for probes in chaosk8s.pod.probes\n[2021-07-30 11:43:45 INFO] Searching for actions in chaosk8s.replicaset.actions\n[2021-07-30 11:43:45 INFO] Searching for actions in chaosk8s.service.actions\n[2021-07-30 11:43:45 INFO] Searching for actions in chaosk8s.service.probes\n[2021-07-30 11:43:45 INFO] Searching for actions in chaosk8s.statefulset.actions\n[2021-07-30 11:43:45 INFO] Searching for probes in chaosk8s.statefulset.probes\n[2021-07-30 11:43:45 INFO] Searching for actions in chaosk8s.crd.actions\n[2021-07-30 11:43:45 INFO] Searching for probes in chaosk8s.crd.probes\n[2021-07-30 11:43:45 INFO] Discovery outcome saved in ./discovery.json\n</code></pre></p> <p>The <code>chaos discover</code> command will produce a report saved in <code>./discovery.json</code> by default,  although you can specify where this report is produced by supplying the  <code>--discovery-report-path</code> option.</p>"},{"location":"reference/usage/discover/#discovery-without-system-information","title":"Discovery without System Information","text":"<p>To not probe the target system during the discovery process you can supply the  <code>--no-system-info</code> option.</p>"},{"location":"reference/usage/discover/#discovery-without-installation-of-an-integration-extension","title":"Discovery without Installation of an Integration Extension","text":"<p>If you already have the integration extension installed and available you can  speed up the discovery process by specifying the <code>--no-install</code> option.</p>"},{"location":"reference/usage/init/","title":"The <code>chaos init</code> command","text":"<p>You use the <code>chaos init</code> command to take a <code>discovery report</code>, usually created  by the <code>chaos discover</code> command, to then create an experiment based upon  what has been discovered about the integration extension and, if applicable,  the target environment.</p> <p>You can see the options available to you by executing:</p> <p><pre><code>chaos init --help\n</code></pre> <pre><code>Usage: chaos init [OPTIONS]\n\n  Initialize a new experiment from discovered capabilities.\n\nOptions:\n  --discovery-path PATH   Path to the discovery outcome.  [default:\n                          ./discovery.json]\n  --experiment-path PATH  Path where to save the experiment (.yaml or .json)\n                          [default: ./experiment.json]\n  --help                  Show this message and exit.\n</code></pre></p> <p>A tutorial on how to use the <code>chaos init</code> command is available as part of the  Chaos Toolkit\u2019s Getting Started tutorials.</p>"},{"location":"reference/usage/init/#initialise-a-new-experiment","title":"Initialise a new experiment","text":"<p>To initialise a new experiment based on what has been discovered  you simply need to execute the <code>chaos init</code> command:</p> <pre><code>chaos init\n</code></pre>  The following is a capture of the output after running chaos init and following the interactive prompts:  [2018-01-30 15:54:50 INFO] Let's build a new experiment Experiment's title: My new experiment Add an activity to your method Activity (0 to escape): 1 Kill a microservice by `name` in the namespace `ns`.  The microservice is killed by deleting the deployment for it without a graceful period to trigger an abrupt termination.  The selected resources are matched by the given `label_selector`. Do you want to use this action? [y/N]: y Argument's value for 'name': Argument's value for 'ns' [default]: Argument's value for 'label_selector' [name in ({name})]: app=webapp-app Do you want to select another activity? [y/N]: N [2018-01-30 15:55:21 INFO] Experiment created and saved in './experiment.json'  <p>By default, the <code>chaos init</code> command will look for a <code>./discovery.json</code>  file and use that as the basis of a new experiment\u2019s initialisation.</p> <p>You can specify another file to be used by suppling the  <code>--discovery-report-path</code> option.</p> <p>In addition the default output from the <code>init</code> command will be a new  Chaos Toolkit experiment definition in a <code>./experiment.json</code> file. If you would  prefer a different filename then this can be specified using the  <code>--experiment-path</code> option.</p>"},{"location":"reference/usage/install/","title":"How to Install the Chaos Toolkit","text":""},{"location":"reference/usage/install/#python-requirements","title":"Python Requirements","text":"<p>The chaostoolkit CLI is implemented in Python 3 and this requires a working Python installation to run. It officially supports Python 3.7+. It has only been tested against CPython.</p>"},{"location":"reference/usage/install/#install-python","title":"Install Python","text":"<p>Install Python for your system:</p> <p>On MacOS X:</p> <pre><code>brew install python3\n</code></pre> <p>On Debian/Ubuntu:</p> <pre><code>sudo apt-get install python3 python3-venv\n</code></pre> <p>On Windows:</p> <p>Download the latest binary installer from the Python website.</p>"},{"location":"reference/usage/install/#create-a-virtual-environment","title":"Create a virtual environment","text":"<p>Dependencies can be installed for your system via its package management but, more likely, you will want to install them yourself in a local virtual environment.</p> <pre><code>python3 -m venv ~/.venvs/chaostk\n</code></pre> <p>Make sure to always activate your virtual environment before using it:</p> <pre><code>source  ~/.venvs/chaostk/bin/activate\n</code></pre> <p>Tip</p> <p>You may want to use virtualenvwrapper to make this process much nicer.</p>"},{"location":"reference/usage/install/#install-the-cli","title":"Install the CLI","text":"<p>Install <code>chaostoolkit</code> in the virtual environment as follows:</p> <pre><code>pip install -U chaostoolkit\n</code></pre> <p>You can verify the command was installed by running:</p> <pre><code>chaos --version\n</code></pre>"},{"location":"reference/usage/install/#install-extensions","title":"Install Extensions","text":"<p>At this stage, you have installed the <code>chaos</code> command line and its core library. To fully enjoy the Chaos Toolkit, you will also want to install extensions for the various facets of your journey into Chaos Engineering.</p>"},{"location":"reference/usage/notification/","title":"Get Notifications From The Chaos Toolkit Flow","text":"<p>The Chaos Toolkit generates events when it is executed. You may benefit from those events to get notified via your chosen notification channels.</p>"},{"location":"reference/usage/notification/#chaos-toolkit-flow-events","title":"Chaos Toolkit Flow Events","text":"<p>The Chaos Toolkit defines the following events:</p> <p>Discovery flow</p> <ul> <li><code>\"discover-started\"</code>: when the discovery flow has begun<ul> <li>Payload: the name of the Chaos Toolkit extension used to discover the system</li> </ul> </li> <li><code>\"discover-completed\"</code>: when the discovery flow has completed<ul> <li>Payload: the result of the discovery</li> </ul> </li> <li><code>\"discover-failed\"</code>: when the discovery flow has failed<ul> <li>Payload: the name of the Chaos Toolkit extension usd to discover the system</li> <li>Additional Payload: The error</li> </ul> </li> </ul> <p>Init flow</p> <ul> <li><code>\"init-started\"</code>: when the init flow has begun<ul> <li>Payload: None</li> </ul> </li> <li><code>\"init-completed\"</code>: when the init flow has completed<ul> <li>Payload: the generated experiment</li> </ul> </li> </ul> <p>Run flow</p> <ul> <li><code>\"run-started\"</code>: when the run flow has begun<ul> <li>Payload: The experiment that gets executed</li> </ul> </li> <li><code>\"run-completed\"</code>: when the run flow has completed<ul> <li>Payload: The journal of the experiment\u2019s execution</li> </ul> </li> <li><code>\"run-failed\"</code>: when the run flow has failed<ul> <li>Payload: The journal of the experiment\u2019s execution</li> </ul> </li> </ul> <p>Validate flow</p> <ul> <li><code>\"validate-started\"</code>: when the validate flow has begun<ul> <li>Payload: The experiment to validate</li> </ul> </li> <li><code>\"validate-completed\"</code>: when the validate flow has completed<ul> <li>Payload: The experiment to validate</li> </ul> </li> <li><code>\"validate-failed\"</code>: when the validate flow has failed<ul> <li>Payload: The experiment to validate</li> <li>Additional Payload: The error</li> </ul> </li> </ul>"},{"location":"reference/usage/notification/#notification-event-structure","title":"Notification Event Structure","text":"<p>The events structure is as follows:</p> <pre><code>{\n\"name\": \"run-started|...\",\n\"payload\": \"the payload for the given event\",\n\"phase\": \"run|discovery|init|validate\",\n\"error\": \"only set when an error was triggered. Set to the actual raw error\",\n\"ts\": \"&lt;now&gt;\"\n}\n</code></pre> <p>Note, the error is not a failure of the experiment\u2019s steady-state but an error during the processing of the flow (for instance, the experiment\u2019s file has a mistake somewhere in its syntax, or an exception is raised somehow).</p>"},{"location":"reference/usage/notification/#declare-notification-channels","title":"Declare Notification Channels","text":"<p>Notification channels are declared in the Chaos Toolkit settings file under the <code>notifications:</code> section.</p> <p>Here is an example:</p> <pre><code>notifications:\n- type: http\nurl: https://mystuff.com/api\nverify_tls: false\nheaders:\nAuthorization: \"Bearer 1234\"\n- type: plugin\nmodule: chaosslack.notification\ntoken: xop-1235\nchannel: general\n</code></pre> <p>As you can see, channels are items in a list. Each channel is a mapping describing the kind of channel and its required information.</p> <p>For instance, here we have two channels. The first one is a call to the HTTPS endpoint while the other one uses the Chaos Toolkit Extension for Slack to send messages to Slack channels.</p> <p>Warning</p> <p>Notification channels are run sequential to the whole chaos flow, so the more you declare, the bigger the impact they could have on the readability of the experiment results.</p>"},{"location":"reference/usage/notification/#filter-events","title":"Filter Events","text":"<p>By default, all events are sent to the channels. However, you may decide, on a per channel basis, which events you want to be sent. This is done by adding the <code>events</code> field to a channel:</p> <pre><code>notifications:\n- type: plugin\nmodule: chaosslack.notification\ntoken: xop-1235\nchannel: general\nevents:\n- run-failed\n</code></pre> <p>The Slack channel will only receive events when a run experiment fails. This is a list so declare as many events as you need.</p>"},{"location":"reference/usage/notification/#http-notification-channel","title":"HTTP Notification Channel","text":"<p>A HTTP notification channel tells the Chaos Toolkit it must send the event over HTTP (or HTTPS) to the given endpoint. Here is the description of its fields:</p> <ul> <li><code>type</code>: <code>\"http\"</code> (required)</li> <li><code>url</code>: the endpoint address (required)</li> <li><code>verify_tls</code>: <code>true|false</code> depending if the endpoint certificates are   self-signed</li> <li><code>headers</code>: a mapping where the keys are header names and their associated   values</li> <li><code>forward_event_payload</code>: <code>true|false</code>. If <code>true</code>, the default, then the event   payload is sent to that endpoint in a <code>POST</code> request. Otherwise, a <code>GET</code>   request is performed with no body</li> </ul>"},{"location":"reference/usage/notification/#plugin-notification-channel","title":"Plugin Notification Channel","text":"<p>A plugin notification channel is an integration between an external system and the Chaos Toolkit event notification flow. It is more capable than basic HTTP channels as they are fully fledged Python functions.</p> <p>Warning</p> <p>A plugin channel could also be understood as a hook point into the Chaos Toolkit flow. Nothing prevents you from writing a plugin that performs operations based on those hook events. Please note however that they run sequentially to the whole flow, so the longer your operation takes, the longer it takes for your chaos experiment to carry on. This may invalidate certain experiments when timing is critical.</p> <p>Here are the fields to declare one:</p> <ul> <li><code>type</code>: <code>\"plugin\"</code> (required)</li> <li><code>module</code>: the dotted path to the Python module containing the function to   apply (required)</li> <li><code>func</code>: the name of the function to apply (in that module), defaults to   <code>\"notify\"</code></li> </ul> <p>Any other fields will be passed on as-is to the function for its internal usage. For instance:</p> <pre><code>notifications:\n- type: plugin\nmodule: chaosslack.notification\ntoken: xop-1235\nchannel: general\n</code></pre> <p>The <code>token</code> and <code>channel</code> fields will be provided directly to the <code>notify</code> function of the <code>chaosslack.notification</code> module.</p>"},{"location":"reference/usage/notification/#send-notifications-to-slack","title":"Send Notifications To Slack","text":"<p>Notifying about Chaos Experiment runs in a Slack channel is so common that we will describe this integration here.</p> <p>First, you must install the Chaos Toolkit Integration for Slack:</p> <pre><code>pip install -U chaostoolkit-slack\n</code></pre> <p>Then, you should declare your notification channels as follows in the Chaos Toolkit settings file:</p> <pre><code>notifications:\n- type: plugin\nmodule: chaosslack.notification\ntoken: xop-1235\nchannel: general\n</code></pre> <p>You may define as many channels as you need, for instance for different kind of events.</p> <p>The <code>token</code> and <code>channel</code> fields are mandatory in this case. The <code>token</code> field must be set to a valid Slack token. You may start with a legacy token before moving on to a Slack App as per Slack guidelines.</p> <p>The Chaos Toolkit itself does not provide a Slack App at this moment.</p> <p>The <code>channel</code> must be a name of an existing channel. The payload message sent to Slack is defined in the plugin. If you need to amend it, please open an issue there.</p>"},{"location":"reference/usage/notification/#debugging-notifications","title":"Debugging Notifications","text":"<p>The Chaos Toolkit does its best to not break the experiment when an event could not be pushed. If you do not see the notification you were expecting, you should start investigating in the <code>chaostoolkit.log</code> file. If Chaos Toolkit could handle the issue gracefully, it will log the error at the <code>DEBUG</code> level.</p> <p>If the error occurs inside the core Chaos Toolkit library, please raise an issue there. Otherwise, raise an issue with the appropriate plugin.</p>"},{"location":"reference/usage/report/","title":"The <code>chaos report</code> command","text":"<p>You use the <code>chaos report</code> command to take the journal produced by the  <code>chaos run</code> command and produce a report in a specified format.</p> <p>Due to the many operating system-dependent features that the <code>chaos report</code>  command relies upon, the <code>chaos report</code> command is not installed with the  Chaos Toolkit CLI. To install the <code>chaos report</code> command you need to install  the <code>chaostoolkit-reporting</code> plugin and the dependencies appropriate to your  own operating system.</p> <p>Once the plugin is installed you can see the options available to you by  executing:</p> <p><pre><code>chaos report --help\n</code></pre> <pre><code>Usage: chaos report [OPTIONS] [JOURNAL]... REPORT\n\n  Generate a report from the run journal(s).\n\nOptions:\n  --export-format TEXT  Format to export the report to: html, markdown, pdf.\n  --help                Show this message and exit.\n</code></pre></p> <p>A tutorial on how to use the <code>chaos report</code> command is available as part of the  Chaos Toolkit\u2019s Getting Started tutorials.</p>"},{"location":"reference/usage/report/#generating-a-report","title":"Generating a report","text":"<p>When an experiment completes after using the <code>chaos run</code> command a journal is  generated and stored in the <code>chaos-report.json</code> file. A PDF or HTML report may  be generated from this journal using the chaostoolkit-reporting  library.</p> <p>The <code>chaos report</code> command expects the path to the <code>chaos-report.json</code> file  and a path to the actual report file that you require.</p> <p>You can export various formats of report by specifying what you want using the  <code>--export-format</code> option.</p> <p>For example, to generate a PDF report you can run the following command:</p> <pre><code>chaos report --export-format=pdf chaos-report.json report.pdf\n</code></pre> <p>An HTML report can be produced using:</p> <pre><code>chaos report --export-format=html5 chaos-report.json report.html\n</code></pre>"},{"location":"reference/usage/run/","title":"The <code>chaos run</code> command","text":"<p>You use the <code>chaos run</code> command to execute your declarative chaos engineering  experiments. To see the options that can be passed to the <code>chaos run</code> command,  execute:</p> <pre><code>chaos run --help\n</code></pre> <pre><code>Usage: chaos run [OPTIONS] SOURCE\n\n  Run the experiment loaded from SOURCE, either a local file or a HTTP\n  resource. SOURCE can be formatted as JSON or YAML.\n\nOptions:\n  --journal-path TEXT             Path where to save the journal from the\n                                  execution.\n  --dry                           Run the experiment without executing\n                                  activities.\n  --no-validation                 Do not validate the experiment before\n                                  running.\n  --no-verify-tls                 Do not verify TLS certificate.\n  --rollback-strategy [default|always|never|deviated]\n                                  Rollback runtime strategy. Default is to\n                                  never play them on interruption or failed\n                                  hypothesis.\n  --var TEXT                      Specify substitution values for\n                                  configuration only. Can be provided multiple\n                                  times. The pattern must be key=value or\n                                  key:type=value. In that latter case, the\n                                  value will be casted as the specified type.\n                                  Supported types are: int, float, bytes. No\n                                  type specified means a utf-8 decoded string.\n  --var-file PATH                 Specify files that contain configuration and\n                                  secret substitution values. Either as a\n                                  json/yaml payload where each key has a value\n                                  mapping to a configuration entry. Or a .env\n                                  file defining environment variables. Can be\n                                  provided multiple times.\n  --hypothesis-strategy [default|before-method-only|after-method-only|during-method-only|continuously]\n                                  Strategy to execute the hypothesis during\n                                  the run.\n  --hypothesis-frequency FLOAT    Pace at which running the hypothesis. Only\n                                  applies when strategy is either: during-\n                                  method-only or continuously\n  --fail-fast                     When running in the during-method-only or\n                                  continuous strategies, indicate the\n                                  hypothesis can fail the experiment as soon\n                                  as it deviates once. Otherwise, keeps\n                                  running until the end of the experiment.\n  --help                          Show this message and exit.\n</code></pre> <p>A tutorial on how to use the <code>chaos run</code> command is available as part of the  Chaos Toolkit\u2019s Getting Started tutorials.</p>"},{"location":"reference/usage/run/#executing-an-experiment-plan","title":"Executing an Experiment Plan","text":"<p>To execute an experiment plan you simply pass it to the <code>chaos run</code> command:</p> <pre><code>chaos run experiment.json\n</code></pre> <pre><code>[2018-01-30 16:35:04 INFO] Validating experiment's syntax\n[2018-01-30 16:35:04 INFO] Experiment looks valid\n[2018-01-30 16:35:04 INFO] Running experiment: My new experiment\n[2018-01-30 16:35:04 INFO] No steady state hypothesis defined. That's ok, just exploring.\n[2018-01-30 16:35:04 INFO] Action: kill_microservice\n[2018-01-30 16:35:04 INFO] No steady state hypothesis defined. That's ok, just exploring.\n[2018-01-30 16:35:04 INFO] Let's rollback...\n[2018-01-30 16:35:04 INFO] No declared rollbacks, let's move on.\n[2018-01-30 16:35:04 INFO] Experiment ended with status: completed\n</code></pre> <p>Chaos Toolkit will log all the steps it follows from your plan in a journal which by default is called <code>journal.json</code>. You can specify the name of this journal output file using the <code>--journal-path</code> option.</p>"},{"location":"reference/usage/run/#rehearsing-an-experiment-execution","title":"Rehearsing an experiment execution","text":"<p>To test that you have a valid experiment you can pass the <code>--dry</code> option.</p>"},{"location":"reference/usage/run/#run-an-experiment-without-validation","title":"Run an experiment without validation","text":"<p>You can run an experiment and skip the experiment\u2019s validation using the  <code>--no-validation</code> option.</p>"},{"location":"reference/usage/run/#run-an-experiment-with-different-steady-state-strategies","title":"Run an experiment with different steady state strategies","text":"<p>By default, the steady state will be tested before and after an experiment runs. However, you can specify a different strategy through the <code>--hypothesis-strategy</code> parameter. The options are:</p> <ul> <li><code>default</code> </li> <li><code>before-method-only</code></li> <li><code>after-method-only</code></li> <li><code>during-method-only</code></li> <li><code>continuously</code></li> </ul> <p>For example: <pre><code>chaos run ./experiment.json --hypothesis-strategy continuously\n</code></pre></p>"},{"location":"reference/usage/run/#run-an-experiment-with-different-rollback-strategies","title":"Run an experiment with different rollback strategies","text":"<p>In Chaos Toolkit, rollbacks are always played unless one of the two followings is true:</p> <ul> <li>the steady-state hypothesis deviates before the method</li> <li>a control interrupted the execution</li> <li>the <code>chaos</code> command receives a <code>SIGINT</code> or <code>SIGTERM</code> signal</li> </ul> <p>The Chaos Toolkit provides a mechanism (since v1.5.0) that gives the operator a chance to change that behavior.</p>"},{"location":"reference/usage/run/#always-run-rollbacks","title":"Always run rollbacks","text":"<p>Ensure rollbacks are always applied</p> <pre><code>chaos run --rollback-strategy=always experiment.json\n</code></pre>"},{"location":"reference/usage/run/#run-rollbacks-only-on-deviation","title":"Run rollbacks only on deviation","text":"<p>Run the rollbacks only if your experiment deviated.</p> <pre><code>chaos run --rollback-strategy=deviated experiment.json\n</code></pre>"},{"location":"reference/usage/run/#never-run-rollbacks-strategy","title":"Never run rollbacks strategy","text":"<p>Never run any rollbacks, for instance when you want to explore the system after a successful experiment without undoing what the experiment changed:</p> <pre><code>chaos run --rollback-strategy=never experiment.json\n</code></pre>"},{"location":"reference/usage/run/#override-configuration-and-secrets-at-runtime","title":"Override configuration and secrets at runtime","text":"<p>While configuration and secrets are declared in the experiment itself, you may sometimes need to override the values at runtime. This can be achieved through the <code>--var KEY[:TYPE]=VALUE</code> or <code>--var-file filepath.json|yaml|.env</code> flags.</p> <p>The <code>--var KEY[:TYPE]=VALUE</code> can only override configuration values to prevent laking secrets on the command line. The <code>KEY</code> is the final key used in the experiment, for instance:</p> <pre><code>{\n\"configuration\": {\n\"message\": \"hello world\"\n}\n}\n</code></pre> <p>or</p> <pre><code>{\n\"configuration\": {\n\"message\": {\n\"type\": \"env\",\n\"key\": \"MY_MESSAGE\"\n}\n}\n}\n</code></pre> <p>In both cases, the override key is <code>message</code>.</p> <p>If you specify the <code>TYPE</code> it must be one of <code>str, int, float, bytes</code> with <code>str</code> the default so not required. Chaos Toolkit will try to convert the given <code>VALUE</code> to the specified type and fail if it cannot.</p> <p>The <code>--var-file filepath.json|yaml|.env</code> gives you the opportunity to override the configuration and secrets blocks. the format of the json and yaml files are as follows:</p> <pre><code>{\n\"configuration\": {\n\"KEY\": VALUE\n},\n\"secrets\": {\n\"scope\": {\n\"KEY\": VALUE\n}\n}\n}\n</code></pre> <pre><code>---\nconfiguration:\nKEY: VALUE\nsecrets:\nscope:\nKEY: VALUE\n</code></pre> <p>The <code>secrets</code> block follows the same format as the experiment so the <code>scope</code> is the scope given in the experiment. For example:</p> <pre><code>{\n\"configuration\": {\n\"service_name\": \"ec2\"\n},\n\"secrets\": {\n\"aws\": {\n\"api_token\": \"1234\",\n\"something\": \"whatever\"\n}\n}\n}\n</code></pre> <p>would turn as the following var file:</p> <pre><code>{\n\"secrets\": {\n\"aws\": {\n\"api_token\": \"56787\"\n}\n}\n}\n</code></pre> <p>We are not overridding the <code>configuration</code> section and only part of the <code>secrets</code> section.</p> <p>Finally, should you keep your variables in a .env file, it will only be able to override the configuration.</p>"},{"location":"reference/usage/scheduling/","title":"Scheduling your Experiments","text":"<p>Scheduling is not built into the Chaos Toolkit itself. However it is common  to want to run an experiment periodically when you may not be at the keyboard.</p> <p>In these cases we recommend using a system such as  <code>cron</code> to schedule your experiment  executions. You can also use a Kubernetes job   to give you full control over the lifecycle of that job using the   common Kubernetes features.</p>"},{"location":"reference/usage/upgrade/","title":"How to Upgrade the Chaos Toolkit","text":"<p>You can update your Chaos Toolkit installation by executing:</p> <pre><code>pip install -U chaostoolkit\n</code></pre>"},{"location":"resources/logos/","title":"Chaos Toolkit Resources: Logos","text":"<p>The following resources are licensed under the CC BY 4.0 license so you can use  them wherever you (presentations, web sites etc) like as long as you attribute back to the Chaos Toolkit  project:</p> <ul> <li>Chaos Toolkit Logo Sources</li> </ul>"},{"location":"resources/slides/","title":"Chaos Toolkit Resources: Slides","text":"<p>The following is a growing collection of slides that can be used by anyone in  the community when speaking about the Chaos Toolkit. These resources are  licensed under the CC BY 4.0 license so you can use them wherever you  like (presentations, web sites etc) as long as you attribute back to the   Chaos Toolkit project:</p> <ul> <li>Chaos Toolkit Timeline</li> </ul>"},{"location":"shared/code/","title":"Chaos Toolkit Documentation Support Code","text":"<p>Support code for the documentation.</p> <p>You may want to clone this repository to play with the code used in the tutorials.</p>"}]}